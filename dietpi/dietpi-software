#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Software
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location: /{DietPi,boot}/dietpi/dietpi-software
	# - Installs "ready to run" software with optimisations unique to the device.
	# - Generates and uses /DietPi/dietpi/.installed (software list) # -1=selected for uninstall, 0=not installed, 1=selected for install, 2=installed
	#
	# Usage:
	# - dietpi-software			# Menu to select software for (un)install
	# - dietpi-software install		$software_id (OR) $INDEX_{SSHSERVER,FILESERVER,LOGGING,WEBSERVER}_TARGET=-int
	# - dietpi-software reinstall		# Same as installed, however, only reinstalls if state =2. Does not uninstall due to package removal danger (eg: Xserver removes Kodi), simply flags to be installed (=1).
	# - dietpi-software uninstall		$software_id
	# - dietpi-software list		# Lists all available software titles with ID and info
	# - dietpi-software free		# List currently unused software IDs to be used for new software implementations
	#////////////////////////////////////

	# Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Software'
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	G_INIT
	# Import DietPi-Globals ---------------------------------------------------------------

	#/////////////////////////////////////////////////////////////////////////////////////
	# Filepath
	#/////////////////////////////////////////////////////////////////////////////////////
	FP_INSTALLED_FILE='/DietPi/dietpi/.installed'
	FP_INSTALLED_FILE_TEMP='.installed'

	# Used to set user/personal data directories (eg: usbdrive)
	FP_DIETPI_DEDICATED_USBDRIVE=''

	# Default user content folders used in DietPi.
	FOLDER_MUSIC='Music'
	FOLDER_PICTURES='Pictures'
	FOLDER_VIDEO='Video'
	FOLDER_DOWNLOADS='downloads'

	Write_InstallFileList(){

		local fp_target=$FP_INSTALLED_FILE
		local write_software_in_pending_state=0
		if [[ $1 == 'temp' ]]; then

			fp_target=$FP_INSTALLED_FILE_TEMP
			write_software_in_pending_state=1

		fi

		> $fp_target

		# Save installed states
		for i in ${!aSOFTWARE_NAME[@]}
		do

			# - Never save pending state for software (=1). Excluding temp saves.
			if (( ${aSOFTWARE_INSTALL_STATE[$i]} == 1 && ! $write_software_in_pending_state )); then

				echo "aSOFTWARE_INSTALL_STATE[$i]=0" >> $fp_target

			else

				echo "aSOFTWARE_INSTALL_STATE[$i]=${aSOFTWARE_INSTALL_STATE[$i]}" >> $fp_target

			fi

		done

		# Misc
		cat << _EOF_ >> $fp_target

# DietPi Choice System: SSH Server
INDEX_SSHSERVER_CURRENT=$INDEX_SSHSERVER_CURRENT
INDEX_SSHSERVER_TARGET=$INDEX_SSHSERVER_TARGET

# DietPi Choice System: File Server
INDEX_FILESERVER_CURRENT=$INDEX_FILESERVER_CURRENT
INDEX_FILESERVER_TARGET=$INDEX_FILESERVER_TARGET

# DietPi Choice System: Logging
INDEX_LOGGING_CURRENT=$INDEX_LOGGING_CURRENT
INDEX_LOGGING_TARGET=$INDEX_LOGGING_TARGET

# DietPi Preference System: Webserver base
INDEX_WEBSERVER_CURRENT=$INDEX_WEBSERVER_CURRENT
INDEX_WEBSERVER_TARGET=$INDEX_WEBSERVER_TARGET
_EOF_

	}

	Read_InstallFileList(){

		# Load Software states
		G_DIETPI-NOTIFY -2 'Reading database'

		local fp_target=$FP_INSTALLED_FILE
		[[ $1 == 'temp' ]] && fp_target=$FP_INSTALLED_FILE_TEMP

		# Load
		[[ -f $fp_target ]] && . $fp_target

		# Always reset choice system during first run to defaults: https://github.com/MichaIng/DietPi/issues/1122
		if (( $G_DIETPI_INSTALL_STAGE == 1 )); then

			INDEX_SSHSERVER_CURRENT=-1
			INDEX_SSHSERVER_TARGET=-1

			INDEX_FILESERVER_CURRENT=0
			INDEX_FILESERVER_TARGET=0

			INDEX_LOGGING_CURRENT=-1
			INDEX_LOGGING_TARGET=-1

			INDEX_WEBSERVER_CURRENT=-2
			INDEX_WEBSERVER_TARGET=-2

		fi

		G_DIETPI-NOTIFY 0 'Reading database'

	}

	Check_Internet_and_NTPD(){

		# Internet: Use /etc/apt/sources.list for connection test
		G_CHECK_URL "$(grep -m1 '^[[:blank:]]*deb ' /etc/apt/sources.list | mawk '{print $2}')" # Will exit on failure here then prompt user to configure network

		# Time sync
		/DietPi/dietpi/func/run_ntpd

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Installation System
	#/////////////////////////////////////////////////////////////////////////////////////
	# Reboot after installation has finished
	DISABLE_REBOOT=0

	# Uninstall flag, used in software installations + removals, runs Uninstall_Software()
	UNINSTALL_REQUIRED=0

	# Global password for software installs
	GLOBAL_PW=''
	Update_Global_Pw(){

		GLOBAL_PW=''

		# Use new "pbkdf2" function on Buster to resolve warning about deprecated key derivation used: https://github.com/MichaIng/DietPi/issues/2213
		local pbkdf2
		(( $G_DISTRO > 4 )) && pbkdf2='-iter 10000'

		# Read encrypted password
		if [[ -f '/var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin' ]]; then

			GLOBAL_PW=$(openssl enc -d -a -md sha256 -aes-256-cbc $pbkdf2 -salt -pass pass:'DietPiRocks!' -in /var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin)
			# - Allow decryption and re-encrypt with "-iter 10000" on dist-upgraded Buster systems
			if (( $? && $G_DISTRO > 4 )); then

				GLOBAL_PW=$(openssl enc -d -a -md sha256 -aes-256-cbc -salt -pass pass:'DietPiRocks!' -in /var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin)
				[[ $? == 0 && $GLOBAL_PW ]] && openssl enc -e -a -md sha256 -aes-256-cbc -iter 10000 -salt -pass pass:'DietPiRocks!' -out /var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin <<< $GLOBAL_PW

			fi

		# If encryption has not yet been done, do it now!
		elif GLOBAL_PW=$(sed -n '/^[[:blank:]]*AUTO_SETUP_GLOBAL_PASSWORD=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt); then

			G_CONFIG_INJECT 'AUTO_SETUP_GLOBAL_PASSWORD=' 'AUTO_SETUP_GLOBAL_PASSWORD=Password has been encrypted and secured on rootFS' /DietPi/dietpi.txt
			openssl enc -e -a -md sha256 -aes-256-cbc $pbkdf2 -salt -pass pass:'DietPiRocks!' -out /var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin <<< $GLOBAL_PW
			[[ $GLOBAL_PW != 'dietpi' ]] && G_WHIP_MSG '[ INFO ] For security reasons your global software password has been removed from dietpi.txt and instead ecrypted and saved to:
 - /var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin\n
DietPi-Software will decrypt and use it for software installs. You can change it via:
 - dietpi-config > Security Options > Change Passwords'

		fi

		# Apply safe permissions
		chown root:root /var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin
		chmod 600 /var/lib/dietpi/dietpi-software/.GLOBAL_PW.bin

		# Failsafe
		if [[ ! $GLOBAL_PW ]]; then

			GLOBAL_PW='dietpi'
			G_WHIP_MSG "[FAILED] Unable to obtain your global software password\n\nThe following fallback password will be used:\n - $GLOBAL_PW"

		fi

	}

	# Total system RAM: Used to calculate percentage based value for software cache limits, e.g.: OPcache/APCu
	RAM_TOTAL=$(free -m | mawk '/^Mem:/ {print $2;exit}')

	# Run Installation Flag (1 = run installs)
	GOSTARTINSTALL=0

	# Install variables
	INSTALL_URL_ADDRESS=''
	UNINSTALL_URL_ADDRESS=''
	DEPS_LIST=''

	# Special installation vars
	USER_EMONHUB_APIKEY_COMPLETED=0
	USER_EMONHUB_APIKEY_CURRENT=0
	WIFIHOTSPOT_RTL8188C_DEVICE=0
	WIFIHOTSPOT_RTL8188C_PACKAGE=0
	USER_LINUX_AUTOINSTALL_PROMPT_DISPLAYED=0

	# PHP version specific directories, APT package-, module- and command names
	# - and distro specific MariaDB service name
	FP_PHP_BASE_DIR='/etc/php/7.3'
	PHP_NAME='php7.3'

	USBDRIVE=0

	# Choices Made?
	INSTALL_SOFTWARE_CHOICESMADE=0

	# DietPi Choice System: SSH Server
	# NB: Update Read_InstallFileList with defaults
	INSTALL_SSHSERVER_CHOICESMADE=0
	INDEX_SSHSERVER_CURRENT=-1
	INDEX_SSHSERVER_TARGET=-1

	# DietPi Choice System: Fileserver
	# NB: Update Read_InstallFileList with defaults
	INSTALL_FILESERVER_CHOICESMADE=0
	INDEX_FILESERVER_CURRENT=0
	INDEX_FILESERVER_TARGET=0

	# DietPi Choice System: Logging
	# NB: Update Read_InstallFileList with defaults
	INSTALL_LOGGING_CHOICESMADE=0
	INDEX_LOGGING_CURRENT=-1
	INDEX_LOGGING_TARGET=-1

	# DietPi Preference System: Webserver base
	# NB: Update Read_InstallFileList with defaults
	INDEX_WEBSERVER_CURRENT=-2
	INDEX_WEBSERVER_TARGET=-2

	FP_ONLINEDOC_URL='https://dietpi.com/phpbb/viewtopic.php?'

	# Available for (need to match highest value in dietpi-obtain_hw_model)
	MAX_G_HW_MODEL=72
	MAX_G_HW_ARCH=10
	MAX_G_DISTRO=6
	# - 2D array (well, bash style)
	declare -A aSOFTWARE_AVAIL_G_HW_MODEL
	declare -A aSOFTWARE_AVAIL_G_HW_ARCH
	declare -A aSOFTWARE_AVAIL_G_DISTRO

	# Generate arrays for all available software titles
	Software_Arrays_Init(){

		G_DIETPI-NOTIFY -2 'Initialising database'

		#--------------------------------------------------------------------------------
		# Categories
		# NB: Unique IDs, do not re-arrange or re-order!
		#--------------------------------------------------------------------------------
		# DietPi optimised software
		aSOFTWARE_CATEGORIES_DIETPI=(

			'●─ Desktops ' #0
			'●─ Remote Desktop Access ' #1
			'●─ Media Systems ' #2
			'●─ BitTorrent / Download Tools ' #3
			'●─ Cloud / Backups ' #4
			'●─ Emulation & Gaming ' #5
			'●─ Social / Search ' #6
			'●─ Camera / Surveillance ' #7
			'●─ WiFi Hotspot ' #8
			'●─ System Stats / Management ' #9
			'●─ Remote Access ' #10
			'●─ Hardware Projects ' #11
			'●─ System Security ' #12
			'●─ Webserver Stacks ' #13
			'●─ Pi-hole ' #14
			'●─ File Servers ' #15
			'●─ VPN ' #16
			'●─ Advanced Networking ' #17
			'●─ Home Automation ' #18
			'●─ Printing ' #19
			'●─ Computational Science ' #20

		)

		# Linux additional software
		aSOFTWARE_CATEGORIES_LINUX=(

			'●─ SSH Clients ' #0
			'●─ Fileserver Clients ' #1
			'●─ File Managers ' #2
			'●─ System ' #3
			'●─ Shared Libraries ' #4
			'●─ Networking / Tools ' #5
			'●─ Development / Programming ' #6
			'●─ Text Editors ' #7
			'●─ Desktop Utilities ' #8

		)

		#--------------------------------------------------------------------------------
		# DietPi software items
		#--------------------------------------------------------------------------------
		# Before adding, please check 'dietpi-software free' to list free IDs for use.

		# Assign unique ID to each item
		local software_id

		# Desktops
		#--------------------------------------------------------------------------------
		software_id=23

		aSOFTWARE_NAME[$software_id]='LXDE'
		aSOFTWARE_DESC[$software_id]='ultra lightweight desktop'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=42#p42'
		#------------------
		software_id=173

		aSOFTWARE_NAME[$software_id]='LXQt'
		aSOFTWARE_DESC[$software_id]='lightweight desktop'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=17712#p17712'
		#------------------
		software_id=24

		aSOFTWARE_NAME[$software_id]='MATE'
		aSOFTWARE_DESC[$software_id]='desktop enviroment'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2073#p2073'
		#------------------
		software_id=25

		aSOFTWARE_NAME[$software_id]='XFCE'
		aSOFTWARE_DESC[$software_id]='lightweight desktop'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2203#p2203'
		#------------------
		software_id=26

		aSOFTWARE_NAME[$software_id]='GNUStep'
		aSOFTWARE_DESC[$software_id]='lightweight desktop based on OpenStep'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2072#p2072'
		#------------------
		software_id=113

		aSOFTWARE_NAME[$software_id]='Chromium'
		aSOFTWARE_DESC[$software_id]='web browser for desktop or autostart'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=3011#p3011'
		# - ARMv6
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		#------------------
		software_id=174

		aSOFTWARE_NAME[$software_id]='GIMP'
		aSOFTWARE_DESC[$software_id]='mspaint on steroids'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=17713#p17713'
		#------------------
 		software_id=175

 		aSOFTWARE_NAME[$software_id]='XFCE4 Power'
 		aSOFTWARE_DESC[$software_id]='power manager with brightness (recommended for LXDE/LXQt)'
 		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
 		aSOFTWARE_TYPE[$software_id]=0
 		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
 		aSOFTWARE_ONLINEDOC_URL[$software_id]=''

		# Remote Desktops
		#--------------------------------------------------------------------------------
		software_id=28

		aSOFTWARE_NAME[$software_id]='TigerVNC Server'
		aSOFTWARE_DESC[$software_id]='desktop for remote connection'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=1
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_DESKTOP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=408#p408'
		#------------------
		software_id=29

		aSOFTWARE_NAME[$software_id]='XRDP'
		aSOFTWARE_DESC[$software_id]='remote desktop protocol (rdp) server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=1
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_DESKTOP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2074#p2074'
		#------------------
		software_id=30

		aSOFTWARE_NAME[$software_id]='NoMachine'
		aSOFTWARE_DESC[$software_id]='multi-platform server and client access'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=1
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_DESKTOP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2071#p2071'
		#------------------
		software_id=120

		aSOFTWARE_NAME[$software_id]='RealVNC Server'
		aSOFTWARE_DESC[$software_id]='desktop for remote connection'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=1
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_DESKTOP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=4149#p4149'
		# RPi only (archive.raspberrypi.org repo)
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done

		# Media Systems
		#--------------------------------------------------------------------------------
		software_id=31

		aSOFTWARE_NAME[$software_id]='Kodi'
		aSOFTWARE_DESC[$software_id]='the media centre for linux'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=43#p43'
		# Only RPi + Odroid + x86_64
		for ((i=22; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		# + ASUS TB
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,52]=1
		# - C1 Stretch
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,10]=0
		#------------------
		software_id=32

		aSOFTWARE_NAME[$software_id]='ympd'
		aSOFTWARE_DESC[$software_id]='lightweight web interface music player for mpd'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=50#p50'
		#------------------
		software_id=148

		aSOFTWARE_NAME[$software_id]='myMPD'
		aSOFTWARE_DESC[$software_id]='fork of ympd with improved features'
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=13978#p13978'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		#------------------
		software_id=119

		aSOFTWARE_NAME[$software_id]='CAVA'
		aSOFTWARE_DESC[$software_id]='optional: console audio vis for mpd'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=3928#p3928'
		#------------------
		software_id=33

		aSOFTWARE_NAME[$software_id]='Airsonic'
		aSOFTWARE_DESC[$software_id]='web interface media streaming server'
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=11280#p11280'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		aSOFTWARE_REQUIRES_FFMPEG[$software_id]=1
		# - Buster: https://github.com/MichaIng/DietPi/issues/2787
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,5]=0
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,6]=0
		#------------------
		software_id=34

		aSOFTWARE_NAME[$software_id]='Subsonic'
		aSOFTWARE_DESC[$software_id]='web interface media streaming server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_FFMPEG[$software_id]=1
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=213#p213'
		# - Buster: https://github.com/MichaIng/DietPi/issues/2787
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,5]=0
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,6]=0
		#------------------
		software_id=35

		aSOFTWARE_NAME[$software_id]='Logitech Media Server'
		aSOFTWARE_DESC[$software_id]='aka LMS, Squeezebox Server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1009#p1009'
		#------------------
		software_id=36

		aSOFTWARE_NAME[$software_id]='SqueezeLite'
		aSOFTWARE_DESC[$software_id]='audio player for lms & squeezebox'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1009#p1009'
		#------------------
		software_id=37

		aSOFTWARE_NAME[$software_id]='Shairport Sync'
		aSOFTWARE_DESC[$software_id]='airplay audio player with multiroom sync'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1221#p1221'
		#------------------
		software_id=39

		aSOFTWARE_NAME[$software_id]='ReadyMedia'
		aSOFTWARE_DESC[$software_id]='(MiniDLNA) media streaming server (dlna, upnp)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=49#p49'
		#------------------
		software_id=40

		aSOFTWARE_NAME[$software_id]='Ampache'
		aSOFTWARE_DESC[$software_id]='web interface media streaming server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_FFMPEG[$software_id]=1
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=554#p554'
		#------------------
		software_id=41

		aSOFTWARE_NAME[$software_id]='Emby Server'
		aSOFTWARE_DESC[$software_id]='web interface media streaming server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1789#p1789'
		# - ARMv6: https://github.com/MichaIng/DietPi/issues/534#issuecomment-416405968
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		#------------------
		software_id=42

		aSOFTWARE_NAME[$software_id]='Plex Media Server'
		aSOFTWARE_DESC[$software_id]='web interface media streaming server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1949#p1949'
		# - ARMv6: https://github.com/MichaIng/DietPi/issues/648
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		#------------------
		software_id=43

		aSOFTWARE_NAME[$software_id]='Murmur'
		aSOFTWARE_DESC[$software_id]='mumble voip server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1691#p1691'
		#------------------
		software_id=118

		aSOFTWARE_NAME[$software_id]='Mopidy'
		aSOFTWARE_DESC[$software_id]='web interface music & radio player'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=3611#p3611'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		#------------------
		software_id=121

		aSOFTWARE_NAME[$software_id]='Roon Bridge'
		aSOFTWARE_DESC[$software_id]='Turns device into Roon capable audio player'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=4153#p4153'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		# - ARMv6
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		#------------------
		software_id=124

		aSOFTWARE_NAME[$software_id]='NAA daemon'
		aSOFTWARE_DESC[$software_id]='signalyst network audio adaptor (naa)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=4294#p4294'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		#------------------
		software_id=128

		aSOFTWARE_NAME[$software_id]='MPD'
		aSOFTWARE_DESC[$software_id]='music player daemon'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		#aSOFTWARE_ONLINEDOC_URL[$software_id]
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		#------------------
		software_id=129

		aSOFTWARE_NAME[$software_id]='O!MPD'
		aSOFTWARE_DESC[$software_id]='feature-rich, web interface audio player for mpd'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=5171#p5171'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
 		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		#------------------
		software_id=135

		aSOFTWARE_NAME[$software_id]='IceCast'
		aSOFTWARE_DESC[$software_id]='Shoutcast streaming server (+DarkIce)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6526#p6526'
		# - VM
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,20]=0
		#------------------
		software_id=141

		aSOFTWARE_NAME[$software_id]='Spotify Connect Web'
		aSOFTWARE_DESC[$software_id]='web interface for spotify premium'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7013#p7013'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		# ARMv7 only
		for ((i=1; i<=$MAX_G_HW_ARCH; i++))
		do

			aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,$i]=0

		done
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,2]=1
		#------------------
		software_id=143

		aSOFTWARE_NAME[$software_id]='Koel'
		aSOFTWARE_DESC[$software_id]='web interface audio streamer'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7305#p7305'
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
 		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_REQUIRES_NODEJS[$software_id]=1
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_REQUIRES_FFMPEG[$software_id]=1
		# Currently user prompt asks for admin user credentials
		aSOFTWARE_REQUIRES_USERINPUT[$software_id]=1
		#------------------
		software_id=146

		aSOFTWARE_NAME[$software_id]='Tautulli'
		aSOFTWARE_DESC[$software_id]='monitoring and tracking tool for Plex'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7463#p7463'
 		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		#------------------
		software_id=154

		aSOFTWARE_NAME[$software_id]='Roon Server'
		aSOFTWARE_DESC[$software_id]='Roon capable audio player and core'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7966#p7966'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_FFMPEG[$software_id]=1
		# x86_64 only
		for ((i=1; i<=$MAX_G_HW_ARCH; i++))
		do

			aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,$i]=0

		done
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,10]=1
		#------------------
		software_id=159

		aSOFTWARE_NAME[$software_id]='Allo'
		aSOFTWARE_DESC[$software_id]='web interface'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=-1
		#aSOFTWARE_ONLINEDOC_URL[$software_id]
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
 		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		#------------------
		software_id=160

		aSOFTWARE_NAME[$software_id]='Allo_update'
		aSOFTWARE_DESC[$software_id]='quick reinstall/update web only'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=-1
		#aSOFTWARE_ONLINEDOC_URL[$software_id]
		#------------------
		software_id=163

		aSOFTWARE_NAME[$software_id]='GMediaRender'
		aSOFTWARE_DESC[$software_id]='DLNA audio render/endpoint'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=9012#p9012'
		#------------------
		software_id=167

		aSOFTWARE_NAME[$software_id]='Raspotify'
		aSOFTWARE_DESC[$software_id]='spotify connect client'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=9368#p9368'
		# - ARMv8
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,3]=0
		# - x86_64
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,10]=0
		#------------------
		software_id=80

		aSOFTWARE_NAME[$software_id]='Ubooquity'
		aSOFTWARE_DESC[$software_id]='a free home server for your comics and ebooks library'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=12969#p12969'
		#------------------
		software_id=86

		aSOFTWARE_NAME[$software_id]='Roon Extension Manager'
		aSOFTWARE_DESC[$software_id]='Manage extensions from within Roon'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_NODEJS[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=13160#p13160'

		# BitTorrent
		#--------------------------------------------------------------------------------
		software_id=44

		aSOFTWARE_NAME[$software_id]='Transmission'
		aSOFTWARE_DESC[$software_id]='bittorrent server with web interface (c)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=46#p46'
		#------------------
		software_id=45

		aSOFTWARE_NAME[$software_id]='Deluge'
		aSOFTWARE_DESC[$software_id]='bittorrent server with web interface (python)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=61#p61'
		#------------------
		software_id=46

		aSOFTWARE_NAME[$software_id]='qBitTorrent'
		aSOFTWARE_DESC[$software_id]='bittorrent server with web interface (c++)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2272#p2272'
		#------------------
		software_id=107

		aSOFTWARE_NAME[$software_id]='rTorrent'
		aSOFTWARE_DESC[$software_id]='bittorrent server with rutorrent web interface'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2603#p2603'
		#------------------
		software_id=116

		aSOFTWARE_NAME[$software_id]='Medusa'
		aSOFTWARE_DESC[$software_id]='Automatic Video Library Manager for TV Shows'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=3327#p3327'
		#------------------
		software_id=132

		aSOFTWARE_NAME[$software_id]='Aria2'
		aSOFTWARE_DESC[$software_id]='download manager with web interface'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6177#p6177'
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_SQLITE[$software_id]=1
		#------------------
		software_id=139

		aSOFTWARE_NAME[$software_id]='SABnzbd'
		aSOFTWARE_DESC[$software_id]='nzb download manager'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6747#p6747'
		# Pre-compiling required on ARM
		(( $G_HW_ARCH < 10 )) && aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		#------------------
		software_id=142

		aSOFTWARE_NAME[$software_id]='CouchPotato'
		aSOFTWARE_DESC[$software_id]='automatically download movies'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6747#p6747'
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		#------------------
		software_id=144

		aSOFTWARE_NAME[$software_id]='Sonarr'
		aSOFTWARE_DESC[$software_id]='automatically download TV shows'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7455#p7455'
		aSOFTWARE_REQUIRES_SQLITE[$software_id]=1
		#------------------
		software_id=145

		aSOFTWARE_NAME[$software_id]='Radarr'
		aSOFTWARE_DESC[$software_id]='automatically download movies'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7457#p7457'
		aSOFTWARE_REQUIRES_SQLITE[$software_id]=1
		#------------------
		software_id=106

		aSOFTWARE_NAME[$software_id]='Lidarr'
		aSOFTWARE_DESC[$software_id]='automatically download music'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=13580#p13580'
		aSOFTWARE_REQUIRES_SQLITE[$software_id]=1
		#------------------
		software_id=147

		aSOFTWARE_NAME[$software_id]='Jackett'
		aSOFTWARE_DESC[$software_id]='API support for your torrent trackers'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7503#p7503'
		#------------------
		software_id=149

		aSOFTWARE_NAME[$software_id]='NZBget'
		aSOFTWARE_DESC[$software_id]='nzb download manager'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7575#p7575'
		#------------------
		software_id=155

		aSOFTWARE_NAME[$software_id]='HTPC Manager'
		aSOFTWARE_DESC[$software_id]='manage your HTPC from anywhere'
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=8043#p8043'

		# Cloud / Backups
		#--------------------------------------------------------------------------------
		software_id=47

		aSOFTWARE_NAME[$software_id]='ownCloud'
		aSOFTWARE_DESC[$software_id]='File sync, sharing and collaboration platform'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=47#p47'
		# ownCloud up to 10.2 does not support PHP7.3 (Buster): https://doc.owncloud.org/server/administration_manual/installation/system_requirements.html
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,5]=0
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,6]=0
		# ARMv6 devices have no chance to get some required PHP7.2 packages (APCu, Redis)
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		# Disable if PHP7.3 is already installed
		command -v php7.3 &> /dev/null && aSOFTWARE_AVAIL_G_DISTRO[$software_id,$G_DISTRO]=0
		#------------------
		software_id=114

		aSOFTWARE_NAME[$software_id]='Nextcloud'
		aSOFTWARE_DESC[$software_id]='File sync, sharing and collaboration platform'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=3026#p3026'
		#------------------
		software_id=168

		aSOFTWARE_NAME[$software_id]='Nextcloud Talk'
		aSOFTWARE_DESC[$software_id]='Video calls with configured coTURN server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		# Currently requires manual domain and coTURN server port input.
		# - To resolve: Default port 5349 could be used, but reliable method to get external domain/static IP is required.
		aSOFTWARE_REQUIRES_USERINPUT[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=15227#p15227'
		#------------------
		software_id=48

		aSOFTWARE_NAME[$software_id]='Pydio'
		aSOFTWARE_DESC[$software_id]='feature-rich backup and sync server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1064#p1064'
		#------------------
		software_id=111

		aSOFTWARE_NAME[$software_id]='UrBackup Server'
		aSOFTWARE_DESC[$software_id]='full system backup server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=65#p65'
		# - ARMv6
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		#------------------
		software_id=49

		aSOFTWARE_NAME[$software_id]='Gogs'
		aSOFTWARE_DESC[$software_id]='personal github server with web interface'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2187#p2187'
		# - ARMv8
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,3]=0
		#------------------
		software_id=50

		aSOFTWARE_NAME[$software_id]='Syncthing'
		aSOFTWARE_DESC[$software_id]='backup and sync server with web interface'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2363#p2363'
		#------------------
		software_id=134

		aSOFTWARE_NAME[$software_id]='Tonido'
		aSOFTWARE_DESC[$software_id]='lightweight cloud based backup system'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6476#p6476'
		# - ARMv6
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		# - ARMv8
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,3]=0
		#------------------
		software_id=158

		aSOFTWARE_NAME[$software_id]='Minio'
		aSOFTWARE_DESC[$software_id]='S3 compatible distributed object server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		#------------------

		software_id=161
		aSOFTWARE_NAME[$software_id]='FuguHub'
		aSOFTWARE_DESC[$software_id]='Lightweight WebDAV cloud (eg: dropbox) with a CMS'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		# - ARMv8
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,3]=0
		#------------------
		software_id=165

		aSOFTWARE_NAME[$software_id]='Gitea'
		aSOFTWARE_DESC[$software_id]='Git with a cup of tea'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=9863#p9863'

		# Emulation / Gaming
		#--------------------------------------------------------------------------------
		software_id=108

		aSOFTWARE_NAME[$software_id]='Amiberry'
		aSOFTWARE_DESC[$software_id]='Optimised Amiga emulator for ARM-based SoCs'
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=64#p64'
		(( $G_DISTRO < 5 )) && aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		# + Odroid XU4
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,11]=1
		# + ASUS TB
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,52]=1
		#------------------
		software_id=51

		aSOFTWARE_NAME[$software_id]='OpenTyrian'
		aSOFTWARE_DESC[$software_id]='a classic retro game, addictive'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=45#p45'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		# + x86_64
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,21]=1
		#------------------
		software_id=112

		aSOFTWARE_NAME[$software_id]='DXX-Rebirth'
		aSOFTWARE_DESC[$software_id]='Descent 1/2'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2963#p2963'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=52

		aSOFTWARE_NAME[$software_id]='Cuberite'
		aSOFTWARE_DESC[$software_id]='minecraft server with web interface (c++)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2068#p2068'
		# - ARMv8
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,3]=0
		#------------------
		software_id=53

		aSOFTWARE_NAME[$software_id]='MineOS'
		aSOFTWARE_DESC[$software_id]='minecraft servers with web interface (java)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		aSOFTWARE_REQUIRES_NODEJS[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2069#p2069'
		#------------------
		software_id=156

		aSOFTWARE_NAME[$software_id]='Steam'
		aSOFTWARE_DESC[$software_id]='client'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=8016#p8016'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		aSOFTWARE_REQUIRES_DESKTOP[$software_id]=1
		# Native PC only
		for ((i=0; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,21]=1
		#------------------
		software_id=164

		aSOFTWARE_NAME[$software_id]='Nukkit'
		aSOFTWARE_DESC[$software_id]='A nuclear-powered server for Minecraft Pocket Edition'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=10675#p10675'

		# Social Media
		#--------------------------------------------------------------------------------
		software_id=54

		aSOFTWARE_NAME[$software_id]='phpBB'
		aSOFTWARE_DESC[$software_id]='bulletin board forum software'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=51#p51'
		# phpBB up to 3.2 does not support PHP7.3 (Buster)
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,5]=0
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,6]=0
		# ARMv6 devices have no chance to get some required PHP7.2 packages (APCu, Redis)
		aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,1]=0
		# Disable if PHP7.3 is already installed
		command -v php7.3 &> /dev/null && aSOFTWARE_AVAIL_G_DISTRO[$software_id,$G_DISTRO]=0
		#------------------
		software_id=55

		aSOFTWARE_NAME[$software_id]='Wordpress'
		aSOFTWARE_DESC[$software_id]='website blog and publishing platform'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=395#p395'
		#------------------
		software_id=38

		aSOFTWARE_NAME[$software_id]='FreshRSS'
		aSOFTWARE_DESC[$software_id]='self-hosted RSS feed aggregator'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=13918#p13918'
		#------------------
		software_id=56

		aSOFTWARE_NAME[$software_id]='Image Gallery'
		aSOFTWARE_DESC[$software_id]='website to host / browse your images'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=480#p480'
		#------------------
		software_id=57

		aSOFTWARE_NAME[$software_id]='BaiKal'
		aSOFTWARE_DESC[$software_id]='lightweight caldav + carddav server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1502#p1502'
		#------------------
		software_id=58

		aSOFTWARE_NAME[$software_id]='OpenBazaar'
		aSOFTWARE_DESC[$software_id]='decentralised peer to peer bitcoin market'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_USERINPUT[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1796#p1796'
		#------------------
		software_id=133

		aSOFTWARE_NAME[$software_id]='YaCy'
		aSOFTWARE_DESC[$software_id]='decentralised open source search engine'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6202#p6202'
		#------------------
		software_id=2

		aSOFTWARE_NAME[$software_id]='Folding@Home'
		aSOFTWARE_DESC[$software_id]='distributed disease research project'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=20
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=13704#p13704'
		# x86_64 only
		for ((i=1; i<$MAX_G_HW_ARCH; i++))
		do

			aSOFTWARE_AVAIL_G_HW_ARCH[$software_id,$i]=0

		done

		# Camera
		#--------------------------------------------------------------------------------
		software_id=59

		aSOFTWARE_NAME[$software_id]='RPi Cam Control'
		aSOFTWARE_DESC[$software_id]='web interface & controls for your rpi camera'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=7
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=48#p48'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=136

		aSOFTWARE_NAME[$software_id]='MotionEye'
		aSOFTWARE_DESC[$software_id]='web interface & surveillance for your camera'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=7
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6610#p6610'
 		aSOFTWARE_REQUIRES_FFMPEG[$software_id]=1
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1

		# WiFi Hotspot
		#--------------------------------------------------------------------------------
		software_id=60

		aSOFTWARE_NAME[$software_id]='WiFi Hotspot'
		aSOFTWARE_DESC[$software_id]='turn your device into a wifi hotspot'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=8
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1207#p1207'
		#------------------
		software_id=61

		aSOFTWARE_NAME[$software_id]='Tor Hotspot'
		aSOFTWARE_DESC[$software_id]='optional: route hotspot traffic through tor'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=8
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1529#p1529'

		# System stats
		#--------------------------------------------------------------------------------
		software_id=62

		aSOFTWARE_NAME[$software_id]='DietPi-Cloudshell'
		aSOFTWARE_DESC[$software_id]='system stats displayed on lcd/panel'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=9
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=204#p204'
		#------------------
		software_id=63

		aSOFTWARE_NAME[$software_id]='LinuxDash'
		aSOFTWARE_DESC[$software_id]='web interface system stats'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=9
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=108#p108'
		#------------------
		software_id=64

		aSOFTWARE_NAME[$software_id]='PhpSysInfo'
		aSOFTWARE_DESC[$software_id]='web interface system stats'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=9
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=451#p451'
		#------------------
		software_id=65

		aSOFTWARE_NAME[$software_id]='Netdata'
		aSOFTWARE_DESC[$software_id]='real-time performance monitoring'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=9
		aSOFTWARE_TYPE[$software_id]=0
		# Node.js only required for our custom v1.11 package for Stretch ARMv6 RPi
		(( $G_HW_ARCH == 1 && $G_DISTRO < 5 )) && aSOFTWARE_REQUIRES_NODEJS[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1611#p1611'
		#------------------
		software_id=66

		aSOFTWARE_NAME[$software_id]='RPi-Monitor'
		aSOFTWARE_DESC[$software_id]='web interface system stats'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=9
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1503#p1503'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=115

		aSOFTWARE_NAME[$software_id]='Webmin'
		aSOFTWARE_DESC[$software_id]='web interface system management'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=9
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=3047#p3047'
		#------------------
		software_id=162

		aSOFTWARE_NAME[$software_id]='Docker'
		aSOFTWARE_DESC[$software_id]='Build, ship, and run distributed applications'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=9
		aSOFTWARE_TYPE[$software_id]=0
		# - Bullseye
		aSOFTWARE_AVAIL_G_DISTRO[$software_id,6]=0
		# Remote Access
		#--------------------------------------------------------------------------------
		software_id=67

		aSOFTWARE_NAME[$software_id]='NoIp'
		aSOFTWARE_DESC[$software_id]='url website address for your device'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=10
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=58#p58'
		#------------------
		software_id=68

		aSOFTWARE_NAME[$software_id]='Remot3.it'
		aSOFTWARE_DESC[$software_id]='(Weaved) access your device over the internet'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=10
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=188#p188'
		#------------------
		software_id=138

		aSOFTWARE_NAME[$software_id]='VirtualHere'
		aSOFTWARE_DESC[$software_id]='server: share USB devices over the network'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=10
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6709#p6709'

		# Hardware projects
		#--------------------------------------------------------------------------------
		software_id=69

		aSOFTWARE_NAME[$software_id]='RPi.GPIO'
		aSOFTWARE_DESC[$software_id]='gpio interface library for rpi (python)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1065#p1065'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=70

		aSOFTWARE_NAME[$software_id]='WiringPi'
		aSOFTWARE_DESC[$software_id]='gpio interface library (c)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1066#p1066'
		# RPi + Odroids only
		for ((i=20; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		# + BPi Pro
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,51]=1
		#------------------
		software_id=71

		aSOFTWARE_NAME[$software_id]='WebIOPi'
		aSOFTWARE_DESC[$software_id]='web interface to control rpi.gpio'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=189#p189'
		# RPi1/2/Zero only
		for ((i=3; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=72

		aSOFTWARE_NAME[$software_id]='I2C'
		aSOFTWARE_DESC[$software_id]='enables support for i2c based hardware'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=100

		aSOFTWARE_NAME[$software_id]='PiJuice'
		aSOFTWARE_DESC[$software_id]='pisupply ups'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=10740#p10740'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=122

		aSOFTWARE_NAME[$software_id]='Node-Red'
		aSOFTWARE_DESC[$software_id]='tool for wiring devices, APIs and online services'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=4292#p4292'
		aSOFTWARE_REQUIRES_NODEJS[$software_id]=1
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		#------------------
		software_id=123

		aSOFTWARE_NAME[$software_id]='Mosquitto '
		aSOFTWARE_DESC[$software_id]='MQTT messaging broker'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=4293#p4293'
		#------------------
		software_id=131

		aSOFTWARE_NAME[$software_id]='Blynk Server'
		aSOFTWARE_DESC[$software_id]='msg controller for blynk mobile app and sbcs'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=5901#p5901'
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		aSOFTWARE_REQUIRES_NODEJS[$software_id]=1
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		#------------------
		software_id=166

		aSOFTWARE_NAME[$software_id]='PI-SPC'
		aSOFTWARE_DESC[$software_id]='audiophonics pi-spc power control module'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=9359#p9359'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=169

		aSOFTWARE_NAME[$software_id]='Google AIY'
		aSOFTWARE_DESC[$software_id]='voice kit'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
 		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=9486#p9486'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=176

		aSOFTWARE_NAME[$software_id]='Mycroft AI'
		aSOFTWARE_DESC[$software_id]='Open Source Voice Assistant'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=18562#p18562'
		aSOFTWARE_REQUIRES_ALSA[$software_id]=1
 		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_USERINPUT[$software_id]=1
		#------------------
		software_id=74

		aSOFTWARE_NAME[$software_id]='InfluxDB'
		aSOFTWARE_DESC[$software_id]='time-series database'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=12523#p12523'
		#------------------
		software_id=77

		aSOFTWARE_NAME[$software_id]='Grafana'
		aSOFTWARE_DESC[$software_id]='platform for analytics and monitoring'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=11
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=12524#p12524'

		# System security
		#--------------------------------------------------------------------------------
		software_id=73

		aSOFTWARE_NAME[$software_id]='Fail2Ban'
		aSOFTWARE_DESC[$software_id]='prevents brute-force attacks with ip ban'
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_CATEGORY_INDEX[$software_id]=12
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=452#p452'

		# Webserver stacks
		#--------------------------------------------------------------------------------
		software_id=75

		aSOFTWARE_NAME[$software_id]='LASP'
		aSOFTWARE_DESC[$software_id]='apache2  | sqlite  | php'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=52#p52'
		#------------------
		software_id=76

		aSOFTWARE_NAME[$software_id]='LAMP'
		aSOFTWARE_DESC[$software_id]='apache2  | mariadb | php'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=52#p52'
		#------------------
		software_id=78

		aSOFTWARE_NAME[$software_id]='LESP'
		aSOFTWARE_DESC[$software_id]='nginx    | sqlite  | php'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=53#p53'
		#------------------
		software_id=79

		aSOFTWARE_NAME[$software_id]='LEMP'
		aSOFTWARE_DESC[$software_id]='nginx    | mariadb | php'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=53#p53'
		#------------------
		software_id=81

		aSOFTWARE_NAME[$software_id]='LLSP'
		aSOFTWARE_DESC[$software_id]='lighttpd | sqlite  | php'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1335#p1335'
		#------------------
		software_id=82

		aSOFTWARE_NAME[$software_id]='LLMP'
		aSOFTWARE_DESC[$software_id]='lighttpd | mariadb | php'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1335#p1335'
		#------------------
		software_id=83

		aSOFTWARE_NAME[$software_id]='Apache2'
		aSOFTWARE_DESC[$software_id]='webserver'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=52#p52'
		#------------------
		software_id=84

		aSOFTWARE_NAME[$software_id]='Lighttpd'
		aSOFTWARE_DESC[$software_id]='webserver'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1335#p1335'
		#------------------
		software_id=85

		aSOFTWARE_NAME[$software_id]='Nginx'
		aSOFTWARE_DESC[$software_id]='webserver'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=53#p53'
		#------------------
		software_id=87

		aSOFTWARE_NAME[$software_id]='SQLite'
		aSOFTWARE_DESC[$software_id]='database'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1335#p1335'
		#------------------
		software_id=88

		aSOFTWARE_NAME[$software_id]='MariaDB'
		aSOFTWARE_DESC[$software_id]='database'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1335#p1335'
		#------------------
		software_id=89

		aSOFTWARE_NAME[$software_id]='PHP'
		aSOFTWARE_DESC[$software_id]='Hypertext Preprocessor for dynamic web content'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1335#p1335'
		#------------------
		software_id=90

		aSOFTWARE_NAME[$software_id]='phpMyAdmin'
		aSOFTWARE_DESC[$software_id]='optional mysql admin tools'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_MYSQL[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=54#p54'
		# - non-RPi Buster: https://packages.debian.org/phpmyadmin
		(( $G_HW_MODEL > 9 )) && aSOFTWARE_AVAIL_G_DISTRO[$software_id,5]=0 && aSOFTWARE_AVAIL_G_DISTRO[$software_id,6]=0
		# Since the APT package depends on PHP meta packages, PHP7.2 cannot be installed
		# Since ownCloud + phpBB require PHP7.2 currently, phpMyAdmin is not compatible with those
		[[ -f '/var/www/owncloud/occ' || -f '/var/www/phpBB3/config.php' ]] && aSOFTWARE_AVAIL_G_DISTRO[$software_id,$G_DISTRO]=0
		#------------------
		software_id=91

		aSOFTWARE_NAME[$software_id]='Redis'
		aSOFTWARE_DESC[$software_id]='optional non-sql database store'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		#------------------
		software_id=92

		aSOFTWARE_NAME[$software_id]='CertBot'
		aSOFTWARE_DESC[$software_id]='free, ssl cert install allowing https://'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1061#p1062'
		#------------------
		software_id=125

		aSOFTWARE_NAME[$software_id]='Tomcat8'
		aSOFTWARE_DESC[$software_id]='apache tomcat server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=13
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=4316#p4316'
		aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$software_id]=1
		# - non-RPi Buster: https://packages.debian.org/tomcat8
		(( $G_HW_MODEL > 9 )) && aSOFTWARE_AVAIL_G_DISTRO[$software_id,5]=0 && aSOFTWARE_AVAIL_G_DISTRO[$software_id,6]=0

		# Pi-hole
		#--------------------------------------------------------------------------------
		software_id=93

		aSOFTWARE_NAME[$software_id]='Pi-hole'
		aSOFTWARE_DESC[$software_id]='block adverts for any device on your network'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=14
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_WEBSERVER[$software_id]=1
		aSOFTWARE_REQUIRES_PHP[$software_id]=1
		aSOFTWARE_REQUIRES_SQLITE[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=174#p174'
		aSOFTWARE_REQUIRES_USERINPUT[$software_id]=1

		# File servers
		#--------------------------------------------------------------------------------
		software_id=94

		aSOFTWARE_NAME[$software_id]='ProFTP'
		aSOFTWARE_DESC[$software_id]='lightweight ftp server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=15
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=55#p55'
		#------------------
		software_id=95

		aSOFTWARE_NAME[$software_id]='vsFTPD'
		aSOFTWARE_DESC[$software_id]='alternative ftp server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=15
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2820#p2820'
		#------------------
		software_id=96

		aSOFTWARE_NAME[$software_id]='Samba'
		aSOFTWARE_DESC[$software_id]='feature-rich file server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=15
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=56#p56'
		#------------------
		software_id=109

		aSOFTWARE_NAME[$software_id]='NFS'
		aSOFTWARE_DESC[$software_id]='network file system server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=15
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=2821#p2821'
		#------------------

		# VPN
		#--------------------------------------------------------------------------------
		software_id=97

		aSOFTWARE_NAME[$software_id]='OpenVPN'
		aSOFTWARE_DESC[$software_id]='vpn server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=16
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=613#p613'
		#------------------
		software_id=117

		aSOFTWARE_NAME[$software_id]='PiVPN'
		aSOFTWARE_DESC[$software_id]='openvpn server install & management tool'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=16
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_RSYSLOG[$software_id]=1
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=3469#p3469'
		aSOFTWARE_REQUIRES_USERINPUT[$software_id]=1
		#------------------
		software_id=171

		aSOFTWARE_NAME[$software_id]='DietPi-NordVPN'
		aSOFTWARE_DESC[$software_id]='vpn client with connection gui'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=16
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p15975#p15975'
		#------------------
		software_id=172

		aSOFTWARE_NAME[$software_id]='WireGuard'
		aSOFTWARE_DESC[$software_id]='an extremely simple yet fast and modern VPN'
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_CATEGORY_INDEX[$software_id]=16
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=16308#p16308'
		# Required to ask for public domain/IP and desired VPN server port
		aSOFTWARE_REQUIRES_USERINPUT[$software_id]=1
		# Disable all
		for ((i=0; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		# + RPi/Odroids/x86_64
		(( $G_HW_MODEL < 13 || $G_HW_MODEL == 14 || $G_HW_ARCH == 10 )) && aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$G_HW_MODEL]=1

		# Advanced Networking
		#--------------------------------------------------------------------------------
		software_id=98

		aSOFTWARE_NAME[$software_id]='HAProxy'
		aSOFTWARE_DESC[$software_id]='high performance tcp/http load balancer'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=17
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=221#p221'

		# Home automation
		#--------------------------------------------------------------------------------
		software_id=99

		aSOFTWARE_NAME[$software_id]='EmonPi'
		aSOFTWARE_DESC[$software_id]='energy usage addon board with web interface'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=18
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=1525#p1525'
		# RPi only
		for ((i=10; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		#------------------
		software_id=157

		aSOFTWARE_NAME[$software_id]='Home Assistant'
		aSOFTWARE_DESC[$software_id]='open-source home automation platform'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=18
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_REQUIRES_GIT[$software_id]=1
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
		aSOFTWARE_REQUIRES_SQLITE[$software_id]=1
		aSOFTWARE_REQUIRES_FFMPEG[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=70#p70'

		# Printing
		#--------------------------------------------------------------------------------
		software_id=137

		aSOFTWARE_NAME[$software_id]='CloudPrint'
		aSOFTWARE_DESC[$software_id]='print server for google cloud print'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=19
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=6630#p6630'
 		aSOFTWARE_REQUIRES_RSYSLOG[$software_id]=1 # Not required, but comes in as package dep
		#------------------
		software_id=153

		aSOFTWARE_NAME[$software_id]='OctoPrint'
		aSOFTWARE_DESC[$software_id]='web interface for controlling 3d printers'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=19
		aSOFTWARE_TYPE[$software_id]=0
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=7958#p7958'
		aSOFTWARE_REQUIRES_BUILDESSENTIAL[$software_id]=1
   		aSOFTWARE_REQUIRES_GIT[$software_id]=1 # Required for updates

		#--------------------------------------------------------------------------------
		# Additional linux software items
		#--------------------------------------------------------------------------------

		# SSH clients
		#--------------------------------------------------------------------------------
		software_id=0

		aSOFTWARE_NAME[$software_id]='OpenSSH Client'
		aSOFTWARE_DESC[$software_id]=''
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=1

		# File server clients
		#--------------------------------------------------------------------------------
		software_id=1

		aSOFTWARE_NAME[$software_id]='Samba Client'
		aSOFTWARE_DESC[$software_id]='access network shares'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=1
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]=' dietpi-config > Network Options: NAS/Misc'
		#------------------
		software_id=110

		aSOFTWARE_NAME[$software_id]='NFS Client'
		aSOFTWARE_DESC[$software_id]='network file system client'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=1
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_ONLINEDOC_URL[$software_id]=' dietpi-config > Network Options: NAS/Misc'

		# File managers
		#--------------------------------------------------------------------------------
		software_id=3

		aSOFTWARE_NAME[$software_id]='MC'
		aSOFTWARE_DESC[$software_id]='midnight commander, powerful file manager'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=4

		aSOFTWARE_NAME[$software_id]='ViFM'
		aSOFTWARE_DESC[$software_id]='file manager with vi bindings'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=2
		aSOFTWARE_TYPE[$software_id]=1
		#------------------

		# System
		#--------------------------------------------------------------------------------
		software_id=5

		aSOFTWARE_NAME[$software_id]='ALSA'
		aSOFTWARE_DESC[$software_id]='linux sound system'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		#------------------
		software_id=6

		aSOFTWARE_NAME[$software_id]='Xserver'
		aSOFTWARE_DESC[$software_id]='linux display system'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		#------------------
		software_id=151

		aSOFTWARE_NAME[$software_id]='Nvidia'
		aSOFTWARE_DESC[$software_id]='display driver'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=3
		aSOFTWARE_REQUIRES_XSERVERXORG[$software_id]=1
		# Native PC only
		for ((i=0; i<=$MAX_G_HW_MODEL; i++))
		do

			aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,$i]=0

		done
		aSOFTWARE_AVAIL_G_HW_MODEL[$software_id,21]=1

		# Shared Libs
		#--------------------------------------------------------------------------------
		software_id=7

		aSOFTWARE_NAME[$software_id]='FFmpeg'
		aSOFTWARE_DESC[$software_id]='audio & visual libary'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		#------------------
		software_id=8

		aSOFTWARE_NAME[$software_id]='Java'
		aSOFTWARE_DESC[$software_id]='OpenJDK + JRE libary'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		#------------------
		software_id=9

		aSOFTWARE_NAME[$software_id]='Node.js'
		aSOFTWARE_DESC[$software_id]='javascript runtime'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		#------------------
		software_id=130

		aSOFTWARE_NAME[$software_id]='Python Pip'
		aSOFTWARE_DESC[$software_id]='python pip package installer'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=150

		aSOFTWARE_NAME[$software_id]='Mono'
		aSOFTWARE_DESC[$software_id]='runtime libraries and repo'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		#------------------
		software_id=126

		aSOFTWARE_NAME[$software_id]='LibSSL1.0.0'
		aSOFTWARE_DESC[$software_id]='backwards compatibility (stretch+)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=4
		aSOFTWARE_TYPE[$software_id]=1

		# Networking
		#--------------------------------------------------------------------------------
		software_id=10

		aSOFTWARE_NAME[$software_id]='iftop'
		aSOFTWARE_DESC[$software_id]='displays bandwidth usage information'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=11

		aSOFTWARE_NAME[$software_id]='IPTraf'
		aSOFTWARE_DESC[$software_id]='interactive colorful ip lan monitor'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=12

		aSOFTWARE_NAME[$software_id]='Iperf'
		aSOFTWARE_DESC[$software_id]='internet protocol bandwidth measuring tool'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=13

		aSOFTWARE_NAME[$software_id]='MTR-Tiny'
		aSOFTWARE_DESC[$software_id]='full screen ncurses traceroute tool'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=14

		aSOFTWARE_NAME[$software_id]='nLoad'
		aSOFTWARE_DESC[$software_id]='realtime console network usage monitor'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=15

		aSOFTWARE_NAME[$software_id]='tcpdump'
		aSOFTWARE_DESC[$software_id]='command-line network traffic analyzer'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=152

		aSOFTWARE_NAME[$software_id]='Avahi-Daemon'
		aSOFTWARE_DESC[$software_id]='hostname broadcast (mac, pc bonjour)'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=5
		aSOFTWARE_TYPE[$software_id]=1

		# Development / Programming
		#--------------------------------------------------------------------------------
		software_id=16

		aSOFTWARE_NAME[$software_id]='Build-Essentials'
		aSOFTWARE_DESC[$software_id]='common packages for compile'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		#------------------
		software_id=17

		aSOFTWARE_NAME[$software_id]='Git Client'
		aSOFTWARE_DESC[$software_id]='git clone etc'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=170

		aSOFTWARE_NAME[$software_id]='UnRAR'
		aSOFTWARE_DESC[$software_id]='unarchiver for .rar files'
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_CATEGORY_INDEX[$software_id]=6

		# Text Editors
		#--------------------------------------------------------------------------------
		software_id=18

		aSOFTWARE_NAME[$software_id]='Emacs'
		aSOFTWARE_DESC[$software_id]='gnu emacs editor'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=7
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=19

		aSOFTWARE_NAME[$software_id]='Jed'
		aSOFTWARE_DESC[$software_id]='editor for programmers'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=7
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=20

		aSOFTWARE_NAME[$software_id]='Vim'
		aSOFTWARE_DESC[$software_id]='vi enhanced text editor'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=7
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=21

		aSOFTWARE_NAME[$software_id]='Vim-Tiny'
		aSOFTWARE_DESC[$software_id]='compact release of vim'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=7
		aSOFTWARE_TYPE[$software_id]=1
		#------------------
		software_id=127

		aSOFTWARE_NAME[$software_id]='NeoVim'
		aSOFTWARE_DESC[$software_id]='heavily refactored vim fork'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=7
		aSOFTWARE_TYPE[$software_id]=1

		# Desktop Utilities
		#--------------------------------------------------------------------------------
		software_id=22

		aSOFTWARE_NAME[$software_id]='QuiteRSS'
		aSOFTWARE_DESC[$software_id]='cross-platform, free rss reader'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=8
		aSOFTWARE_TYPE[$software_id]=1
		aSOFTWARE_REQUIRES_DESKTOP[$software_id]=1

		#--------------------------------------------------------------------------------
		# Logging (hidden)
		#--------------------------------------------------------------------------------
		software_id=101

		aSOFTWARE_NAME[$software_id]='Log Rotate'
		aSOFTWARE_DESC[$software_id]='rotates log files'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=68#p68'
		#------------------
		software_id=102

		aSOFTWARE_NAME[$software_id]='Rsyslog'
		aSOFTWARE_DESC[$software_id]='system logging'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=68#p68'
		#------------------
		software_id=103

		aSOFTWARE_NAME[$software_id]='DietPi-RAMlog'
		aSOFTWARE_DESC[$software_id]='minimal, optimised logging'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=68#p68'

		#--------------------------------------------------------------------------------
		# SSH servers (hidden from install menu)
		#--------------------------------------------------------------------------------
		software_id=104

		aSOFTWARE_NAME[$software_id]='Dropbear'
		aSOFTWARE_DESC[$software_id]='lightweight ssh server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=62#p62'
		#------------------
		software_id=105

		aSOFTWARE_NAME[$software_id]='OpenSSH Server'
		aSOFTWARE_DESC[$software_id]='feature rich ssh server'
		aSOFTWARE_CATEGORY_INDEX[$software_id]=0
		aSOFTWARE_TYPE[$software_id]=-1
		aSOFTWARE_ONLINEDOC_URL[$software_id]='p=63#p63'

		#--------------------------------------------------------------------------------
		# Init install state for defined software
		for i in ${!aSOFTWARE_NAME[@]}
		do

			aSOFTWARE_INSTALL_STATE[$i]=0

		done
		# - By default installed on DietPi images:
		aSOFTWARE_INSTALL_STATE[103]=2 # DietPi-RAMlog
		aSOFTWARE_INSTALL_STATE[104]=2 # Dropbear
		#--------------------------------------------------------------------------------

		G_DIETPI-NOTIFY 0 'Initialised database'

	}

	# Disable software installation, if user input is required for automated installs
	Install_Disable_Requires_UserInput(){

		if (( ! $G_INTERACTIVE )); then

			for i in ${!aSOFTWARE_NAME[@]}
			do

				if (( ${aSOFTWARE_INSTALL_STATE[$i]} == 1 && ${aSOFTWARE_REQUIRES_USERINPUT[$i]:-0} == 1 )); then

					# - Disable
					aSOFTWARE_INSTALL_STATE[$i]=0
					G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$i]}: Install requires user input and cannot be automated."
					G_DIETPI-NOTIFY 1 "${aSOFTWARE_NAME[$i]}: Please run 'dietpi-software' to install manually."

				fi

			done

		fi

	}

	# Work out which additional software we need to install
	#	- We do reinstall =2 marked software as well, just to be sure.
	Install_Flag_Prereq_Software(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Checking for prerequisite software'

		local software_id=-1

		#-------------------------------------------------------------------------
		# Pre-req software, for items that do NOT have their own array aSOFTWARE_REQUIRES_SOFTWARENAME

		# Prevent Docker install if kernel has just been upgraded and old one overwritten/purged: https://github.com/MichaIng/DietPi/issues/3126
		if [[ ${aSOFTWARE_INSTALL_STATE[162]} == 1 && ! -d /lib/modules/$(uname -r) ]]; then

			G_WHIP_MSG '[WARNING] Docker install will be deselected\n
It seems that your kernel version has just been upgraded. The mismatch between loaded and installed kernel versions would cause a failure during Docker install.\n
Please reselect Docker from dietpi-software after next reboot.'
			aSOFTWARE_INSTALL_STATE[162]=0

		fi

		# Nextcloud extensions
		# - Nextcloud Talk
		software_id=114
		if (( ${aSOFTWARE_INSTALL_STATE[168]} == 1 &&
			${aSOFTWARE_INSTALL_STATE[$software_id]} < 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Tor Hotspot requires WiFi Hotspot
		software_id=60
		if (( ${aSOFTWARE_INSTALL_STATE[61]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Additional software that requires TigerVNC
		# - XRDP: https://github.com/MichaIng/DietPi/issues/1727
		software_id=28
		if (( ${aSOFTWARE_INSTALL_STATE[29]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Additional software that requires WiringPi
		# - AudioPhonics Pi-SPC
		software_id=70
		if (( ${aSOFTWARE_INSTALL_STATE[166]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Additional software required by Allo Web Interface
		if (( ${aSOFTWARE_INSTALL_STATE[159]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[36]=1 # Squeezelite
			aSOFTWARE_INSTALL_STATE[37]=1 # Shairport Sync
			#(( $G_HW_MODEL == 70 )) && aSOFTWARE_INSTALL_STATE[60]=1 # WiFi Hotspot
			aSOFTWARE_INSTALL_STATE[65]=1 # Netdata
			aSOFTWARE_INSTALL_STATE[96]=1 # Samba
			aSOFTWARE_INSTALL_STATE[121]=1 # Roon Bridge
			aSOFTWARE_INSTALL_STATE[124]=1 # NAA Daemon
			#aSOFTWARE_INSTALL_STATE[128]=1 # MPD (pulled in by O!MPD)
			aSOFTWARE_INSTALL_STATE[129]=1 # O!MPD
			#aSOFTWARE_INSTALL_STATE[152]=1 # Avahi (pulled in by O!MPD)
			aSOFTWARE_INSTALL_STATE[163]=1 # Gmrender

		fi

		# Additional software required by Google AIY
		if (( ${aSOFTWARE_INSTALL_STATE[169]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[69]=1 # RPi.GPIO
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[69]} will be installed"
			#aSOFTWARE_INSTALL_STATE[130]=1 # python-pip, enabled in #Software that requires Python-Pip

		fi

		# Software that requires Avahi-Daemon
		software_id=152
		if (( ${aSOFTWARE_INSTALL_STATE[31]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[37]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[128]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[138]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[163]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Software that requires LibSSL1.0.0
		# - WiFi Hotspot (60, our custom compiled RTL8188C* binaries only)
		#	Check for RTL8188C* device, which requires a different driver: https://github.com/pritambaral/hostapd-rtl871xdrv#why
		if (( ${aSOFTWARE_INSTALL_STATE[60]} == 1 )) && lsusb | grep -qi 'RTL8188C'; then

			WIFIHOTSPOT_RTL8188C_DEVICE=1
			# Some repos (e.g. ARMbian) provide special packages
			apt-cache show hostapd-realtek &> /dev/null && WIFIHOTSPOT_RTL8188C_PACKAGE=1

		fi
		# - Jackett (147)
		software_id=126
		if (( ${aSOFTWARE_INSTALL_STATE[37]} == 1 ||
			( ${aSOFTWARE_INSTALL_STATE[60]} == 1 && $WIFIHOTSPOT_RTL8188C_DEVICE && ! $WIFIHOTSPOT_RTL8188C_PACKAGE && $G_HW_ARCH < 4 ) ||
			${aSOFTWARE_INSTALL_STATE[134]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[147]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Software that requires Mono
		# - Jackett (147) on ARMv6: https://github.com/Jackett/Jackett#installation-on-linux-armv6-or-below
		software_id=150
		if (( ${aSOFTWARE_INSTALL_STATE[106]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[144]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[145]} == 1 ||
			( ${aSOFTWARE_INSTALL_STATE[147]} == 1 && $G_HW_ARCH == 1 ) )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Software that requires Python-Pip: https://github.com/MichaIng/DietPi/issues/784
		# - OctoPrint (153)
		# - HTPC Manager (155)
		software_id=130
		if (( ${aSOFTWARE_INSTALL_STATE[99]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[118]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[136]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[139]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[142]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[153]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[155]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[169]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Software that requires MPD
		# - YMPD
		# - Cava
		# - OMPD
		# - myMPD
		software_id=128
		if (( ${aSOFTWARE_INSTALL_STATE[32]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[119]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[129]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[148]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Software that requires Redis
		# - ownCloud
		# - Nextcloud
		software_id=91
		if (( ${aSOFTWARE_INSTALL_STATE[47]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[114]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		# Software that requires UnRAR
		# - rTorrent
		# - Medusa
		# - SABnzbd
		software_id=170
		if (( ${aSOFTWARE_INSTALL_STATE[107]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[116]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[139]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[$software_id]=1
			G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

		fi

		#-------------------------------------------------------------------------
		# WEBSERVER - Manual stack install
		# - Define extra DietPi install flags for WEBSERVER_STACKS
		# LLMP
		if (( ${aSOFTWARE_INSTALL_STATE[82]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[84]=1
			aSOFTWARE_INSTALL_STATE[88]=1
			aSOFTWARE_INSTALL_STATE[89]=1

		fi

		# LLSP
		if (( ${aSOFTWARE_INSTALL_STATE[81]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[84]=1
			aSOFTWARE_INSTALL_STATE[87]=1
			aSOFTWARE_INSTALL_STATE[89]=1

		fi

		# LEMP
		if (( ${aSOFTWARE_INSTALL_STATE[79]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[85]=1
			aSOFTWARE_INSTALL_STATE[88]=1
			aSOFTWARE_INSTALL_STATE[89]=1

		fi

		# LESP
		if (( ${aSOFTWARE_INSTALL_STATE[78]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[85]=1
			aSOFTWARE_INSTALL_STATE[87]=1
			aSOFTWARE_INSTALL_STATE[89]=1

		fi

		# LAMP
		if (( ${aSOFTWARE_INSTALL_STATE[76]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[83]=1
			aSOFTWARE_INSTALL_STATE[88]=1
			aSOFTWARE_INSTALL_STATE[89]=1

		fi

		# LASP
		if (( ${aSOFTWARE_INSTALL_STATE[75]} == 1 )); then

			aSOFTWARE_INSTALL_STATE[83]=1
			aSOFTWARE_INSTALL_STATE[87]=1
			aSOFTWARE_INSTALL_STATE[89]=1

		fi

		#-------------------------------------------------------------------------
		# Pre-req software, for items that DO have their own array aSOFTWARE_REQUIRES_SOFTWARENAME

		for i in ${!aSOFTWARE_NAME[@]}
		do

			(( ${aSOFTWARE_INSTALL_STATE[$i]} != 1 )) && continue

			# WEBSERVER - Auto install via choice system
			# - Check for existing webserver base (Apache2, Nginx, Lighttpd) installation
			if (( ${aSOFTWARE_REQUIRES_WEBSERVER[$i]:=0} &&
				${aSOFTWARE_INSTALL_STATE[83]} < 1 &&
				${aSOFTWARE_INSTALL_STATE[84]} < 1 &&
				${aSOFTWARE_INSTALL_STATE[85]} < 1 )); then

				# - None found, select one for install, based on user preference
				if (( $INDEX_WEBSERVER_TARGET == 0 )); then

					# WEBSERVER_APACHE
					aSOFTWARE_INSTALL_STATE[83]=1
					G_DIETPI-NOTIFY 2 'Apache2 will be installed'

				elif (( $INDEX_WEBSERVER_TARGET == -1 )); then

					# WEBSERVER_NGINX
					aSOFTWARE_INSTALL_STATE[85]=1
					G_DIETPI-NOTIFY 2 'Nginx will be installed'

				else

					# WEBSERVER_LIGHTTPD
					aSOFTWARE_INSTALL_STATE[84]=1
					G_DIETPI-NOTIFY 2 'Lighttpd will be installed'

				fi

				# Pretent software requiring PHP, to mark it below, in case webserver ID already passed:
				aSOFTWARE_REQUIRES_PHP[$i]=1

			fi

			software_id=89 # PHP
			if (( ${aSOFTWARE_REQUIRES_PHP[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# WEBSERVER_MARIADB
			software_id=88
			if (( ${aSOFTWARE_REQUIRES_MYSQL[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# WEBSERVER_SQLITE
			software_id=87
			if (( ${aSOFTWARE_REQUIRES_SQLITE[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# DESKTOP
			if (( ${aSOFTWARE_REQUIRES_DESKTOP[$i]:=0} &&
				${aSOFTWARE_INSTALL_STATE[23]} < 1 &&
				${aSOFTWARE_INSTALL_STATE[24]} < 1 &&
				${aSOFTWARE_INSTALL_STATE[25]} < 1 &&
				${aSOFTWARE_INSTALL_STATE[26]} < 1 &&
				${aSOFTWARE_INSTALL_STATE[173]} < 1 )); then

				# If no desktop is selected or installed, default to LXDE
				aSOFTWARE_INSTALL_STATE[23]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[23]} will be installed"

				# Pretent software requiring Xserver, to mark it below, in case desktop ID already passed
				aSOFTWARE_REQUIRES_XSERVERXORG[$i]=1

			fi

			# GIT
			software_id=17
			if (( ${aSOFTWARE_REQUIRES_GIT[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"
			fi

			# BUILDESSENTIAL
			software_id=16
			if (( ${aSOFTWARE_REQUIRES_BUILDESSENTIAL[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# RSYSLOG
			software_id=102
			if (( ${aSOFTWARE_REQUIRES_RSYSLOG[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi
			# FFMPEG
			software_id=7
			if (( ${aSOFTWARE_REQUIRES_FFMPEG[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# JAVA
			software_id=8
			if (( ${aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# NODEJS
			software_id=9
			if (( ${aSOFTWARE_REQUIRES_NODEJS[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# ALSA
			software_id=5
			if (( ${aSOFTWARE_REQUIRES_ALSA[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

			# XSERVERXORG
			software_id=6
			if (( ${aSOFTWARE_REQUIRES_XSERVERXORG[$i]:=0} && aSOFTWARE_INSTALL_STATE[$software_id] != 1 )); then

				aSOFTWARE_INSTALL_STATE[$software_id]=1
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} will be installed"

			fi

		done

		# WEBSERVER - Check for stacks and flag as installing
		# WEBSERVER_APACHE
		if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

			# SQLite: LASP
			(( ${aSOFTWARE_INSTALL_STATE[87]} > 0 )) && aSOFTWARE_INSTALL_STATE[75]=1

			# MariaDB: LAMP
			(( ${aSOFTWARE_INSTALL_STATE[88]} > 0 )) && aSOFTWARE_INSTALL_STATE[76]=1

		# WEBSERVER_NGINX
		elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

			# SQLite: LESP
			(( ${aSOFTWARE_INSTALL_STATE[87]} > 0 )) && aSOFTWARE_INSTALL_STATE[78]=1

			# MariaDB: LEMP
			(( ${aSOFTWARE_INSTALL_STATE[88]} > 0 )) && aSOFTWARE_INSTALL_STATE[79]=1

		# WEBSERVER_LIGHTTPD
		elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

			# SQLite: LLSP
			(( ${aSOFTWARE_INSTALL_STATE[87]} > 0 )) && aSOFTWARE_INSTALL_STATE[81]=1

			# MariaDB: LLMP
			(( ${aSOFTWARE_INSTALL_STATE[88]} > 0 )) && aSOFTWARE_INSTALL_STATE[82]=1

		fi

		# Update PHP variables after all software titles have been marked.
		if (( ${aSOFTWARE_INSTALL_STATE[89]} > 0 )); then

			# ownCloud (up to v10.2) does not yet support PHP7.3, so install PHP7.2 for now
			if (( ${aSOFTWARE_INSTALL_STATE[47]} > 0 )) || [[ -f '/var/www/owncloud/version.php' ]]; then

				FP_PHP_BASE_DIR='/etc/php/7.2'
				PHP_NAME='php7.2'
				# - Prevent accidental PHP7.3 installs
				echo -e '# ownCloud does not yet support PHP7.3
Package: *php7.3*\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/dietpi-owncloud

			fi

			# phpBB3 (up to v3.2) as well: https://github.com/phpbb/phpbb/blob/3.2.x/phpBB/install/app.php#L23
			if (( ${aSOFTWARE_INSTALL_STATE[54]} > 0 )) || [[ -f '/var/www/phpBB3/config.php' ]]; then

				FP_PHP_BASE_DIR='/etc/php/7.2'
				PHP_NAME='php7.2'
				# - Prevent accidental PHP7.3 installs
				echo -e '# phpBB does not yet support PHP7.3
Package: *php7.3*\nPin: release *\nPin-Priority: -1' > /etc/apt/preferences.d/dietpi-phpbb

			fi

		fi

	}

	Create_Desktop_Shared_Items(){

		# Pre-create dirs
		mkdir -p /root/Desktop /usr/share/applications
		mkdir -p /var/lib/dietpi/dietpi-software/installed/desktop/{icons,wallpapers}

		# Copy DietPi favourite links
		G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/gtk/.gtk-bookmarks -O /root/.gtk-bookmarks

		# DietPi apps to download
		local adesktop_items=(

			'dietpi-software'
			'dietpi-drive_manager'
			'dietpi-update'
			'dietpi-config'
			'dietpi-backup'
			'dietpi-sync'
			#'dietpi-bugreport'
			'dietpi-services'
			'dietpi-cleaner'
			'dietpi-cron'
			'dietpi-launcher'
			'dietpi-justboom'

			'es2_info'
			'es2_gears'
			'glx_info'
			'glx_gears'

		)

		for i in ${adesktop_items[@]}
		do

			G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/apps/$i.desktop -O /usr/share/applications/$i.desktop

		done

		# Icons
		G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/icons/dietpi-icon.png -O /var/lib/dietpi/dietpi-software/installed/desktop/icons/dietpi-icon.png
		G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/icons/grey_16x16.png -O /var/lib/dietpi/dietpi-software/installed/desktop/icons/grey_16x16.png
		G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/icons/kodi-icon.png -O /var/lib/dietpi/dietpi-software/installed/desktop/icons/kodi-icon.png
		G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/icons/justboom.png -O /var/lib/dietpi/dietpi-software/installed/desktop/icons/justboom.png

		# Wallpapers
		G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/wallpapers/dietpi-logo_inverted_1080p.png -O /var/lib/dietpi/dietpi-software/installed/desktop/wallpapers/dietpi-logo_inverted_1080p.png
		G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/wallpapers/dietpi-logo_1080p.png -O /var/lib/dietpi/dietpi-software/installed/desktop/wallpapers/dietpi-logo_1080p.png

		G_THREAD_WAIT

		# Desktop app symlinks
		ln -sf /usr/share/applications/htop.desktop /root/Desktop/htop.desktop
		ln -sf /usr/share/applications/dietpi-software.desktop /root/Desktop/dietpi-software.desktop
		ln -sf /usr/share/applications/dietpi-config.desktop /root/Desktop/dietpi-config.desktop
		ln -sf /usr/share/applications/dietpi-launcher.desktop /root/Desktop/dietpi-launcher.desktop

		# Permissions
		# - Set execute to prevent "untrusted" prompt in Mate, and possibily other desktops.
		chmod +x /usr/share/applications/*.desktop

	}

	Create_UserContent_Folders(){

		mkdir -p $G_FP_DIETPI_USERDATA/{$FOLDER_MUSIC,$FOLDER_PICTURES,$FOLDER_VIDEO,$FOLDER_DOWNLOADS}
		chown dietpi:dietpi $G_FP_DIETPI_USERDATA/{$FOLDER_MUSIC,$FOLDER_PICTURES,$FOLDER_VIDEO,$FOLDER_DOWNLOADS}
		chmod 775 $G_FP_DIETPI_USERDATA/{$FOLDER_MUSIC,$FOLDER_PICTURES,$FOLDER_VIDEO,$FOLDER_DOWNLOADS}
		mkdir -p /var/www

	}

	Download_Test_Media(){

		if [[ ! -f $G_FP_DIETPI_USERDATA/$FOLDER_MUSIC/fourdee_tech.ogg ]]; then

			wget https://dietpi.com/downloads/audio/fourdee_tech.ogg -O $G_FP_DIETPI_USERDATA/$FOLDER_MUSIC/fourdee_tech.ogg
			#wget https://dietpi.com/downloads/audio/fourdee_space.mp3 -O $G_FP_DIETPI_USERDATA/$FOLDER_MUSIC/fourdee_space.mp3

		fi

	}

	# Return optimisation values for BitTorrent servers based on device and hardware capabilities.
	Optimise_BitTorrent(){

		local output=0

		local gigabit_device=1
		# - Lets hope the next RPi device is finally gigabit capable. I'll cry if it is not.
		if (( $G_HW_MODEL < 4 || $G_HW_MODEL == 30 || $G_HW_MODEL == 32 || $G_HW_MODEL == 40 || $G_HW_MODEL == 60 || $G_HW_MODEL == 70 )); then

			gigabit_device=0

		fi

		# Cache size (MB) 1/10th of total mem
		if (( $1 == 0 )); then

			output=$(( $RAM_TOTAL / 10 ))

		# Max active downloads
		elif (( $1 == 1 )); then

			output=2

			# - Bump up for x86
			(( $G_HW_ARCH == 10 )) && output=3

		# Max global connections
		elif (( $1 == 2 )); then

			output=20

			# - Bump up for x86
			if (( $G_HW_MODEL == 20 || $G_HW_MODEL == 21 )); then

				output=40

			# - Gbit devices
			elif (( $gigabit_device )); then

				output=30

			# - Reduce for RPi. This is due to the USB bus ethernet in the ARM SoC, which cripples network throughput/performance/latency.
			# - RPi3
			elif (( $G_HW_MODEL == 3 )); then

				output=15

			# - RPi2
			elif (( $G_HW_MODEL == 2 )); then

				output=13

			# - RPi1 256/512
			elif (( $G_HW_MODEL < 2 )); then

				output=7

			fi

		# Max upload slots
		elif (( $1 == 3 )); then

			output=3

			# - Bump up for x86
			if (( $G_HW_ARCH == 10 )); then

				output=5

			# - Gbit devices
			elif (( $gigabit_device )); then

				output=4

			# - Reduce for RPi. This is due to the USB bus ethernet in the ARM SoC, which cripples network throughput/performance/latency.
			elif (( $G_HW_MODEL < 4 )); then

				output=2

			fi

		fi

		echo $output

	}

	# Usage:
	#	Download_Install 'https://file.com/file' /etc/install_here
	#	dps_index=$software_id Download_Install 'conf_0' /etc/conf.conf
	# Optional input variables:
	#	fallback_url='http...'	= URL to use if e.g. grabbing URL from api.github.com fails: https://dietpi.com/phpbb/viewtopic.php?p=17390#p17390
	#	no_check_url=[01]	= Optionally disable URL check
	#	dps_index=$software_id	= Download from DietPi GitHub repo based on software ID/index
	#	DEPS_LIST='pkg1 ...'	= Install APT dependency packages
	# NB: This does not support installs that require user input (eg: a whiptail prompt for deb installs)
	Download_Install(){

		local url=$1
		[[ ! $url && $fallback_url ]] && url=$fallback_url
		local target=$2 # Extract target
		local type=${url##*.} # Grab ext from URL | compatbile with >> deb|zip|tar(.gz|.bz2)|tgz|tbz2|7z
		[[ $type =~ ^t?(gz|bz2)$ ]] && type='tar'
		local file="$software_id.$type"

		# DietPi-Software conf/service mode
		if disable_error=1 G_CHECK_VALIDINT "$dps_index" 0; then

			type='dps_index'
			url="https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/dps_$dps_index/$url"

		fi

		(( $no_check_url )) || G_CHECK_URL "$url"

		cd /tmp/$G_PROGRAM_NAME

		# Download file
		if [[ $DEPS_LIST ]]; then

			# Download as background thread if dependencies are to be installed
			G_THREAD_START wget "$url" -O $file
			G_AGI $DEPS_LIST
			DEPS_LIST=''
			G_THREAD_WAIT

		else

			G_RUN_CMD wget "$url" -O $file

		fi

		# Process downloaded file
		if [[ $type == dps_index ]]; then

			# Pre-create dir
			local fp_dir=${target%/*}
			[[ -d $fp_dir ]] || G_RUN_CMD mkdir -p "$fp_dir"

			[[ -f $target ]] && G_DIETPI-NOTIFY 2 "Updating file: $target"
			G_RUN_CMD mv $file "$target"

		elif [[ $type == 'deb' ]]; then

			# Allow error on first attempt, giving APT fix a change to resolve e.g. dependencies
			G_INTERACTIVE=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD dpkg --force-hold,confdef,confold -i $file
			(( $G_ERROR_HANDLER_EXITCODE_RETURN )) && G_DIETPI-NOTIFY 2 'Trying automated APT fix' && G_AGF

		elif [[ $type == 'zip' ]]; then

			[[ $target ]] && target="-d $target"
			G_RUN_CMD unzip -o $file "$target"

		elif [[ $type == 'tar' ]]; then

			[[ $target ]] && target="--one-top-level=$target"
			G_RUN_CMD tar xf $file "$target"

		elif [[ $type == '7z' ]]; then

			[[ $target ]] && target="-o$target"
			G_RUN_CMD 7zr x -y $file "$target"

		else

			G_DIETPI-NOTIFY 1 'Download_Install: Invalid file type, needs to be one of: deb|zip|tar(.gz|.bz2)|7z'

		fi

		[[ -f $file ]] && G_RUN_CMD rm $file
		unset fallback_url dps_index no_check_url

	}

	# Run marked software installs
	Install_Dietpi_Software(){

		#--------------------------------------------------------------
		# Install Software

		local software_id=-1

		software_id=23 # Desktop LXDE
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# - For desktop entries/icons hosted on dietpi.com
			INSTALL_URL_ADDRESS='https://dietpi.com/downloads/conf/desktop'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			G_AGI lxde upower policykit-1 firefox-esr
			#upower policykit-1. Needed for LXDE logout menu item to show shutdown/restart ...

			# - RPi Stretch, revert to Debian pcmanfm install package: https://github.com/MichaIng/DietPi/issues/1558#issuecomment-390328173
			if (( $G_HW_MODEL < 10 && $G_DISTRO == 4 )); then

				Download_Install 'https://dietpi.com/downloads/binaries/all/pcmanfm_1.2.5-3_armhf.deb'
				apt-mark hold pcmanfm

			fi

		fi

		software_id=173 # Desktop LXQt
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# - For desktop entries/icons hosted on dietpi.com
			INSTALL_URL_ADDRESS='https://dietpi.com/downloads/conf/desktop'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# - Buster: No leafpad available, use featherpad instead: https://github.com/MichaIng/DietPi/issues/1918#issuecomment-489319719
			local editor='leafpad'
			(( $G_DISTRO > 4 )) && editor='featherpad'

			G_AGI lxqt qterminal firefox-esr xarchiver lxde-icon-theme upower xscreensaver $editor speedcrunch

		fi

		software_id=24 # Desktop MATE
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# - For desktop entries/icons hosted on dietpi.com
			INSTALL_URL_ADDRESS='https://dietpi.com/downloads/conf/desktop'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			G_AGI mate-desktop-environment-extras upower policykit-1 firefox-esr

		fi

		software_id=26 # Desktop GNUStep
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# - For desktop entries/icons hosted on dietpi.com
			INSTALL_URL_ADDRESS='https://dietpi.com/downloads/conf/desktop'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			G_AGI x-window-system-core wmaker gnustep gnustep-devel gnustep-games libc-dbg upower policykit-1 firefox-esr

		fi

		software_id=25 # Desktop Xfce
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# - For desktop entries/icons hosted on dietpi.com
			INSTALL_URL_ADDRESS='https://dietpi.com/downloads/conf/desktop'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			G_AGI xfce4 xfce4-terminal gnome-icon-theme tango-icon-theme upower policykit-1 firefox-esr

		fi

		software_id=174 # GIMP
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI gimp

		fi

		software_id=175 # XFCE4 Power
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI xfce4-power-manager

		fi

		software_id=29 # XRDP
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			# On Stretch, use backports, which resolves missing /etc/profile (e.g. $PATH) load and failing install+service if IPv6 is disabled: https://github.com/MichaIng/DietPi/issues/3017
			(( $G_DISTRO == 4 )) && cat << _EOF_ > /etc/apt/preferences.d/dietpi-xrdp
Package: xrdp
Pin: release n=stretch-backports
Pin-Priority: 500
_EOF_
			G_AGI xrdp

		fi

		software_id=30 # NoMachine
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			Download_Install "https://dietpi.com/downloads/binaries/all/nomachine_6.4.6_$G_HW_ARCH_DESCRIPTION.deb"

		fi

		software_id=44 # BitTorrent Transmission
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI transmission-daemon

		fi

		software_id=94 # ProFTPd
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			debconf-set-selections <<< 'proftpd-basic shared/proftpd/inetd_or_standalone select standalone'
			G_AGI proftpd-basic

		fi

		software_id=96 # Samba Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Link disk cache to RAM: https://github.com/MichaIng/DietPi/issues/2396
			# - Remove previous disk cache dir or symlink
			[[ -d '/var/cache/samba' || -L '/var/cache/samba' ]] && rm -R /var/cache/samba
			# - Pre-create RAM cache dir
			mkdir -p /run/samba-cache
			# - Link disk cache to RAM
			ln -s /run/samba-cache /var/cache/samba
			# - Create RAM cache dir automatically on boot
			echo 'd /run/samba-cache - - - - -' > /etc/tmpfiles.d/dietpi-samba_cache.conf

			G_AGI samba

		fi

		software_id=95 # vsFTPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI vsftpd

		fi

		software_id=109 # NFS Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI nfs-kernel-server rpcbind

		fi

		software_id=83 # Apache Webserver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			local package_list='apache2'
			# Install certbot module on Stretch+, if certbot was already installed
			(( ${aSOFTWARE_INSTALL_STATE[92]} == 2 )) && package_list+=' python3-certbot-apache'
			G_AGI $package_list

		fi

		software_id=85 # Nginx Webserver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			local package_list='nginx-light'
			# Install certbot module on Stretch+, if certbot was already installed
			(( ${aSOFTWARE_INSTALL_STATE[92]} == 2 )) && package_list+=' python3-certbot-nginx'
			G_AGI $package_list

		fi

		software_id=84 # Lighttpd Webserver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			# perl is required for lighttpd-enable-mod, it has been added to recommends only with Buster.
			G_AGI lighttpd perl

		fi

		software_id=88 # MariaDB Database
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			G_DIETPI-NOTIFY 2 "Preparing database directory at: $G_FP_DIETPI_USERDATA/mysql"
			if [[ -d $G_FP_DIETPI_USERDATA/mysql ]]; then

				G_DIETPI-NOTIFY 2 "$G_FP_DIETPI_USERDATA/mysql exists, will migrate containing databases"

			else
				# Otherwise use possibly existent /var/lib/mysql
				# - Remove possible dead symlinks/files:
				G_RUN_CMD rm -f $G_FP_DIETPI_USERDATA/mysql
				if [[ -d '/var/lib/mysql' ]]; then

					G_DIETPI-NOTIFY 2 '/var/lib/mysql exists, will migrate containing databases'
					# Failsafe: Move symlink target in case, otherwise readlink will resolve to dir
					G_RUN_CMD mv $(readlink -f '/var/lib/mysql') $G_FP_DIETPI_USERDATA/mysql

				else

					G_RUN_CMD mkdir $G_FP_DIETPI_USERDATA/mysql

				fi

			fi

			G_RUN_CMD rm -Rf /var/lib/mysql
			G_RUN_CMD ln -s $G_FP_DIETPI_USERDATA/mysql /var/lib/mysql

			local package_list='mariadb-server'
			# Install php-mysql module, if PHP was already installed
			(( ${aSOFTWARE_INSTALL_STATE[89]} == 2 )) && package_list+=" $PHP_NAME-mysql"
			G_AGI $package_list

			# Remove obsolete sysvinit service as we use the systemd mariadb.service
			if [[ -f '/etc/init.d/mysql' ]]; then

				G_DIETPI-NOTIFY 2 'Switching from /etc/init.d/mysql to mariadb.service'
				systemctl disable --now mysql
				rm /etc/init.d/mysql
				update-rc.d -f mysql remove

			fi

		fi

		software_id=87 # SQLite Database
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			local package_list='sqlite3'
			# Install php-sqlite module, if PHP was already installed
			(( ${aSOFTWARE_INSTALL_STATE[89]} == 2 )) && package_list+=" $PHP_NAME-sqlite3"
			G_AGI $package_list

		fi

		software_id=91 # Redis Database
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			local package_list='redis-server'
			# Install php-redis module, if PHP was already installed
			(( ${aSOFTWARE_INSTALL_STATE[89]} == 2 )) && package_list+=" $PHP_NAME-redis"
			G_AGI $package_list

		fi

		software_id=89 # PHP
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Stretch: Add Ondrejs PHP repository for latest PHP version (currently PHP7.3)
			if (( $G_DISTRO < 5 )); then

				# - Debian (+sury.org) armhf is not ARMv6 compatible: https://github.com/MichaIng/DietPi/issues/2794
				if (( $G_HW_ARCH < 2 )); then

					INSTALL_URL_ADDRESS='http://raspbian.raspberrypi.org/raspbian'
					# - Actually we do not support any non-RPi ARMv6 devices currently, but lets be failsafe here
					(( $G_HW_MODEL > 9 )) && INSTALL_URL_ADDRESS='https://deb.debian.org/debian/'

					# - APT source
					echo "deb $INSTALL_URL_ADDRESS buster main" > /etc/apt/sources.list.d/dietpi-php.list
					# - Set priority for Buster: No auto install but auto upgrade
					echo -e '# Allow to install PHP7.3 dependencies and meta packages from Buster
# - Lighttpd must be pulled as well from Buster since the Stretch version does not support Buster libssl1.1 (1.1.1)
Package: php libapache2-mod-php php-* libssl* libc6* libc-* libgssapi-krb5-2 libpcre2-8-0 libk5crypto3 libkrb5-3 libkrb5support0 locales libzip4 curl libcurl4-openssl-dev lighttpd
Pin: release n=buster\nPin-Priority: 501\n
# Pin down all other Buster packages to only allow upgrades of already installed ones via: "apt upgrade"
Package: *\nPin: release n=buster\nPin-Priority: 100' > /etc/apt/preferences.d/dietpi-php

				else

					# - Check URL
					INSTALL_URL_ADDRESS='https://packages.sury.org/php/apt.gpg'
					G_CHECK_URL "$INSTALL_URL_ADDRESS"
					# - APT key
					curl -sSL "$INSTALL_URL_ADDRESS" | apt-key add -
					# - APT source
					echo "deb https://packages.sury.org/php/ $G_DISTRO_NAME main" > /etc/apt/sources.list.d/dietpi-php.list
					# - Pin down libssl1.1 version from this repo on Stretch: https://github.com/MichaIng/DietPi/issues/2734
					echo -e '# libssl1.1 from sury.org breaks Lighttpd install
Package: openssl libssl*\nPin: origin packages.sury.org\nPin-Priority: -1' > /etc/apt/preferences.d/dietpi-openssl

				fi

				# - APT list update
				G_AGUP

			fi

			# Base PHP modules
			# - Apache
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				local package_list="libapache2-mod-$PHP_NAME"

			# - Lighttpd or Nginx
			elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 || ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				local package_list="$PHP_NAME-fpm"

			# - No webserver, /usr/bin/php cmd usage
			else

				local package_list="$PHP_NAME-cli"

			fi

			# Additional PHP modules, commonly used by most web applications
			package_list+=" $PHP_NAME-apcu $PHP_NAME-curl $PHP_NAME-gd $PHP_NAME-mbstring $PHP_NAME-xml $PHP_NAME-zip"

			# MySQL/MariaDB PHP module
			(( ${aSOFTWARE_INSTALL_STATE[88]} > 0 )) && package_list+=" $PHP_NAME-mysql"

			# SQLite PHP module
			(( ${aSOFTWARE_INSTALL_STATE[87]} > 0 )) && package_list+=" $PHP_NAME-sqlite3"

			# Redis PHP module
			(( ${aSOFTWARE_INSTALL_STATE[91]} > 0 )) && package_list+=" $PHP_NAME-redis"

			G_AGI $package_list

		fi

		software_id=90 # phpMyAdmin
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# MariaDB must be running during install to allow debconf setup.
			G_RUN_CMD systemctl start mariadb

			# Set password parameters before installing
			debconf-set-selections <<< 'phpmyadmin phpmyadmin/dbconfig-install boolean true'
			debconf-set-selections <<< "phpmyadmin phpmyadmin/mysql/app-pass password $GLOBAL_PW"
			debconf-set-selections <<< "phpmyadmin phpmyadmin/app-password-confirm password $GLOBAL_PW"

			if (( ${aSOFTWARE_INSTALL_STATE[83]} == 1 )); then

				debconf-set-selections <<< 'phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2'

			elif (( ${aSOFTWARE_INSTALL_STATE[84]} == 1 )); then

				debconf-set-selections <<< 'phpmyadmin phpmyadmin/reconfigure-webserver multiselect lighttpd'
				# Workaround an APT error, when installing lighttpd and phpmyadmin in the same session: https://github.com/MichaIng/DietPi/issues/316
				G_ERROR_HANDLER_NO_FAIL=1 G_AGI phpmyadmin
				G_WHIP_MSG 'Working around Lighttpd + phpMyAdmin APT errors:\n\nYou may have seen an error during the phpMyAdmin APT installation. This occurs, when Lighttpd webserver was installed within the same session.\n
We work around this error by running APT a second time. Please do not worry and ignore any error or failure message within these install steps. After DietPi-Software finished, Lighttpd should start up and phpMyAdmin web UI should be available as expected.'

			else

				debconf-set-selections <<< 'phpmyadmin phpmyadmin/reconfigure-webserver multiselect none'

			fi

			G_AGI phpmyadmin

		fi

		software_id=128 # MPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Stretch
			if (( $G_DISTRO < 5 )); then

				DEPS_LIST='libnfs8 libsmbclient libsqlite3-0 libupnp6 libwrap0 libmpdclient2 libflac8 libyajl2 libavahi-client3 libvorbisfile3 libwavpack1 libmad0 libmpg123-0 libopus0 libavformat57 libfaad2 libcdio-paranoia1 libiso9660-8 libshout3 libid3tag0'
				Download_Install "https://dietpi.com/downloads/binaries/all/mpd_0.20.23-1_$G_HW_ARCH_DESCRIPTION.deb"
				# Prevent APT repo updates from overwriting
				apt-mark hold mpd

			# Buster+
			else

				# libcdio-paranoia1, libiso9660-8 and libupnp6 not available, but ibcdio-paranoia2, libiso9660-11 and libupnp13 instead
				# Buster repo version >= 0.21.5, thus stay with APT for now:
				G_AGI mpd

			fi

		fi

		software_id=54 # phpBB Forum
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Skip install, if already present
			if [[ -d '/var/www/phpBB3' ]]; then

				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} install dir \"/var/www/phpBB3\" already exists. Download and install steps will be skipped.
 - If you want to update ${aSOFTWARE_NAME[$software_id]}, please follow the instructions from WebUI ACP.
 - if you need to reinstall (e.g. broken instance), please manually backup your config files+data, remove the install dir and rerun \"dietpi-software (re)install $software_id\"."

			else

				Download_Install 'https://www.phpbb.com/files/release/phpBB-3.2.7.tar.bz2' /var/www

			fi

		fi

		software_id=58 # OpenBazaar
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Install Golang Go: https://golang.org/dl/
			# - x86_64
			if (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS='https://dl.google.com/go/go1.11.10.linux-amd64.tar.gz'

			# - ARMv8
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS='https://dl.google.com/go/go1.11.10.linux-arm64.tar.gz'

			# - ARMv6/7
			else

				INSTALL_URL_ADDRESS='https://dl.google.com/go/go1.11.10.linux-armv6l.tar.gz'

			fi

			Download_Install "$INSTALL_URL_ADDRESS" /usr/local/

			# Export Go path variables
			mkdir -p $G_FP_DIETPI_USERDATA/go
			cat << _EOF_ > /etc/bashrc.d/go.sh
#!/bin/dash
export GOPATH=$G_FP_DIETPI_USERDATA/go
export PATH=\$PATH:/usr/local/go/bin:$G_FP_DIETPI_USERDATA/go/bin
_EOF_
			. /etc/bashrc.d/go.sh

			# Install OpenBazaar
			G_DIETPI-NOTIFY 2 "Installing ${aSOFTWARE_NAME[$software_id]}, please wait, this will take some time (1-5 minutes)"
			G_RUN_CMD go get github.com/OpenBazaar/openbazaar-go

		fi

		software_id=133 # YaCy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			Download_Install 'https://yacy.net/release/yacy_v1.92_20161226_9000.tar.gz' /etc

		fi

		software_id=2 # Folding@Home
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# We must uninstall previous package for reinstall, else it will fail: https://github.com/MichaIng/DietPi/issue_comments#issuecomment-411688073
			if dpkg-query -s 'fahclient' &> /dev/null; then

				G_DIETPI-NOTIFY 2 'Removing previous package before installing the latest version'
				G_AGP fahclient

			fi

			G_DIETPI-NOTIFY 2 'Pre-configuring FAHClient deb package'
			debconf-set-selections <<< 'fahclient fahclient/autostart boolean true' # external bug with setting false https://github.com/FoldingAtHome/fah-issues/issues/1193
			debconf-set-selections <<< 'fahclient fahclient/power select light'
			debconf-set-selections <<< 'fahclient fahclient/team string 234437' # Team "DietPi"
			debconf-set-selections <<< 'fahclient fahclient/user string DietPi' # Default, until user chooses an own username
			debconf-set-selections <<< 'fahclient fahclient/passkey string 06c869246e88c00cb05cc4d1758a97f9'

			Download_Install 'https://download.foldingathome.org/releases/public/release/fahclient/debian-stable-64bit/v7.5/latest.deb'

			killall -w FAHClient # Due to https://github.com/FoldingAtHome/fah-issues/issues/1193

		fi

		software_id=47 # ownCloud
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			DEPS_LIST="$PHP_NAME-intl" # https://doc.owncloud.org/server/administration_manual/installation/manual_installation.html#php-extensions

			if [[ -f '/var/www/owncloud/occ' ]]; then

				G_DIETPI-NOTIFY 2 'Existing ownCloud installation found, will NOT overwrite...'

			else

				local datadir=$(grep -m1 '^[[:blank:]]*SOFTWARE_OWNCLOUD_DATADIR=' /DietPi/dietpi.txt | sed 's/^[^=]*=//' | sed 's|/$||')
				[[ $datadir ]] || datadir="$G_FP_DIETPI_USERDATA/owncloud_data"
				if [[ -f $datadir/dietpi-owncloud-installation-backup/occ ]]; then

					G_DIETPI-NOTIFY 2 'ownCloud installation backup found, starting recovery...'
					G_RUN_CMD cp -a "$datadir"/dietpi-owncloud-installation-backup/. /var/www/owncloud/
					# Correct config.php data directory entry, in case it changed due to server migration:
					G_CONFIG_INJECT "'datadirectory'" "'datadirectory' => '$datadir'," /var/www/owncloud/config/config.php "'dbtype'"

				else

					Download_Install 'https://download.owncloud.org/community/owncloud-latest.tar.bz2' /var/www

				fi

			fi

			chown -R www-data:www-data /var/www/owncloud

			[[ $DEPS_LIST ]] && G_DIETPI-NOTIFY 2 'Installing required PHP modules' && G_AGI $DEPS_LIST

		fi

		software_id=114 # Nextcloud
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			DEPS_LIST="$PHP_NAME-intl" # https://docs.nextcloud.com/server/stable/admin_manual/installation/source_installation.html#prerequisites-for-manual-installation

			if [[ -f '/var/www/nextcloud/occ' ]]; then

				G_DIETPI-NOTIFY 2 'Existing Nextcloud installation found, will NOT overwrite...'

			else

				local datadir=$(grep -m1 '^[[:blank:]]*SOFTWARE_NEXTCLOUD_DATADIR=' /DietPi/dietpi.txt | sed 's/^[^=]*=//' | sed 's|/$||')
				[[ $datadir ]] || datadir="$G_FP_DIETPI_USERDATA/nextcloud_data"
				if [[ -f $datadir/dietpi-nextcloud-installation-backup/occ ]]; then

					G_DIETPI-NOTIFY 2 'Nextcloud installation backup found, starting recovery...'
					G_RUN_CMD cp -a "$datadir"/dietpi-nextcloud-installation-backup/. /var/www/nextcloud/
					# Correct config.php data directory entry, in case it changed due to server migration:
					G_CONFIG_INJECT "'datadirectory'" "'datadirectory' => '$datadir'," /var/www/nextcloud/config/config.php "'dbtype'"

				else

					Download_Install 'https://download.nextcloud.com/server/releases/latest.tar.bz2' /var/www

				fi

			fi

			chown -R www-data:www-data /var/www/nextcloud

			[[ $DEPS_LIST ]] && G_DIETPI-NOTIFY 2 'Installing required PHP modules' && G_AGI $DEPS_LIST

		fi

		software_id=168 # Nextcloud Talk
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Install coTURN server only, install Nextcloud Talk app after Nextcloud has been fully configured
			G_AGI coturn

		fi

		software_id=32 # ympd
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			Download_Install 'https://dietpi.com/downloads/binaries/all/ympd_1.2.3.7z'

			local binary_name='ympd_'
			# - armv6
			if (( $G_HW_ARCH == 1 )); then

				binary_name+='armv6'

			# - armv7
			elif (( $G_HW_ARCH == 2 )); then

				binary_name+='armv7'

			# - arm64
			elif (( $G_HW_ARCH == 3 )); then

				binary_name+='armv8'

			# - x86_64
			elif (( $G_HW_ARCH == 10 )); then

				binary_name+='amd64'

			fi

			# We have no Buster binaries yet, so always use Stretch binaries
			binary_name+='_stretch'

			mv $binary_name /usr/bin/ympd
			chmod +x /usr/bin/ympd
			rm ympd_*

		fi

		software_id=148 # myMPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Sourcebuild pre-reqs: https://github.com/jcorporation/myMPD#dependencies
			DEPS_LIST='libmpdclient2 libmediainfo0v5 cmake cppcheck pkg-config libmpdclient-dev libssl-dev libmediainfo-dev'
			Download_Install 'https://github.com/jcorporation/myMPD/archive/master.zip'

			cd myMPD-master
			G_RUN_CMD ./build.sh releaseinstall
			cd /tmp/$G_PROGRAM_NAME
			rm -R myMPD-master

		fi

		software_id=121 # Roon Bridge
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# x86_64
			if (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS='https://download.roonlabs.com/builds/RoonBridge_linuxx64.tar.bz2'

			# ARMv8
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS='https://download.roonlabs.com/builds/RoonBridge_linuxarmv8.tar.bz2'

			# ARMv7
			else

				INSTALL_URL_ADDRESS='https://download.roonlabs.com/builds/RoonBridge_linuxarmv7hf.tar.bz2'

			fi

			Download_Install "$INSTALL_URL_ADDRESS"

			# Clear dir on reinstall
			[[ -d '/etc/roonbridge' ]] && rm -R /etc/roonbridge
			mv RoonBridge /etc/roonbridge

		fi

		software_id=119 # CAVA
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# armv6
			if (( $G_HW_ARCH == 1 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/cava_0.6.1-1_armv6.deb'

			# armv7
			elif (( $G_HW_ARCH == 2 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/cava_0.6.1-1_armv7.deb'

			# arm64
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/cava_0.6.1-1_arm64.deb'
				# Using older binary for Odroid C2 due to: https://github.com/MichaIng/DietPi/issues/1340#issuecomment-393225267
				(( $G_HW_MODEL == 12 )) && INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/cava_0.4.2_arm64.deb'

			# x86_64
			elif (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/cava_0.6.1-1_amd64.deb'

			fi

			G_THREAD_START wget https://dietpi.com/downloads/binaries/all/cava.psf -O /root/cava.psf # + Font for cava, nice bars

			DEPS_LIST='libpulse0 libfftw3-3'
			Download_Install "$INSTALL_URL_ADDRESS"

		fi

		software_id=118 # Mopidy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://apt.mopidy.com/mopidy.gpg'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# Install our config file only, if not yet existent, to preserve manual user config.
			# - This needs to be done prior to APT install, since this would otherwise install a default config file as well.
			[[ -f '/etc/mopidy/mopidy.conf' ]] || dps_index=$software_id Download_Install 'mopidy.conf' /etc/mopidy/mopidy.conf

			curl -sSL "$INSTALL_URL_ADDRESS" | apt-key add -
			# No bullseye.list available yet, use buster.list instead
			wget https://apt.mopidy.com/${G_DISTRO_NAME/bullseye/buster}.list -O /etc/apt/sources.list.d/mopidy.list
			G_AGUP
			G_AGI mopidy gstreamer1.0-alsa

			# ARMv8
			# NB: No ARM64 packages currently exist in mopidy repo. So it will throw a minor error when updating apt.
			# Mopidy web client extensions not loading in webpage...
			#if (( $G_HW_ARCH == 3 )); then

				#G_AGI build-essential python-dev
				#pip install mopidy #no effect, claims already upto date.

			#fi

			pip install Mopidy-MusicBox-Webclient Mopidy-Local-Images

		fi

		software_id=31 # Kodi
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# CEC support + libcurl3-gnutls required for C2, but lets apply to all: https://github.com/MichaIng/DietPi/issues/446
			local package_list='libcec4 libcurl3-gnutls'

			# NFS support
			(( $G_DISTRO < 5 )) && package_list+=' libnfs8' || package_list+=' libnfs12'

			# Odroids
			if [[ $G_HW_MODEL == 1[0-9] ]]; then

				package_list+=' kodi-odroid'

			# Everything else
			else

				package_list+=' kodi'

				# RPi
				if (( $G_HW_MODEL < 10 )); then

					# fbset required to recover desktop with custom resolution and fix startup warning: https://dietpi.com/phpbb/viewtopic.php?p=17550#p17550
					package_list+=' fbset'

					# RPi4: fake KMS driver required: https://www.raspberrypi.org/forums/viewtopic.php?f=66&t=251645
					if (( $G_HW_MODEL == 4 )); then

						/DietPi/dietpi/func/dietpi-set_hardware rpi-opengl vc4-fkms-v3d

					# Else legacy (non-GL) driver required
					else

						/DietPi/dietpi/func/dietpi-set_hardware rpi-opengl disable

					fi

					# https://github.com/MichaIng/DietPi/issues/3031#issuecomment-540477241
					mkdir -p /etc/polkit-1/localauthority/50-local.d

				fi

			fi

			G_AGI $package_list

		fi

		software_id=39 # MiniDLNA
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI minidlna

		fi

		software_id=67 # No-IP
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# x86_x64
			if (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/noip_x32_x64.zip'

			# ARMv8
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/noip_arm64.zip'

			# ARMv6/7
			else

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/noip_armhf.zip'

			fi

			Download_Install "$INSTALL_URL_ADDRESS"

			mkdir -p /usr/local/bin
			mv noip_binary /usr/local/bin/noip2
			chmod +x /usr/local/bin/noip2

		fi

		software_id=108 # Amiberry
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Pre-reqs
			DEPS_LIST='libmpg123-0 libxml2 mpeg2dec libmpeg2-4'

			# For Stretch, SDL2 was compiled with X11 + libsndio support and dependency
			if (( $G_DISTRO < 5 )); then

				DEPS_LIST+=' libsndio6.1'

				# ARMv6
				if (( $G_HW_ARCH == 1 )); then

					INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/sdl2-armv6_stretch.7z'

				# ARMv7 FKMS: ./configure --disable-video-rpi --enable-video-kmsdrm
				elif (( $G_HW_ARCH == 2 )); then

					INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/sdl2-armv7_stretch.7z'

					# RPi 2/3 Enable fkms OpenGL
					(( $G_HW_MODEL < 10 )) && /DietPi/dietpi/func/dietpi-set_hardware rpi-opengl vc4-fkms-v3d

				fi

				Download_Install "$INSTALL_URL_ADDRESS" sdl2
				dpkg -i sdl2/*.deb
				rm -R sdl2

			# For Buster, SDL2 was compiled with minimum dependencies: No X11 required, thus GPU drivers and some libraries need to be installed/enabled separately
			else

				# Libraries
				DEPS_LIST+=' libpng16-16 libfreetype6'

				# GPU drivers
				# - RPi
				if (( $G_HW_MODEL < 10 )); then

					DEPS_LIST+=' libegl1'
					/DietPi/dietpi/func/dietpi-set_hardware rpi-opengl vc4-fkms-v3d

				# - Odroid XU4: http://fuzon.co.uk/meveric/pool/main/s/setup-odroid/
				elif (( $G_HW_MODEL == 11 )); then

					DEPS_LIST+=' malit628-odroid'

				# - ASUS TB: https://github.com/rockchip-linux/rk-rootfs-build/tree/master/packages/armhf
				elif (( $G_HW_MODEL == 52 )); then

					# Mali-T760 driver libraries
					Download_Install 'https://dietpi.com/downloads/binaries/asus/libmali.deb'
					cd /usr/lib/arm-linux-gnueabihf
					ln -sf libMali.so libEGL.so.1.1.0
					ln -sf libMali.so libEGL.so
					ln -sf libMali.so libEGL.so.1.0.0
					ln -sf libMali.so libEGL.so.1.4
					ln -sf libMali.so libGLESv2.so
					ln -sf libMali.so libGLESv2.so.2.0
					ln -sf libMali.so libGLESv2.so.2.0.0
					ln -sf libMali.so libGLESv1_CM.so
					ln -sf libMali.so libGLESv1_CM.so.1
					ln -sf libMali.so libGLESv1_CM.so.1.1
					cd /tmp/$G_PROGRAM_NAME

				fi

				# libSDL2
				Download_Install "https://dietpi.com/downloads/binaries/$G_DISTRO_NAME/libSDL2_$G_HW_ARCH_DESCRIPTION.tar.bz2" /usr/local/lib

			fi

			# Amiberry
			# - Backup existing autostart.uae for user
			G_BACKUP_FP $G_FP_DIETPI_USERDATA/amiberry/conf/autostart.uae
			Download_Install 'https://dietpi.com/downloads/binaries/all/amiberry_v2.25.7z' $G_FP_DIETPI_USERDATA

		fi

		software_id=112 # DDX-Rebirth
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='libsdl-mixer1.2 libsdl1.2debian libphysfs1'
			Download_Install 'https://dietpi.com/downloads/binaries/rpi/dxx-rebirth.7z' $G_FP_DIETPI_USERDATA

		fi

		software_id=111 # UrBackup Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Grab latest version from server
			INSTALL_URL_ADDRESS='https://hndl.urbackup.org/Server/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# - ARMv7
			if (( $G_HW_ARCH == 2 )); then

				local fallback_url='https://hndl.urbackup.org/Server/2.3.8/urbackup-server_2.3.8_armhf.deb'
				local file=$(curl -sL "$INSTALL_URL_ADDRESS" | grep -m1 'urbackup-server_.*_armhf\.deb' | cut -d \" -f 8)

			# - x86_64
			elif (( $G_HW_ARCH == 10 )); then

				local fallback_url='https://hndl.urbackup.org/Server/2.3.8/urbackup-server_2.3.8_amd64.deb'
				local file=$(curl -sL "$INSTALL_URL_ADDRESS" | grep -m1 'urbackup-server_.*_amd64\.deb' | cut -d \" -f 8)

			# - ARMv8 source
			elif (( $G_HW_ARCH == 3 )); then

				local fallback_url='https://hndl.urbackup.org/Server/2.3.8/urbackup-server-2.3.8.tar.gz'
				local file=$(curl -sL "$INSTALL_URL_ADDRESS" | grep -m1 'urbackup-server-.*\.tar\.gz' | cut -d \" -f 8)

			fi

			[[ $file ]] && INSTALL_URL_ADDRESS="$INSTALL_URL_ADDRESS/$file" || INSTALL_URL_ADDRESS=$fallback_url
			unset file fallback_url

			# ARMv8 source build
			if (( $G_HW_ARCH == 3 )); then

				DEPS_LIST='build-essential zlib1g-dev libcurl4-openssl-dev libcrypto++-dev sqlite3'
				Download_Install "$INSTALL_URL_ADDRESS"

				cd urbackup-server-*
				./configure
				G_RUN_CMD make -j $G_HW_CPU_CORES
				G_RUN_CMD make install

				sed -i 's|/usr/bin|/usr/local/bin|g' urbackup-server.service
				cp urbackup-server.service /etc/systemd/system/urbackupsrv.service
				cp defaults_server /etc/default/urbackupsrv
				cp logrotate_urbackupsrv /etc/logrotate.d/urbackupsrv

				cd /tmp/$G_PROGRAM_NAME
				rm -R urbackup-server-*

			# Deb
			else

				debconf-set-selections <<< "urbackup-server urbackup/backuppath string $G_FP_DIETPI_USERDATA/urbackup"
				Download_Install "$INSTALL_URL_ADDRESS"

			fi

		fi

		software_id=51 # OpenTyrian
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			if (( $G_HW_MODEL > 9 )); then

				G_AGI opentyrian

			else

				DEPS_LIST='ibsdl1.2debian libsdl-net1.2'
				Download_Install 'https://dietpi.com/downloads/binaries/rpi/opentyrian_armhf.zip' /
				cp -a /usr/local/games/opentyrian /usr/games/ # cp 'just does it', mv will fail if already exists.
				rm -R /usr/local/games/opentyrian
				chmod +x /usr/games/opentyrian/opentyrian

			fi

		fi

		software_id=59 # RPi Cam Control
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='gpac motion'
			Download_Install 'https://github.com/silvanmelchior/RPi_Cam_Web_Interface/archive/master.zip'

			cd RPi_Cam*

			# Config /etc/motion
			mkdir -p /etc/motion
			cp etc/motion/motion.conf.1 /etc/motion/motion.conf

			# Config /etc/raspimjpeg
			cp etc/raspimjpeg/raspimjpeg.1 /etc/raspimjpeg

			# Setup /var/www/rpicam
			mkdir -p /var/www/rpicam/media
			cp -a www/* /var/www/rpicam/
			#chmod +x /var/www/rpicam/raspizip.sh
			mknod /var/www/rpicam/FIFO p
			mknod /var/www/rpicam/FIFO1 p

			# Symlink cam preview and status
			ln -sf /run/shm/mjpeg/cam.jpg /var/www/rpicam/cam.jpg
			ln -sf /run/shm/mjpeg/status_mjpeg.txt /var/www/rpicam/status_mjpeg.txt

			# Setup Raspimjpeg binary
			cp bin/raspimjpeg /opt/vc/bin/raspimjpeg
			chmod +x /opt/vc/bin/raspimjpeg
			ln -s /opt/vc/bin/raspimjpeg /usr/bin/raspimjpeg

			# Cleanup / remove extracted source
			cd /tmp/$G_PROGRAM_NAME
			rm -R RPi_Cam*

		fi

		software_id=45 # Deluge
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI deluged deluge-web deluge-console

		fi

		software_id=115 # Webmin
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='http://www.webmin.com/jcameron-key.asc'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"
			curl -sSL "$INSTALL_URL_ADDRESS" | apt-key add -
			echo 'deb https://download.webmin.com/download/repository sarge contrib' > /etc/apt/sources.list.d/webmin.list
			G_AGUP
			G_AGI webmin

		fi

		software_id=129 # O!MPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Enable YouTube and Tidal support: youtube-dl is available in Stretch+ repo only or as standalone binary: https://github.com/ytdl-org/youtube-dl#installation
			mkdir -p /usr/local/bin
			# - "wget --spider" and "curl -LI" fail with 403 Forbidden
			INSTALL_URL_ADDRESS='https://yt-dl.org/downloads/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"
			G_THREAD_START curl -L "$INSTALL_URL_ADDRESS/youtube-dl" -o /usr/local/bin/youtube-dl
			DEPS_LIST='python-requests'

			Download_Install 'https://github.com/ArturSierzant/OMPD/archive/master.zip' /var/www
			# Replace existing installs but preserve local config override
			if [[ -d '/var/www/ompd' ]]; then

				[[ -f '/var/www/ompd/include/config.local.inc.php' ]] && mv /var/www/ompd/include/config.local.inc.php /var/www/OMPD*/include/
				rm -R /var/www/ompd

			fi
			mv /var/www/OMPD* /var/www/ompd

		fi

		software_id=135 # IceCast + DarkIce
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI darkice icecast2

		fi

		software_id=63 # LinuxDash
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			Download_Install 'https://github.com/afaqurk/linux-dash/archive/master.zip'
			mkdir -p /var/www/linuxdash
			cp -a linux-dash-master/* /var/www/linuxdash/
			rm -R linux-dash-master

		fi

		software_id=93 # Pi-hole
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://install.pi-hole.net'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# Check free available memory. Increase swapfile size to prevent gravity running out of mem.
			if (( $(free -m | mawk '/^Mem:/{print $4;exit}') < 512 &&
				$(sed -n '/^[[:blank:]]*AUTO_SETUP_SWAPFILE_SIZE=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt) < 512 )); then

				G_DIETPI-NOTIFY 2 'Increasing swapfile size to 512 MiB before running gravity.sh, please wait...\n'
				/DietPi/dietpi/func/dietpi-set_swapfile 512

			fi

			# Install
			wget "$INSTALL_URL_ADDRESS" -O install.sh
			chmod +x install.sh
			# - Skip Lighttpd install, since we allow to choose and install prior to Pi-hole
			./install.sh --disable-install-webserver
			# - We can't do reasonable exit code check, since installer always returns 5!
			rm install.sh

		fi

		software_id=33 # Airsonic
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://api.github.com/repos/airsonic/airsonic/releases/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS" #full filepath below, returns --spider error :(
			INSTALL_URL_ADDRESS=$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 'browser_download_url.*\.war"' | cut -d \" -f 4)

			mkdir -p $G_FP_DIETPI_USERDATA/airsonic/transcode
			wget "$INSTALL_URL_ADDRESS" -O $G_FP_DIETPI_USERDATA/airsonic/airsonic.war

		fi

		software_id=34 # Subsonic
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			#DEPS_LIST='lame' # Conflicts with our ffmpeg package: https://github.com/MichaIng/DietPi/issues/946#issuecomment-300738228
			Download_Install 'https://dietpi.com/downloads/binaries/all/subsonic.deb'

		fi

		software_id=68 # Remot3.it (previously Weaved)
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			INSTALL_URL_ADDRESS='https://api.github.com/repos/remoteit/installer/releases/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# ARMv6/7
			local arch='armhf'

			# ARMv8
			if (( $G_HW_ARCH == 3 )); then

				arch='arm64'

			# x86_64
			elif (( $G_HW_ARCH == 10 )); then

				arch='amd64'

			fi

			INSTALL_URL_ADDRESS=$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 "browser_download_url.*connectd_.*_$arch\.deb" | cut -d \" -f 4)
			no_check_url=1 Download_Install "$INSTALL_URL_ADDRESS"

		fi

		# WebIOPi requires RPi GPIO
		(( ${aSOFTWARE_INSTALL_STATE[71]} == 1 )) && aSOFTWARE_INSTALL_STATE[69]=1

		software_id=69 # RPi GPIO
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI python-rpi.gpio python3-rpi.gpio

		fi

		software_id=70 # WebIOPi
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# RPi
			if (( $G_HW_MODEL < 10 )); then

				# https://git.drogon.net/?p=wiringPi;a=shortlog;h=refs/heads/master snapshot
				Download_Install 'https://dietpi.com/downloads/binaries/all/wiringPi-8d188fa.tar.gz'

			# Odroids
			elif (( $G_HW_MODEL < 20 )); then

				Download_Install 'https://github.com/hardkernel/wiringPi/archive/master.zip'

			# BPi Pro
			elif (( $G_HW_MODEL == 51 )); then

				Download_Install 'https://github.com/LeMaker/WiringBP/archive/bananapro.zip'

			fi

			mv WiringBP* wiringPi &> /dev/null #BPi
			mv wiringPi* wiringPi &> /dev/null #eg: RPi, wiringPi-HEAD-8d188fa

			cd wiringPi
			chmod +x build
			./build

			cd /tmp/$G_PROGRAM_NAME
			mv wiringPi /root/

		fi

		software_id=72 # RPi I2C
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			/DietPi/dietpi/func/dietpi-set_hardware i2c enable

		fi

		software_id=122 # Node-RED
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Pre-reqs
			local package_list='python python3'
			# - RPi: GPIO control for Node-RED
			(( $G_HW_MODEL < 10 )) && package_list+=' python-rpi.gpio'
			G_AGI $package_list

			# Serialport fails to build unless below flags are provided
			npm i -g --unsafe-perm node-red

		fi

		software_id=123 # Mosquitto
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI mosquitto

		fi

		software_id=131 # Blynk Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://api.github.com/repos/blynkkk/blynk-server/releases/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# On Buster use non-Java8 binary, else Java 8
			local java='java8'
			(( $G_DISTRO > 4 )) && java='[^a].' # Exclude "a" von jav[a]8 but allow "8" as this can be from version string
			INSTALL_URL_ADDRESS=$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 "browser_download_url.*$java\.jar" | cut -d \" -f 4)

			# Fallback URL
			if [[ ! $INSTALL_URL_ADDRESS ]]; then

				INSTALL_URL_ADDRESS='https://github.com/blynkkk/blynk-server/releases/download/v0.41.5/server-0.41.5-java8.jar'
				(( $G_DISTRO > 4 )) && INSTALL_URL_ADDRESS='https://github.com/blynkkk/blynk-server/releases/download/v0.41.5/server-0.41.5-java8.jar'

			fi

			mkdir -p $G_FP_DIETPI_USERDATA/blynk/data
			G_THREAD_START wget "$INSTALL_URL_ADDRESS" -O $G_FP_DIETPI_USERDATA/blynk/blynkserver.jar

			# Install Blynk JS libary
			G_AGI python
			npm i -g --unsafe-perm onoff
			npm i -g --unsafe-perm blynk-library

			G_THREAD_WAIT

		fi

		software_id=124 # NAA Daemon
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Skip license
			debconf-set-selections <<< 'networkaudiod networkaudiod/license note false'

			# Packages
			local apackages=()

			# - ARMv6/7
			if (( $G_HW_ARCH < 3 )); then

				apackages+=('https://www.signalyst.eu/bins/naa/linux/stretch/networkaudiod_3.5.6-41_armhf.deb')

			# - ARMv8
			elif (( $G_HW_ARCH == 3 )); then

				apackages+=('https://www.signalyst.eu/bins/naa/linux/stretch/networkaudiod_3.5.6-41_arm64.deb')

			# - x86_64
			else

				apackages+=('https://www.signalyst.eu/bins/naa/linux/stretch/networkaudiod_3.5.6-41_amd64.deb')

			fi

			# Check online
			for i in "${apackages[@]}"
			do

				G_CHECK_URL "$i"

			done

			# Install
			for i in "${apackages[@]}"
			do

				no_check_url=1 Download_Install "$i"

			done

			unset apackages

			# Enable logging for NAA Daemon
			#echo "NETWORKAUDIOD_LOGFILE='/var/log/naadaemon.log'" > /etc/default/networkaudiod

		fi

		software_id=125 # Tomcat8
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI tomcat8

		fi

		software_id=71 # WebIOPi
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='python-dev python-setuptools'
			Download_Install 'https://sourceforge.net/projects/webiopi/files/WebIOPi-0.7.1.tar.gz/download'

			cd WebIOPi*

			# Automate Weaved prompt
			sed -i '/read response/c\response="n"' setup.sh

			# Run setup script
			./setup.sh

			cd /tmp/$G_PROGRAM_NAME

			# Cleanup
			rm -R WebIOPi*

		fi

		software_id=62 # DietPi-CloudShell
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# LCD panels can be enabled in Dietpi-config > display options
			# - XU4 enable cloudshell
			(( $G_HW_MODEL == 11 )) && /DietPi/dietpi/func/dietpi-set_hardware lcdpanel odroid-cloudshell

		fi

		software_id=98 # HAProxy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='libpcre3-dev libssl-dev zlib1g-dev'
			Download_Install 'https://www.haproxy.org/download/1.8/src/haproxy-1.8.8.tar.gz'

			cd haproxy-*

			# Compile and install
			make -j $G_HW_CPU_CORES TARGET=linux2628 CPU=generic USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_LINUX_SPLICE=1
			make install

			mkdir /etc/haproxy

			# Exit directory
			cd /tmp/$G_PROGRAM_NAME

			# Clean up
			rm -R haproxy-*

			# Install init script as service
			dps_index=$software_id Download_Install 'haproxy.service' /etc/init.d/haproxy
			chmod +x /etc/init.d/haproxy
			update-rc.d haproxy defaults

		fi

		software_id=35 # Logitech Media Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Instructions: http://wiki.slimdevices.com/index.php/DebianPackage#installing_7.9.2
			# - Grab architecture
			local arch='arm'
			(( $G_HW_ARCH == 10 )) && arch='amd64'

			# - Grab URL for the latest package (nightly)
			INSTALL_URL_ADDRESS="https://www.mysqueezebox.com/update/?version=7.9.2&revision=1&geturl=1&os=deb$arch"
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# - Install, failsafe checking this URL again
			Download_Install "$(curl -s "$INSTALL_URL_ADDRESS")"

		fi

		software_id=55 # Wordpress
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			Download_Install 'https://wordpress.org/latest.tar.gz' /var/www

		fi

		software_id=38 # FreshRSS
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Install required PHP modules: https://github.com/FreshRSS/FreshRSS#example-of-full-installation-on-linux-debianubuntu
			DEPS_LIST="$PHP_NAME-curl $PHP_NAME-gmp $PHP_NAME-intl $PHP_NAME-json $PHP_NAME-mbstring $PHP_NAME-xml $PHP_NAME-zip"

			Download_Install 'https://github.com/FreshRSS/FreshRSS/archive/master.zip' /opt
			mv /opt/FreshRSS-master /opt/FreshRSS

		fi

		software_id=28 # TigerVNC Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			# TigerVNC allows connecting to a virtual desktop
			# X11VNC allows connecting to a real desktop session, thus shared desktop sessions as well
			# netbase is required to solve: "Use of uninitialized value $proto in socket at /usr/bin/tigervncserver"
			# - It is a recommendation and no dependency of perl, but expected by some packages depending on perl only: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=939055
			G_AGI tigervnc-standalone-server tigervnc-common x11vnc netbase

		fi

		software_id=120 # RealVNC Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI realvnc-vnc-server

		fi

		software_id=73 # Fail2Ban
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Create jail.conf (backend = systemd) first, to prevent APT failure due to missing /var/log/auth.log: https://github.com/MichaIng/DietPi/issues/475#issuecomment-310873879
			mkdir -p /etc/fail2ban
			[[ -f '/etc/fail2ban/jail.conf' ]] || cat << _EOF_ > /etc/fail2ban/jail.conf
[DEFAULT]
enabled = true
ignoreip = 127.0.0.1/8
ignorecommand =
backend = systemd
filter = %(__name__)s
findtime  = 600
maxretry = 3
bantime  = 600
banaction = route
action = %(banaction)s[blocktype=blackhole]

[dropbear]

[sshd]
_EOF_

			G_AGI python3-systemd fail2ban

			# Remove obsolete sysvinit service and traces
			rm -f /etc/{init.d,default}/fail2ban
			update-rc.d -f fail2ban remove

			# Failsafe
			G_RUN_CMD systemctl unmask fail2ban
			G_RUN_CMD systemctl enable --now fail2ban

		fi

		software_id=74 # InfluxDB
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://repos.influxdata.com/influxdb.key'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			curl -sSL "$INSTALL_URL_ADDRESS" | apt-key add -
			# Use Buster branch on Bullseye
			echo "deb https://repos.influxdata.com/debian/ ${G_DISTRO_NAME/bullseye/buster} stable" > /etc/apt/sources.list.d/influxdb.list
			G_AGUP

			G_AGI influxdb

		fi

		software_id=77 # Grafana
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# APT repo GPG key
			INSTALL_URL_ADDRESS='https://packages.grafana.com/gpg.key'
			local deb_address='deb https://packages.grafana.com/oss/deb/ stable main'
			if (( $G_HW_ARCH == 1 )); then

				INSTALL_URL_ADDRESS='https://bintray.com/user/downloadSubjectPublicKey?username=bintray'
				deb_address="deb https://dl.bintray.com/fg2it/deb-rpi-1b/ $G_DISTRO_NAME main"

			fi

			G_CHECK_URL "$INSTALL_URL_ADDRESS"
			curl -sSL "$INSTALL_URL_ADDRESS" | apt-key add -

			# APT repo source & update
			echo "$deb_address" > /etc/apt/sources.list.d/grafana.list
			G_AGUP

			# APT package
			G_AGI grafana

		fi

		software_id=64 # phpSysInfo
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			Download_Install 'https://github.com/phpsysinfo/phpsysinfo/archive/master.zip' /var/www
			mv /var/www/phpsysinfo-* /var/www/phpsysinfo

		fi

		software_id=80 # Ubooquity
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/Ubooquity.jar'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			mkdir -p $G_FP_DIETPI_USERDATA/ubooquity
			G_RUN_CMD wget "$INSTALL_URL_ADDRESS" -O $G_FP_DIETPI_USERDATA/ubooquity/Ubooquity.jar

		fi

		software_id=56 # PHP Image Gallery
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			Download_Install 'https://dietpi.com/downloads/binaries/all/Single_File_PHP_Gallery_4.7.0.zip' /var/www/gallery

		fi

		software_id=40 # Ampache
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			Download_Install 'https://github.com/ampache/ampache/archive/master.zip'
			# Preserve existing config files
			[[ -f '/var/www/ampache/config/ampache.cfg.php' ]] && mv /var/www/ampache/config/ampache.cfg.php ampache-*/config/
			[[ -f '/var/www/ampache/config/motd.php' ]] && mv /var/www/ampache/config/motd.php ampache-*/config/
			[[ -f '/var/www/ampache/config/registration_agreement.php' ]] && mv /var/www/ampache/config/registration_agreement.php ampache-*/config/
			[[ -d '/var/www/ampache' ]] && rm -R /var/www/ampache
			mv ampache-* /var/www/ampache

			# Composer install required for 3.8.2
			php -r "readfile('https://getcomposer.org/installer');" > composer-setup.php
			php composer-setup.php
			php -r "unlink('composer-setup.php');"
			mv composer.phar /usr/local/bin/composer

			cd /var/www/ampache
			composer install --prefer-source --no-interaction
			cd /tmp/$G_PROGRAM_NAME

		fi

		software_id=97 # OpenVPN Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI openvpn iptables
			# Remove obsolete sysvinit service
			[[ -f '/etc/init.d/openvpn' ]] && rm /etc/init.d/openvpn
			update-rc.d -f openvpn remove

		fi

		software_id=117 # PiVPN
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://install.pivpn.io'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			G_AGI lsb-release iptables-persistent dnsutils expect net-tools openvpn

			# Requires underpriv user: https://github.com/MichaIng/DietPi/issues/570#issuecomment-255588307
			getent passwd pivpn &> /dev/null || useradd pivpn
			mkdir -p /home/pivpn

			wget "$INSTALL_URL_ADDRESS" -O pivpn_install.sh
			chmod +x pivpn_install.sh

			# Disable reboot
			sed -i '/shutdown[[:space:]]/d' pivpn_install.sh

			until ./pivpn_install.sh
			do

				if ! G_WHIP_YESNO "The PiVPN installer was not successful and/or cancelled prior to its completion.\n\nWould you like DietPi to run the PiVPN installer again?"; then

					aSOFTWARE_INSTALL_STATE[$software_id]=0
					break

				fi

			done

			rm pivpn_install.sh

		fi

		software_id=172 # WireGuard
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Kernel headers and matching kernel image required for wireguard-dkms to build the wireguard kernel module
			local kernel_packages=''
			# - x86_64
			if (( $G_HW_ARCH == 10 )); then

				kernel_packages='linux-image-amd64 linux-headers-amd64'

			# - RPi
			elif (( $G_HW_MODEL < 10 )); then

				kernel_packages='raspberrypi-bootloader raspberrypi-kernel libraspberrypi-bin libraspberrypi0 raspberrypi-kernel-headers'

			# - Odroid XU4
			elif (( $G_HW_MODEL == 11 )); then

				kernel_packages='linux-image-4.14-armhf-odroid-xu4 linux-headers-4.14-armhf-odroid-xu4'

			# - Odroid C2
			elif (( $G_HW_MODEL == 12 )); then

				kernel_packages='linux-image-arm64-odroid-c2 linux-headers-arm64-odroid-c2'

			# - Odroid N1
			elif (( $G_HW_MODEL == 14 )); then

				kernel_packages='linux-image-arm64-odroid-n1 linux-headers-arm64-odroid-n1'

			# - Rock64
			elif (( $G_HW_MODEL == 43 )); then

				kernel_packages='linux-image-rockchip64 linux-headers-rockchip64'

			fi

			# Odroids need to purge before we install, else, does not update to latest version...
			(( $G_HW_MODEL > 9 && $G_HW_MODEL < 20 )) && G_AGP $kernel_packages

			# Since G_AGUG does not upgrade packages with changed dependencies, in case of kernel image meta packages, those need to be installed+upgraded via G_AGI.
			G_AGI $kernel_packages # apt-get install overrides hold state

			# Add Bullseye repo, which contains the WireGuard packages
			if (( $G_DISTRO < 6 )); then

				# Raspbian or Debian?
				local url='http://raspbian.raspberrypi.org/raspbian/'
				(( $G_HW_MODEL > 9 )) && url='https://deb.debian.org/debian/'

				echo "deb $url bullseye main" > /etc/apt/sources.list.d/dietpi-wireguard.list

				# Disable repo via priority "-1", to prevent any accidental package upgrades: https://github.com/MichaIng/DietPi/issues/2568
				# Enable but set WireGuard package priorities low enough to install only if not available in main repo(s)
				echo -e 'Package: *\nPin: release n=bullseye\nPin-Priority: -1\n
Package: wireguard wireguard-dkms wireguard-tools\nPin: release n=bullseye\nPin-Priority: 100' > /etc/apt/preferences.d/dietpi-wireguard

				G_AGUP

			fi

			# Check for existing WireGuard install
			local existing_install=0
			dpkg-query -s wireguard-dkms &> /dev/null && existing_install=1

			# iptables required to forward incoming VPN traffic to local LAN/internet interface
			# qrencode required to print client config QR code to console
			G_AGI wireguard iptables qrencode

			# If existing install, reconfigure to rebuild WireGuard kernel module against current kernel + headers
			(( $existing_install )) && G_RUN_CMD dpkg-reconfigure wireguard-dkms

			# On RPi, the kernel module rebuild is not triggered by kernel upgrades, thus add this task manually
			(( $G_HW_MODEL > 9 )) || echo -e '#!/bin/dash\ndpkg-reconfigure wireguard-dkms' > /etc/kernel/postinst.d/dietpi-wireguard

			unset kernel_packages existing_install

		fi

		software_id=171 # DietPi-NordVPN
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI openvpn

			Download_Install 'https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip' /etc/openvpn

			mkdir -p /var/lib/dietpi/dietpi-software/installed/dietpi-nordvpn

			G_WHIP_MSG "DietPi-NordVPN has been installed.\nOnce DietPi-Software has finished all other installations, you can run the GUI using the following command:\n - dietpi-nordvpn"

		fi

		software_id=92 # Let's Encrypt
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				G_AGI certbot python3-certbot-apache

			elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				G_AGI certbot python3-certbot-nginx

			else

				G_AGI certbot

			fi

		fi

		software_id=60 # WiFi Hotspot
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='hostapd isc-dhcp-server iptables libnl-3-200'

			# RTL8188C* device if RTL package is available
			if (( $WIFIHOTSPOT_RTL8188C_DEVICE && $WIFIHOTSPOT_RTL8188C_PACKAGE )); then

				G_AGI ${DEPS_LIST/hostapd/hostapt-realtek}

			# Else use our compiled binaries (for all but x86_64)
			elif (( $WIFIHOTSPOT_RTL8188C_DEVICE && $G_HW_ARCH < 4 )); then

				Download_Install 'https://dietpi.com/downloads/binaries/all/hostapd_2.5_all.zip'

				# Which binary to install
				local filename_hostapd=''
				local filename_hostapd_cli=''

				# ARMv6
				if (( $G_HW_ARCH == 1 )); then

					filename_hostapd='hostapd-rtl8188c-armv6'
					filename_hostapd_cli='hostapd_cli-armv6'

				# ARMv7
				elif (( $G_HW_ARCH == 2 )); then

					filename_hostapd='hostapd-rtl8188c-armv7'
					filename_hostapd_cli='hostapd_cli-armv7'

				# ARMv8
				elif (( $G_HW_ARCH == 3 )); then

					filename_hostapd='hostapd-rtl8188c-arm64'
					filename_hostapd_cli='hostapd_cli-arm64'

				fi

				mv "$filename_hostapd" /usr/sbin/hostapd
				mv "$filename_hostapd_cli" /usr/sbin/hostapd_cli
				chmod +x /usr/sbin/hostapd{,_cli}

				rm hostapd-*

			# In all other cases install the default package.
			# NB: Debian Stretch ships an older version then our own compiled binaries, but many device/firmware repos (RPi, Meveric, ARMbian) ship newer ones even for Stretch, thus we should not overwrite them anymore.
			else

				G_AGI $DEPS_LIST

			fi

			# Enable WiFi modules
			/DietPi/dietpi/func/dietpi-set_hardware wifimodules enable

			# Unmask hostapd service: https://github.com/MichaIng/DietPi/issues/2962
			G_RUN_CMD systemctl unmask hostapd

		fi

		software_id=61 # Tor Hotspot
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI tor

		fi

		software_id=37 # Shairport-Sync
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS="https://dietpi.com/downloads/binaries/all/shairport-sync_3.2.2_$G_HW_ARCH_DESCRIPTION.7z"

			# This occured on C2: shairport-sync : Depends: libpopt-dev but it is not installed
			#G_AGI libpopt-dev
			DEPS_LIST='openssl libsoxr0 libavahi-client3 libtool libconfig9 libpopt0 libdaemon0'
			Download_Install "$INSTALL_URL_ADDRESS" /

		fi

		software_id=48 # Pydio
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Install required PHP modules
			DEPS_LIST="$PHP_NAME-apcu $PHP_NAME-gd $PHP_NAME-intl $PHP_NAME-mbstring $PHP_NAME-opcache $PHP_NAME-xml"

			# Skip install, if already present
			if [[ -d /var/www/pydio ]]; then

				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} install dir \"/var/www/pydio\" already exists. Download and install steps will be skipped.
 - Please manually backup your config files+data, remove the install dir and rerun \"dietpi-software (re)install $software_id\" if you need to reinstall.
 - If you want to update the ${aSOFTWARE_NAME[$software_id]} instance, please use the internal updater from WebUI."
				G_AGI $DEPS_LIST
				unset DEPS_LIST

			else

				Download_Install 'https://download.pydio.com/pub/core/ci/pydio-latest.tar.gz' /var/www
				mv /var/www/pydio-latest /var/www/pydio

			fi

		fi

		software_id=36 # SqueezeLite
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='squeezelite'
			Download_Install 'https://dietpi.com/downloads/binaries/all/squeezelite-1.8_all.7z' /usr/bin

			rm /usr/bin/squeezelite

			local target_binary=''

			if (( $G_HW_ARCH == 1 )); then

				target_binary='squeezelite_armv6'

			# - ARMv7
			elif (( $G_HW_ARCH == 2 )); then

				target_binary='squeezelite_armv7'

			# - ARM64
			elif (( $G_HW_ARCH == 3 )); then

				target_binary='squeezelite_arm64'

			# - x86_64
			elif (( $G_HW_ARCH == 10 )); then

				target_binary='squeezelite_amd64'

			fi

			ln -sf /usr/bin/"$target_binary" /usr/bin/squeezelite
			chmod +x /usr/bin/squeezelite

		fi

		software_id=99 # EmonHub
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='minicom python-serial python-configobj'
			Download_Install 'https://github.com/Fourdee/emonhub/archive/emon-pi.zip'

			pip install paho-mqtt pydispatcher

			# Move everything to /etc/emonhub
			rm -R /etc/emonhub
			mv emonhub-* /etc/emonhub

		fi

		software_id=66 # RPi Monitor
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			Download_Install 'https://github.com/XavierBerger/RPi-Monitor-deb/raw/master/packages/rpimonitor_2.12-r0_all.deb'

		fi

		software_id=65 # Netdata
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# No package available on Stretch
			if (( $G_DISTRO < 5 )); then

				# For ARMv6 RPi use our self-compiled package
				if (( $G_HW_ARCH == 1 )); then

					DEPS_LIST='zlib1g-dev'
					Download_Install 'https://dietpi.com/downloads/binaries/all/netdata_1.11.1-1_armv6l.deb'

				# Else use the packages from Debian Stretch backports snapshot, that were removed recently, hosted now on dietpi.com
				else

					Download_Install "https://dietpi.com/downloads/binaries/stretch/netdata_$G_HW_ARCH_DESCRIPTION.7z"
					dpkg --force-hold,confdef,confold -i netdata{-core,-plugins-bash,-web,}_*.deb
					G_AGF
					rm netdata*

				fi

			else

				G_AGI netdata

			fi

		fi

		software_id=57 # BaiKal
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Pre-reqs: https://github.com/sabre-io/Baikal/wiki/Baïkal-dependencies
			DEPS_LIST="$PHP_NAME-xml $PHP_NAME-mbstring $PHP_NAME-mysql"

			Download_Install 'https://github.com/fruux/Baikal/archive/master.zip'
			# Reinstall: http://sabre.io/baikal/upgrade/
			if [[ -d '/var/www/baikal' ]]; then

				cp -a /var/www/baikal/Specific/. Baikal-master/Specific/
				rm -R /var/www/baikal

			fi
			mv Baikal-master /var/www/baikal

		fi

		software_id=43 # Mumble Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI mumble-server

		fi

		software_id=41 # Emby Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://api.github.com/repos/MediaBrowser/Emby.Releases/releases/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# ARMv7
			local arch='armhf'

			# ARMv8
			if (( $G_HW_ARCH == 3 )); then

				arch='arm64'

			# x86_64
			elif (( $G_HW_ARCH == 10 )); then

				arch='amd64'

			fi

			local fallback_url="https://github.com/MediaBrowser/Emby.Releases/releases/download/4.0.2.0/emby-server-deb_4.0.2.0_$arch.deb"
			no_check_url=1 Download_Install "$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 "browser_download_url.*emby-server-deb_.*_$arch\.deb" | cut -d \" -f 4)"

			unset arch

		fi

		software_id=42 # Plex Media Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Apply APT key
			INSTALL_URL_ADDRESS='https://downloads.plex.tv/plex-keys/PlexSign.key'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"
			curl -sSL "$INSTALL_URL_ADDRESS" | apt-key add -

			# Apply APT repo
			echo 'deb https://downloads.plex.tv/repo/deb/ public main' > /etc/apt/sources.list.d/plexmediaserver.list

			# Update APT lists
			G_AGUP

			# Install PMS
			G_AGI plexmediaserver

		fi

		software_id=52 # Cuberite
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# x86_64
			if (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS='https://builds.cuberite.org/job/Cuberite%20Linux%20x64%20Master/lastSuccessfulBuild/artifact/Cuberite.tar.gz'

			# 32bit ARM
			elif (( $G_HW_ARCH == 1 || $G_HW_ARCH == 2 )); then

				INSTALL_URL_ADDRESS='https://builds.cuberite.org/job/Cuberite%20Linux%20raspi-armhf%20Master/lastSuccessfulBuild/artifact/Cuberite.tar.gz'

			fi

			Download_Install "$INSTALL_URL_ADDRESS" $G_FP_DIETPI_USERDATA/cubrite

			# - Move everything into base directory (cuberite)
			mv $G_FP_DIETPI_USERDATA/cubrite/Server/* $G_FP_DIETPI_USERDATA/cubrite/
			rm -R $G_FP_DIETPI_USERDATA/cubrite/Server

		fi

		software_id=53 # MineOS
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Check folder is online
			INSTALL_URL_ADDRESS='https://github.com/hexparrot/mineos-node.git'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# Pre-reqs
			G_AGI python python3 supervisor rdiff-backup screen rsync

			mkdir -p $G_FP_DIETPI_USERDATA/mineos
			cd $G_FP_DIETPI_USERDATA/mineos
			git clone "$INSTALL_URL_ADDRESS" minecraft

			cd minecraft
			git config core.filemode false
			chmod +x service.js mineos_console.js generate-sslcert.sh webui.js

			# Install Node 8, as MineOS is currently not compatible with Node 10: https://github.com/MichaIng/DietPi/issues/1880
			npm i -g --unsafe-perm n
			# - On ARMv8 explicitly add arch info, since it is not recognized by "n": https://github.com/MichaIng/DietPi/issues/1880#issuecomment-464097174
			local arch=''
			(( $G_HW_ARCH == 3 )) && arch='-a arm64'
			n $arch 8

			npm i --unsafe-perm

			cd /tmp/$G_PROGRAM_NAME

		fi

		software_id=49 # Gogs
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# ARMv6: No pre-compiled binaries available, thus we use our own: https://github.com/gogs/gogs/releases
			if (( $G_HW_ARCH == 1 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/gogs_armv6.zip'

			# Else install latest binaries from GitHub
			else

				# ARMv7
				local file='raspi2_armv6.zip'
				local fallback_url='https://github.com/gogs/gogs/releases/download/v0.11.86/raspi2_armv6.zip'

				# x86_64
				if (( $G_HW_ARCH == 10 )); then

					file='linux_amd64.tar.gz'
					fallback_url='https://github.com/gogs/gogs/releases/download/v0.11.86/linux_amd64.tar.gz'

				fi

				G_CHECK_URL 'https://api.github.com/repos/gogs/gogs/releases/latest'
				INSTALL_URL_ADDRESS=$(curl -s 'https://api.github.com/repos/gogs/gogs/releases/latest' | grep -m1 "browser_download_url.*$file" | cut -d \" -f 4)
				local no_check_url=1 # G_CHECK_URL faces 403

			fi

			Download_Install "$INSTALL_URL_ADDRESS"

			# Remove old install dir, but preserve existing configs
			if [[ -d '/etc/gogs' ]]; then

				[[ -d '/etc/gogs/custom' ]] && mv /etc/gogs/custom gogs
				mv /etc/gogs/.??* gogs # dot files = SSH and Git user configs
				rm -R /etc/gogs

			fi

			mv gogs /etc/gogs

		fi

		software_id=46 # qBitTorrent
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI qbittorrent-nox

		fi

		software_id=107 # rTorrent
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='rtorrent mediainfo'
			# On Buster, no "screen" is required to run rTorrent as daemon: https://github.com/rakshasa/rtorrent/wiki/Daemon_Mode
			(( $G_DISTRO < 5 )) && DEPS_LIST+=' screen'

			# Install ruTorrent: Web UI for rTorrent
			# - Get current version string
			INSTALL_URL_ADDRESS='https://api.github.com/repos/Novik/ruTorrent/releases/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"
			local version_string=$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 '^[[:blank:]]*"tag_name":' | cut -d \" -f 4)

			Download_Install "https://github.com/Novik/ruTorrent/archive/$version_string.tar.gz"

			# - Reinstall
			if [[ -d /var/www/rutorrent ]]; then

				# - Backup known config files
				G_BACKUP_FP /var/www/rutorrent/conf/config.php
				G_BACKUP_FP /var/www/rutorrent/conf/access.ini
				G_BACKUP_FP /var/www/rutorrent/conf/plugins.ini

				# - Merge new install into old to preserve e.g. 3rd party plugins
				cp -a ruTorrent-*/. /var/www/rutorrent/
				rm -R ruTorrent-*

			# - Fresh install
			else

				mv ruTorrent-* /var/www/rutorrent

			fi

		fi

		software_id=132 # Aria2
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			G_AGI aria2

			# Web UI: Settings are stored client-wise, web UI files are never written by webserver. Thus root:root 022 permissions existing dir removal on reinstall can be done.
			Download_Install 'https://github.com/ziahamza/webui-aria2/archive/master.zip'
			[[ -d '/var/www/aria2' ]] && rm -R /var/www/aria2
			mv webui-aria2-master /var/www/aria2

		fi

		software_id=116 # Medusa
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='mediainfo python3'

			if [[ -d $G_FP_DIETPI_USERDATA/medusa ]]; then

				G_AGI $DEPS_LIST
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} install dir \"$G_FP_DIETPI_USERDATA/medusa\" already exists. Download and install steps will be skipped.
 - If you want to update ${aSOFTWARE_NAME[$software_id]}, please use the internal updater from WebUI.
 - If you need to reinstall (e.g. broken instance), please manually backup your config files+data, remove the install dir and rerun \"dietpi-software (re)install $software_id\"."

			else

				Download_Install 'https://github.com/pymedusa/Medusa/archive/master.zip' $G_FP_DIETPI_USERDATA
				mv $G_FP_DIETPI_USERDATA/Medusa-master $G_FP_DIETPI_USERDATA/medusa

			fi

		fi

		software_id=50 # Syncthing
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			if [[ -d '/etc/syncthing' ]]; then

				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} install dir \"/etc/syncthing\" already exists. Download and install steps will be skipped.
 - If you want to update ${aSOFTWARE_NAME[$software_id]}, please use the internal updater from WebUI.
 - if you need to reinstall (e.g. broken instance), please manually backup your config files+data, remove the install dir \"/etc/syncthing\" and rerun \"dietpi-software (re)install $software_id\"."

			else

				INSTALL_URL_ADDRESS='https://api.github.com/repos/syncthing/syncthing/releases/latest'
				G_CHECK_URL "$INSTALL_URL_ADDRESS"

				# - armv6+
				if (( $G_HW_ARCH == 1 || $G_HW_ARCH == 2 )); then

					local arch='arm'

				# - arm64
				elif (( $G_HW_ARCH == 3 )); then

					local arch='arm64'

				# - x86_64
				elif (( $G_HW_ARCH == 10 )); then

					local arch='amd64'

				fi

				no_check_url=1 Download_Install "$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 "browser_download_url.*linux-$arch-v[0-9.]*tar\.gz" | cut -d \" -f 4)" /etc
				mv /etc/syncthing-* /etc/syncthing

			fi

		fi

		software_id=134 # Tonido
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			### Pre-reqs
			DEPS_LIST='libfontconfig1'
			## libjpeg8, libpng12
			# https://github.com/MichaIng/DietPi/issues/1428#issuecomment-361099496
			# - armv6/7
			if (( $G_HW_ARCH == 1 || $G_HW_ARCH == 2 )); then

				INSTALL_URL_ADDRESS1='https://dietpi.com/downloads/binaries/all/libjpeg8_8d1-2_armhf.deb'
				INSTALL_URL_ADDRESS2='https://dietpi.com/downloads/binaries/all/libpng12-0_1.2.50-2+deb8u3_armhf.deb'
				INSTALL_URL_ADDRESS3='http://patch.codelathe.com/tonido/live/installer/armv6l-rpi/tonido.tar.gz'

			# - x86_64
			elif (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS1='https://dietpi.com/downloads/binaries/all/libjpeg8_8d1-2_amd64.deb'
				INSTALL_URL_ADDRESS2='https://dietpi.com/downloads/binaries/all/libpng12-0_1.2.50-2+deb8u3_amd64.deb' || DEPS_LIST+=' libpng12-0'
				INSTALL_URL_ADDRESS3='https://www.tonido.com/download.php?tonido64.tar.gz'

			fi

			Download_Install "$INSTALL_URL_ADDRESS1"
			[[ $INSTALL_URL_ADDRESS2 ]] && no_check_url=1 Download_Install "$INSTALL_URL_ADDRESS2"
			no_check_url=1 Download_Install "$INSTALL_URL_ADDRESS3" $G_FP_DIETPI_USERDATA/tonido

			unset INSTALL_URL_ADDRESS1 INSTALL_URL_ADDRESS2 INSTALL_URL_ADDRESS3

		fi

		software_id=113 # Chromium
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Pre-reqs
			G_AG_CHECK_INSTALL_PREREQ lsb-release

			if (( $G_HW_MODEL < 10 )); then

				G_AGI chromium-browser

			else

				G_AGI chromium

			fi

		fi

		software_id=136 # MotionEye
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# - Prereqs + Motion
			G_AGI v4l-utils python python-dev curl libssl-dev libcurl4-openssl-dev libjpeg-dev zlib1g-dev motion

			# - Motioneye
			pip install motioneye

		fi

		software_id=137 # CloudPrint
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI cloudprint-service

		fi

		software_id=138 # VirtualHere
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://virtualhere.com/sites/default/files/usbserver/vhusbd'

			# ARMv6/7
			if (( $G_HW_ARCH == 1 || $G_HW_ARCH == 2 )); then

				INSTALL_URL_ADDRESS+='arm'

			# ARMv8
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS+='arm64'

			# x86_64
			elif (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS+='x86_64'

			fi

			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			mkdir -p /etc/vhusbd
			wget "$INSTALL_URL_ADDRESS" -O /etc/vhusbd/vhusbd
			chmod +x /etc/vhusbd/vhusbd

		fi

		software_id=139 # SABnzbd
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing # https://sabnzbd.org/wiki/installation/install-off-modules

			# Pre-reqs
			DEPS_LIST='par2 p7zip-full'
			# - Pre-compiling required on ARM
			(( $G_HW_ARCH < 10 )) && DEPS_LIST+=' libffi-dev libssl-dev'

			Download_Install 'https://github.com/sabnzbd/sabnzbd/archive/master.zip'

			# Clear old install dir (in case of reinstall)
			if [[ -d '/etc/sabnzbd' ]]; then

				# - Preserve old config file
				[[ -f '/etc/sabnzbd/sabnzbd.ini' ]] && mv /etc/sabnzbd/sabnzbd.ini sabnzbd-master/
				rm -R /etc/sabnzbd

			fi

			# Install new files
			mv sabnzbd-master /etc/sabnzbd

			# Required Python modules
			pip install cheetah cryptography sabyenc

		fi

		software_id=141 # Spotify Connect Web
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://github.com/Fornoth/spotify-connect-web/releases' # Full path fails wget spider test...
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			no_check_url=1 Download_Install "$INSTALL_URL_ADDRESS/download/0.0.4-alpha/spotify-connect-web_0.0.4-alpha.tar.gz" $G_FP_DIETPI_USERDATA

		fi

		software_id=142 # CouchPotato
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			DEPS_LIST='libffi-dev libssl-dev python-lxml python3-lxml'
			Download_Install 'https://github.com/CouchPotato/CouchPotatoServer/archive/master.zip'

			[[ -d /etc/couchpotato ]] && rm -R /etc/couchpotato
			mv CouchPotato* /etc/couchpotato

			pip install --upgrade pyopenssl

		fi

		software_id=143 # Koel
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Needed PHP modules, (re)install to be failsafe: https://koel.phanan.net/docs/#/?id=server, https://laravel.com/docs/5.6/installation#server-requirements
			DEPS_LIST="python $PHP_NAME-json $PHP_NAME-mbstring $PHP_NAME-xml"

			Download_Install 'https://github.com/phanan/koel/archive/v3.7.2.zip'
			mv koel-* $G_FP_DIETPI_USERDATA/koel

			# Install pre-req yarn and "n" to downgrade to Node 8, as Node 10 is not (yet) compatible with Koel build.
			npm i -g --unsafe-perm yarn n
			# - On ARMv8 explicitly add arch info, since it is not recognized by "n": https://github.com/MichaIng/DietPi/issues/1880#issuecomment-464097174
			local arch=''
			(( $G_HW_ARCH == 3 )) && arch='-a arm64'
			n $arch 8

			# Download and install Composer:
			php -r "readfile('https://getcomposer.org/installer');" > composer-setup.php
			php composer-setup.php
			php -r "unlink('composer-setup.php');"
			mv composer.phar /usr/local/bin/composer
			rm composer-setup.php &> /dev/null

			cd $G_FP_DIETPI_USERDATA/koel
			composer install
			cd /tmp/$G_PROGRAM_NAME

		fi

		software_id=144 # Sonarr
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# ARMv8 binary install: https://github.com/MichaIng/DietPi/issues/1502
			if (( $G_HW_ARCH == 3 )); then

				DEPS_LIST='mediainfo'
				Download_Install 'https://download.sonarr.tv/v2/develop/mono/NzbDrone.develop.tar.gz' /opt

			# Repo install
			else

				apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0xA236C58F409091A18ACA53CBEBFF6B99D9B78493
				echo 'deb https://apt.sonarr.tv/ develop main' > /etc/apt/sources.list.d/sonarr.list
				G_AGUP
				G_AGI nzbdrone

			fi

		fi

		software_id=145 # Radarr
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://api.github.com/repos/Radarr/Radarr/releases'
			G_CHECK_URL "$INSTALL_URL_ADDRESS" # full filepath below, returns --spider error :(
			INSTALL_URL_ADDRESS=$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 'browser_download_url.*linux\.tar\.gz' | cut -d \" -f 4)

			DEPS_LIST='mediainfo'
			no_check_url=1 Download_Install "$INSTALL_URL_ADDRESS" /opt

		fi

		software_id=106 # Lidarr
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://api.github.com/repos/Lidarr/Lidarr/releases'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"
			INSTALL_URL_ADDRESS=$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 'browser_download_url.*linux\.tar\.gz' | cut -d \" -f 4)

			DEPS_LIST='mediainfo'
			no_check_url=1 Download_Install "$INSTALL_URL_ADDRESS" /opt

		fi

		software_id=146 # PlexPy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			if [[ -d '/opt/plexpy' ]]; then

				G_AGI python python-setuptools
				G_DIETPI-NOTIFY 2 "${aSOFTWARE_NAME[$software_id]} install dir \"/opt/plexpy\" already exists. Download and install steps will be skipped.
 - If you want to update ${aSOFTWARE_NAME[$software_id]}, please use the internal updater from WebUI.
 - if you need to reinstall (e.g. broken instance), please manually backup your config files+data, remove the install dir \"/opt/plexpy\" and rerun \"dietpi-software (re)install $software_id\"."

			else

				INSTALL_URL_ADDRESS='https://github.com/JonnyWong16/plexpy.git'
				G_CHECK_URL "$INSTALL_URL_ADDRESS"
				G_THREAD_START git clone --depth=1 "$INSTALL_URL_ADDRESS"
				G_AGI python python-setuptools
				G_THREAD_WAIT
				mv plexpy /opt/

			fi

		fi

		software_id=147 # Jackett
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Grab latest version download link
			INSTALL_URL_ADDRESS='https://api.github.com/repos/Jackett/Jackett/releases/latest'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# - ARMv6: Requires mono: https://github.com/Jackett/Jackett#installation-on-linux-armv6-or-below
			INSTALL_URL_ADDRESS=$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 'browser_download_url.*Jackett\.Binaries\.Mono\.tar\.gz' | cut -d \" -f 4)
			fallback_url='https://github.com/Jackett/Jackett/releases/download/v0.11.295/Jackett.Binaries.Mono.tar.gz'

			# - ARMv7
			if (( $G_HW_ARCH == 2 )); then

				INSTALL_URL_ADDRESS=${INSTALL_URL_ADDRESS/Mono/LinuxARM32}
				fallback_url=${fallback_url/Mono/LinuxARM32}

			# - ARMv8
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS=${INSTALL_URL_ADDRESS/Mono/LinuxARM64}
				fallback_url=${fallback_url/Mono/LinuxARM64}

			# - x86_64
			elif (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS=${INSTALL_URL_ADDRESS/Mono/LinuxAMDx64}
				fallback_url=${fallback_url/Mono/LinuxAMDx64}

			fi

			# Standalone version dependencies: https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore30#linux-distribution-dependencies
			if (( $G_HW_ARCH != 1 )); then

				DEPS_LIST='liblttng-ust0'
				if (( $G_DISTRO > 4 )); then

					DEPS_LIST+=' libicu63'

				else

					DEPS_LIST+=' libicu57'

				fi

			fi

			# Download: wget --spider/curl -LI return 403
			no_check_url=1 Download_Install "$INSTALL_URL_ADDRESS" /opt

			# Move existing configs to unpacked install dir
			[[ -d '/opt/jackett/Jackett' ]] && mv /opt/jackett/Jackett /opt/Jackett/
			[[ -d '/opt/jackett/.mono' ]] && mv /opt/jackett/.mono /opt/Jackett/

			# Remove existing install dir
			[[ -d '/opt/jackett' ]] && rm -R /opt/jackett

			# Move unpacked install dir in place
			mv /opt/Jackett /opt/jackett

		fi

		software_id=149 # NZBget
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://nzbget.net'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			INSTALL_URL_ADDRESS+='/download/nzbget-latest-bin-linux.run'

			wget "$INSTALL_URL_ADDRESS" -O package.run
			mkdir -p $G_FP_DIETPI_USERDATA/nzbget
			sh package.run --destdir $G_FP_DIETPI_USERDATA/nzbget
			rm package.run

		fi

		software_id=155 # HTPC Manager
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://github.com/Hellowlol/HTPC-Manager.git'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			G_THREAD_START git clone --depth=1 "$INSTALL_URL_ADDRESS"

			# Pre-reqs
			# - psutil for system stats
			# - Python Image library: https://htpc.io/installation.html#linux
			pip install psutil
			G_AGI python-pil # pip install PIL fails at least on Debian Buster x86_64

			G_THREAD_WAIT

			# Move HTPC Manager to a 'better' location
			mkdir -p $G_FP_DIETPI_USERDATA/htpc-manager
			cp -a HTPC-Manager/* $G_FP_DIETPI_USERDATA/htpc-manager/
			rm -R HTPC-Manager

		fi

		software_id=153 # OctoPrint
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://github.com/foosel/OctoPrint.git'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			G_THREAD_START git clone "$INSTALL_URL_ADDRESS"

			G_AGI libjpeg-dev

			G_THREAD_WAIT
			mv OctoPrint* $G_FP_DIETPI_USERDATA/octoprint
			cd $G_FP_DIETPI_USERDATA/octoprint

			G_DIETPI-NOTIFY 2 'OctoPrint is now installing, please be patient and do not terminate this process, it may take some time...'
			G_RUN_CMD python setup.py install

			cd /tmp/$G_PROGRAM_NAME

		fi

		software_id=154 # Roon Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing # http://kb.roonlabs.com/LinuxInstall

			DEPS_LIST='cifs-utils'

			# Skip download and install, if already existent, manual removal or internal updater can be used:
			if [[ ! -d $G_FP_DIETPI_USERDATA/roonserver ]]; then

				Download_Install 'https://download.roonlabs.com/builds/RoonServer_linuxx64.tar.bz2' $G_FP_DIETPI_USERDATA
				mv $G_FP_DIETPI_USERDATA/RoonServer $G_FP_DIETPI_USERDATA/roonserver

			else

				G_WHIP_MSG "[WARNING] Existing install found\n
The ${aSOFTWARE_NAME[$software_id]} target install directory $G_FP_DIETPI_USERDATA/roonserver already exists. This will not be overwritten.\n
If the existing instance is broken or obsolete, please manually backup config files and data, then remove this directory and rerun \"dietpi-software\".\n
If you want to update ${aSOFTWARE_NAME[$software_id]}, please use it's internal updater."

			fi

		fi

		software_id=156 # Steam
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			debconf-set-selections <<< 'steam steam/question select I AGREE'

			G_AGI steam

		fi

		software_id=158 # Minio
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Download the proper Minio executable and put it in the proper location

			# Check to see if this is a n x86 or x64 box. If so download the x86 Minio if not download 32bit ARM linux version
			if (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS='https://dl.minio.io/server/minio/release/linux-amd64/minio'

			else

				INSTALL_URL_ADDRESS='https://dl.minio.io/server/minio/release/linux-arm/minio'

			fi
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# Download executable
			[[ -d '/usr/local/bin' ]] || mkdir -p /usr/local/bin
			wget -O /usr/local/bin/minio "$INSTALL_URL_ADDRESS"
			chmod +x /usr/local/bin/minio

			# Check, Download, Install startup script
			INSTALL_URL_ADDRESS='https://github.com/minio/minio-service/raw/master/linux-systemd/minio.service'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# Download the systemd service script
			wget -O /etc/systemd/system/minio.service "$INSTALL_URL_ADDRESS"

			# Create no login, with home directory, with group of same name, user to run Minio in
			adduser --system --group minio-user

			# Create default data directory & grant minio-user proper access
			mkdir -p $G_FP_DIETPI_USERDATA/minio-data
			chown -R minio-user:minio-user $G_FP_DIETPI_USERDATA/minio-data

		fi

		software_id=162 # Docker
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Offical installer
			INSTALL_URL_ADDRESS='https://get.docker.com'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"
			wget "$INSTALL_URL_ADDRESS" -O DockerInstall.sh
			chmod +x DockerInstall.sh
			G_ERROR_HANDLER_COMMAND='./DockerInstall.sh'
			G_ERROR_HANDLER_RETRY=1
			while (( $G_ERROR_HANDLER_RETRY ))
			do

				./DockerInstall.sh
				G_ERROR_HANDLER_EXITCODE=$?
				G_ERROR_HANDLER

			done
			rm DockerInstall.sh

		fi

		software_id=161 # FuguHub
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			if (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS='https://FuguHub.com/install/FuguHub.linux.install'

			else

				INSTALL_URL_ADDRESS='https://FuguHub.com/releases/raspberrypi/install.sh'

			fi

			optional_cmd_inputs='--no-check-certificate' G_CHECK_URL "$INSTALL_URL_ADDRESS"

			wget --no-check-certificate "$INSTALL_URL_ADDRESS" -O FHinstall.sh
			chmod +x FHinstall.sh
			./FHinstall.sh
			rm FHinstall.sh
			wget --no-check-certificate https://fuguhub.com/box.zip -O /home/bd/applications/box.zip

		fi

		software_id=164 # Nukkit
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master/lastSuccessfulBuild/artifact/target/nukkit-1.0-SNAPSHOT.jar'

			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			mkdir -p /usr/local/bin/nukkit
			wget "$INSTALL_URL_ADDRESS" -O /usr/local/bin/nukkit/nukkit.jar

		fi

		software_id=165 # Gitea
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://dl.gitea.io/gitea/1.9.4/gitea-1.9.4-'

			# armv6
			if (( $G_HW_ARCH == 1 )); then

				INSTALL_URL_ADDRESS+='linux-arm-6'

			# armv7
			elif (( $G_HW_ARCH == 2 )); then

				INSTALL_URL_ADDRESS+='linux-arm-6' # Workaround since ARMv7 binaries are missing/fail on v1.8.X: https://github.com/MichaIng/DietPi/issues/2959

			# armv8
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS+='linux-arm64'

			# x86_64
			elif (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS+='linux-amd64'

			fi

			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# Data storage / user data
			mkdir -p $G_FP_DIETPI_USERDATA/gitea/gitea-repositories

			wget "$INSTALL_URL_ADDRESS" -O $G_FP_DIETPI_USERDATA/gitea/gitea
			chmod +x $G_FP_DIETPI_USERDATA/gitea/gitea

		fi

		software_id=159 # Allo Web Interface (160 for quick reinstall)
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[160]} == 1 )); then

			Banner_Installing
			Download_Install 'https://dietpi.com/downloads/binaries/all/allo_web_interface_v13.7z' /var/www

		fi

		software_id=163 # GMediaRender
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Stretch: Use our updated package
			if (( $G_DISTRO < 5 )); then

				INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/gmrender_1_'
				if (( $G_HW_ARCH == 10 )); then

					INSTALL_URL_ADDRESS+='amd64.deb'

				elif (( $G_HW_ARCH == 3 )); then

					INSTALL_URL_ADDRESS+='arm64.deb'

				elif (( $G_HW_ARCH == 2 )); then

					INSTALL_URL_ADDRESS+='armv7.deb'

				elif (( $G_HW_ARCH == 1 )); then

					INSTALL_URL_ADDRESS+='armv6.deb'

				fi

				DEPS_LIST='libupnp6 gstreamer1.0-alsa gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly'
				Download_Install "$INSTALL_URL_ADDRESS"

			# Buster: Use the up-to-date APT repo package
			else

				G_AGI gmediarender gstreamer1.0-alsa gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly
				# - Disable init.d service, use our systemd unit instead
				systemctl disable gmediarender

			fi

		fi

		software_id=166 # AudioPhonics Pi-SPC
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Required for systemd-logind, used by dtoverlay=gpio-shutdown,gpio_pin=22,active_low=0
			#	dtoverlay=gpio-poweroff,gpiopin=17
			G_AGI dbus

		fi

		software_id=167 # Raspotify
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing # https://dtcooper.github.io/raspotify/#hard-installation

			INSTALL_URL_ADDRESS='https://dtcooper.github.io/raspotify/key.asc'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			curl -sSL "$INSTALL_URL_ADDRESS" | apt-key add -
			echo 'deb https://dtcooper.github.io/raspotify/ raspotify main' > /etc/apt/sources.list.d/raspotify.list
			G_AGUP

			G_AGI raspotify

		fi

		software_id=169 # Google AIY
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://github.com/google/aiyprojects-raspbian.git'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			git clone -b voicekit "$INSTALL_URL_ADDRESS" $G_FP_DIETPI_USERDATA/voice-recognizer-raspi
			cd $G_FP_DIETPI_USERDATA/voice-recognizer-raspi

			pip3 install --upgrade pip virtualenv
			virtualenv --system-site-packages -p python3 env
			env/bin/pip install -r requirements.txt

			#??? ARMv7 only
			(( $G_HW_ARCH == 2 )) && env/bin/pip install google-assistant-library==0.0.3

			# - Services
			sed -i "s#/home/pi#$G_FP_DIETPI_USERDATA#g" systemd/voice-recognizer.service
			sed -i '/^User=/c\User=dietpi' systemd/voice-recognizer.service

			cp systemd/voice-recognizer.service /etc/systemd/system/
			cp systemd/alsa-init.service /etc/systemd/system/
			#cp systemd/ntpdate.service /etc/systemd/system/

			source env/bin/activate

			# - Enable default app for service start
			cp src/assistant_library_with_button_demo.py src/main.py

			cd /tmp/$G_PROGRAM_NAME

		fi

		software_id=176 # Mycroft AI
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Git clone to DietPi userdata
			cd $G_FP_DIETPI_USERDATA
			if [[ ! -d 'mycroft-core/.git' ]]; then

				[[ -d 'mycroft-core' ]] && rm -R mycroft-core
				G_THREAD_START git clone -b master --depth 1 https://github.com/MycroftAI/mycroft-core.git

			fi

			# Pre-reqs
			DEPS_LIST='vorbis-tools'

			# Create global config beforehand to reflect correct data dir and audio settings within install
			# - Overwrite existing config, user should use $G_FP_DIETPI_USERDATA/mycroft-data/.mycroft/mycroft.conf instead to override.
			dps_index=$software_id Download_Install 'mycroft.conf' /etc/mycroft/mycroft.conf

			# Create "mycroft" user with home=data dir beforehand, to have everything at right locations with right permissions directly
			local usercmd='useradd -rMU'
			getent passwd mycroft &> /dev/null && usercmd='usermod -a'
			$usercmd -G audio -d $G_FP_DIETPI_USERDATA/mycroft-data -s $(command -v nologin) mycroft
			mkdir -p $G_FP_DIETPI_USERDATA/mycroft-data
			chown -R mycroft:mycroft /etc/mycroft $G_FP_DIETPI_USERDATA/mycroft-{core,data}

			# Force skills to be placed directly into data dir
			rm -Rf /opt/mycroft
			ln -s $G_FP_DIETPI_USERDATA/mycroft-data /opt/mycroft

			# Assure 2 GiB overall memory is available
			if (( $RAM_TOTAL + $(free -m | mawk '/^Swap:/ {print $2;exit}') < 2048 )); then

				G_WHIP_MSG '[WARNING] Insufficient overall memory size\n
Mycroft AI requires at least 2 GiB memory on first start. We will now increase your swap file size to satisfy this requirement.'
				/DietPi/dietpi/func/dietpi-set_swapfile 1

			fi

			# Grant mycroft user sudo permissions which is required for dev_setup.sh and some other Mycroft scripts
			echo 'mycroft ALL=NOPASSWD: ALL' > /etc/sudoers.d/mycroft

			# Run installer as user mycroft
			cd $G_FP_DIETPI_USERDATA/mycroft-core
			sudo -u mycroft ./dev_setup.sh -sm
			cd /tmp/$G_PROGRAM_NAME

			# Chown logs dir
			chown -R mycroft:mycroft /var/log/mycroft

		fi

		software_id=86 # Roon Extension Manager
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://github.com/TheAppgineer/roon-extension-manager-packaging/raw/master/linux/setup.sh'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			wget -O setup.sh "$INSTALL_URL_ADDRESS"
			chmod +x setup.sh
			./setup.sh
			rm setup.sh

		fi

		#-------------------------------------------------------------------
		# Reset error handler (eg: for usermsg clear set in Banner_Installing)
		G_ERROR_HANDLER_RESET
		#-------------------------------------------------------------------

	}

	Install_Linux_Software(){

		local software_id=-1

		software_id=5 # ALSA
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Get chosen soundcard
			local soundcard=$(grep -m1 '^[[:blank:]]*CONFIG_SOUNDCARD=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
			soundcard=${soundcard:-none}

			# Enable defaults, if set to "none"
			if [[ $soundcard == 'none' ]]; then

				# - RPi: Onboard auto, Others: default
				(( $G_HW_MODEL < 10 )) && soundcard='rpi-bcm2835-auto' || soundcard='default'

			fi

			# Apply: Installs "alsa-utils"
			/DietPi/dietpi/func/dietpi-set_hardware soundcard "$soundcard"

		fi

		software_id=126 # LibSSL1.0.0
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# - Stretch+, libssl1.0.0 no longer available: https://github.com/MichaIng/DietPi/issues/1299
			INSTALL_URL_ADDRESS='https://dietpi.com/downloads/binaries/all/'

			# - ARMv6/7
			if (( $G_HW_ARCH == 1 || $G_HW_ARCH == 2 )); then

				INSTALL_URL_ADDRESS+='libssl1.0.0_1.0.1t-1+deb8u7_armhf.deb'

			# - ARM64
			elif (( $G_HW_ARCH == 3 )); then

				INSTALL_URL_ADDRESS+='libssl1.0.0_1.0.1t-1+deb8u7_arm64.deb'

			# - x86_64
			elif (( $G_HW_ARCH == 10 )); then

				INSTALL_URL_ADDRESS+='libssl1.0.0_1.0.1t-1+deb8u7_amd64.deb'

			fi

			DEPS_LIST='multiarch-support'
			Download_Install "$INSTALL_URL_ADDRESS"

		fi

		software_id=6 # Xserver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Assure libegl1-mesa transitional dummy package is skipped (on Stretch via backports) to avoid conflicts with 3rd party repos: https://github.com/MichaIng/DietPi/issues/1794#issuecomment-539138684
			local libegl1='libegl1'
			(( $G_DISTRO == 4 )) && libegl1+='/stretch-backports'

			# Xserver + generic Mesa OpenGL libraries and utilities
			G_AGI $libegl1 xserver-xorg xinit xcompmgr xterm dbus-x11 xfonts-base x11-xserver-utils x11-utils libgl1-mesa-dri mesa-utils mesa-utils-extra

			# Improve performance on all desktops and devices (eg: removes window lag in desktops) by limiting compositions
			dps_index=$software_id Download_Install 'xcompmgr.desktop' /etc/xdg/autostart/xcompmgr.desktop

			# Disable DPMS and all screen blanking
			dps_index=$software_id Download_Install '99-dietpi-dpms_off.conf' /etc/X11/xorg.conf.d/99-dietpi-dpms_off.conf

			# RK3399: https://github.com/rockchip-linux/rk-rootfs-build/tree/master/packages/arm64
			# - Odroid N1, RockPro64, NanoPC T4, Firefly RK3399, ROCK Pi 4
			if (( $G_HW_CPUID == 3 )); then

				# Mali-T864 driver library
				Download_Install 'https://dietpi.com/downloads/binaries/rk3399/libmali.deb'
				cd /usr/lib/aarch64-linux-gnu
				ln -sf libMali.so libEGL.so.1.1.0
				ln -sf libMali.so libEGL.so
				ln -sf libMali.so libEGL.so.1.0.0
				ln -sf libMali.so libEGL.so.1.4
				ln -sf libMali.so libGLESv2.so
				ln -sf libMali.so libGLESv2.so.2.0
				ln -sf libMali.so libGLESv2.so.2.0.0
				ln -sf libMali.so libGLESv1_CM.so
				ln -sf libMali.so libGLESv1_CM.so.1
				ln -sf libMali.so libGLESv1_CM.so.1.1
				cd /tmp/$G_PROGRAM_NAME

				# X.org packages and config
				Download_Install 'https://dietpi.com/downloads/binaries/rk3399/xserver.7z' xserver
				dpkg --force-hold,confdef,confold -i xserver/*.deb
				G_BACKUP_FP /etc/X11/xorg.conf
				dps_index=$software_id Download_Install 'xorg_rk3399.conf' /etc/X11/xorg.conf

			# Odroid C2: http://fuzon.co.uk/meveric/pool/main/s/setup-odroid/
			elif (( $G_HW_MODEL == 12 )); then

				DEPS_LIST='aml-libs-odroid mali450-odroid libump-odroid xf86-video-fbturbo-odroid'
				G_BACKUP_FP /etc/X11/xorg.conf
				dps_index=$software_id Download_Install 'xorg_c2.conf' /etc/X11/xorg.conf

			# Odroid XU4: http://fuzon.co.uk/meveric/pool/main/s/setup-odroid/
			elif (( $G_HW_MODEL == 11 )); then

				# xf86-video-armsoc-odroid creates an xorg.conf
				G_AGI firmware-samsung xf86-video-armsoc-odroid malit628-odroid

			# Pine A64
			elif (( $G_HW_MODEL == 40 )); then

				Download_Install 'https://dietpi.com/downloads/binaries/all/libump_1-1_arm64.deb'
				mv /usr/local/lib/libUMP* /usr/lib/
				Download_Install 'https://dietpi.com/downloads/binaries/all/xf86-video-fbturbo_1-1_arm64.deb'
				G_BACKUP_FP /etc/X11/xorg.conf
				dps_index=$software_id Download_Install 'xorg_pine64.conf' /etc/X11/xorg.conf

			# ASUS TB: https://github.com/rockchip-linux/rk-rootfs-build/tree/master/packages/armhf
			elif (( $G_HW_MODEL == 52 )); then

				# Mali-T760 driver library
				Download_Install 'https://dietpi.com/downloads/binaries/asus/libmali.deb'
				cd /usr/lib/arm-linux-gnueabihf
				ln -sf libMali.so libEGL.so.1.1.0
				ln -sf libMali.so libEGL.so
				ln -sf libMali.so libEGL.so.1.0.0
				ln -sf libMali.so libEGL.so.1.4
				ln -sf libMali.so libGLESv2.so
				ln -sf libMali.so libGLESv2.so.2.0
				ln -sf libMali.so libGLESv2.so.2.0.0
				ln -sf libMali.so libGLESv1_CM.so
				ln -sf libMali.so libGLESv1_CM.so.1
				ln -sf libMali.so libGLESv1_CM.so.1.1
				cd /tmp/$G_PROGRAM_NAME

				# X.org packages and config
				Download_Install 'https://dietpi.com/downloads/binaries/asus/xserver.7z' xserver
				dpkg --force-hold,confdef,confold -i xserver/*.deb
				G_BACKUP_FP /etc/X11/xorg.conf
				dps_index=$software_id Download_Install 'xorg_asustb.conf' /etc/X11/xorg.conf

			fi

		fi

		software_id=151 # Nvidia driver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			# Install + i386 OpenGL
			G_AGI nvidia-driver nvidia-xconfig libgl1-nvidia-glx:i386

		fi

		software_id=152 # Avahi-Daemon
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI avahi-daemon

		fi

		software_id=16 # Build essentials
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI build-essential make autoconf automake

		fi

		software_id=100
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI pijuice-base python-smbus i2c-tools

		fi

		software_id=17 # Git client
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI git

		fi

		software_id=4
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI vifm

		fi

		software_id=20
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI vim

		fi

		software_id=21
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI vim-tiny

		fi

		software_id=127
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI neovim

		fi

		software_id=18
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI emacs

		fi

		software_id=12
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI iperf

		fi

		software_id=3
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI mc

		fi

		software_id=19
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI jed

		fi

		software_id=10
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI iftop

		fi

		software_id=11
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI iptraf

		fi

		software_id=13
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI mtr-tiny

		fi

		software_id=14
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI nload

		fi

		software_id=15
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI tcpdump

		fi

		software_id=0
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI openssh-client

		fi

		software_id=1
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Remove Information file
			rm /mnt/samba/readme.txt &> /dev/null

			G_AGI smbclient cifs-utils

		fi

		software_id=110
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Remove information file
			[[ -f /mnt/nfs_client/readme.txt ]] && rm /mnt/nfs_client/readme.txt

			# "netbase" is needed for mounting NFSv3: https://github.com/MichaIng/DietPi/issues/1898#issuecomment-406247814
			G_AGI nfs-common netbase

		fi

		software_id=104
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Mark target SSH server choice, if not selected via menu or first run setup
			INDEX_SSHSERVER_TARGET=-1

			# Stop OpenSSH service to unbind port 22
			systemctl -q is-active ssh && systemctl stop ssh

			# On Stretch + Buster Dropbear packages have been split, install "dropbear-run" only, to have active service, but skip "dropbear-initramfs"
			# On Bullseye+ "dropbear-run" has become a transitional dummy package for "dropbear" which does not include "dropbear-initramfs" anymore.
			if (( $G_DISTRO > 5 )); then

				G_AGI dropbear

			else

				G_AGI dropbear-run

			fi

			# Enable Dropbear daemon
			G_CONFIG_INJECT 'NO_START=' 'NO_START=0' /etc/default/dropbear

			# Failsafe: Enable Dropbear service
			systemctl enable dropbear

			# Mark OpenSSH for uninstall and update choice system
			dpkg-query -s 'openssh-server' &> /dev/null && aSOFTWARE_INSTALL_STATE[105]=-1 && UNINSTALL_REQUIRED=1
			INDEX_SSHSERVER_CURRENT=-1

		fi

		software_id=105
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Mark target SSH server choice, if not selected via menu or first run setup
			INDEX_SSHSERVER_TARGET=-2

			# Stop Dropbear service to unbind port 22
			systemctl -q is-active dropbear && systemctl stop dropbear

			G_AGI openssh-server

			# SSH server package also installs client.
			aSOFTWARE_INSTALL_STATE[0]=2

			# Allow root login
			G_CONFIG_INJECT 'PermitRootLogin[[:blank:]]' 'PermitRootLogin yes' /etc/ssh/sshd_config

			# Reload SSH server now so root users can login during setup.
			systemctl reload ssh

			# Failsafe: Enable OpenSSH service
			systemctl enable ssh

			# Mark Dropbear for uninstall and update choice system
			grep -q '^dropbear[^[:blank:]]*[[:blank:]]' <<< "$(dpkg --get-selections)" && aSOFTWARE_INSTALL_STATE[104]=-1 && UNINSTALL_REQUIRED=1
			INDEX_SSHSERVER_CURRENT=-2

		fi

		software_id=103
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Install persistent tmpfs
			local tmpfs_max_size=$(grep -m1 '^[[:blank:]]*AUTO_SETUP_RAMLOG_MAXSIZE=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
			tmpfs_max_size=${tmpfs_max_size:=50}
			sed -i '/[[:blank:]]\/var\/log[[:blank:]]/d' /etc/fstab
			echo "tmpfs /var/log tmpfs defaults,size=${tmpfs_max_size}m,noatime,nodev,nosuid,mode=1777 0 0" >> /etc/fstab

			# Enable DietPi-RAMdisk
			systemctl enable dietpi-ramlog

			# To assure a cleaned mountpoint we need to start RAMlog now
			l_message='Storing /var/log metadata to disk' G_RUN_CMD /DietPi/dietpi/func/dietpi-ramlog 1
			l_message='Cleaning /var/log mountpoint' G_RUN_CMD rm -Rf /var/log/{,.??,.[^.]}*
			l_message='Mounting tmpfs to /var/log' G_RUN_CMD mount /var/log
			l_message='Restoring metadata to /var/log tmpfs' G_RUN_CMD systemctl start dietpi-ramlog

		fi

		software_id=101
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI logrotate

		fi

		software_id=102
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# Workaround for dpkg failure on 1st install if service is already running but APT not installed: https://github.com/MichaIng/DietPi/pull/2277/#issuecomment-441460925
			systemctl stop rsyslog &> /dev/null
			G_AGI rsyslog
			systemctl start rsyslog &> /dev/null

		fi

		software_id=7 # FFmpeg
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing
			G_AGI ffmpeg

		fi

		software_id=8 # Java
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			local version=8
			(( $G_DISTRO == 5 )) && version=11

			local packages="ca-certificates-java openjdk-$version-jre-headless openjdk-$version-jdk-headless"
			# Workaround for ARM install issue: https://github.com/MichaIng/DietPi/issues/2524
			apt-get install -y -qq $packages
			G_AGI $packages

		fi

		software_id=9 # Node.js
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://raw.githubusercontent.com/taaem/nodejs-linux-installer/master/node-install.sh'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			wget "$INSTALL_URL_ADDRESS"
			# ARMv6 workaround: https://github.com/MichaIng/DietPi/issues/2755
			(( $G_HW_ARCH == 1 )) && sed -i 's|nodejs.org/dist/latest/|nodejs.org/dist/latest-v11.x/|g' node-install.sh

			mkdir -p /usr/local # failsafe
			chmod +x node-install.sh
			./node-install.sh
			rm node-install.sh

		fi

		software_id=130 # Python pip
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			INSTALL_URL_ADDRESS='https://bootstrap.pypa.io/get-pip.py'
			G_CHECK_URL "$INSTALL_URL_ADDRESS"

			# - Preqs
			G_AGI python python-dev

			wget "$INSTALL_URL_ADDRESS" -O install.py
			python ./install.py
			rm install.py

			G_AGI python-pip python3-pip

		fi

		software_id=150 # Mono runtime
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing # https://www.mono-project.com/download/stable/#download-lin-debian

			apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF

			# On RPi use separate Raspbian repo: https://github.com/MichaIng/DietPi/issues/1023
			# Use Buster branch on Bullseye
			if (( $G_HW_MODEL < 10 )); then

				echo "deb https://download.mono-project.com/repo/debian/ raspbian${G_DISTRO_NAME/bullseye/buster} main" > /etc/apt/sources.list.d/mono-xamarin.list

			else

				echo "deb https://download.mono-project.com/repo/debian/ ${G_DISTRO_NAME/bullseye/buster} main" > /etc/apt/sources.list.d/mono-xamarin.list

			fi

			G_AGUP
			G_AGI mono-runtime mono-complete

			rm -f /tmp/mono* # https://github.com/MichaIng/DietPi/issues/1877#issuecomment-403856446

		fi

		software_id=157 # Home Assistant
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			local ha_user="homeassistant"
			local ha_userroot="/home/$ha_user"
			local ha_srvroot="/srv/homeassistant"
			local ha_pyenv_activation="export PATH=\"$ha_userroot/.pyenv/bin:\$PATH\"; eval \"\$(pyenv init -)\"; eval \"\$(pyenv virtualenv-init -)\""
			local ha_python_version="3.6.3"

			G_DIETPI-NOTIFY 2 "ha_user: $ha_user"
			G_DIETPI-NOTIFY 2 "ha_userroot: $ha_userroot"
			G_DIETPI-NOTIFY 2 "ha_srvroot: $ha_srvroot"
			G_DIETPI-NOTIFY 2 "ha_pyenv_activation: $ha_pyenv_activation"
			G_DIETPI-NOTIFY 2 "ha_python_version: $ha_python_version"

			# Install needed libraries
			G_AGI cmake daemon gcc nmap net-tools swig uuid-dev libc-ares-dev libgnutls28-dev libgnutlsxx28 libglib2.0-dev libudev-dev libusb-1.0-0 libssl-dev libffi-dev libbz2-dev zlib1g-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev libmariadbclient-dev

			# Setup the user account information
			adduser --system $ha_user
			addgroup $ha_user
			# This allows the dietpi user to edit the files along with HA.
			usermod -G dietpi,dialout -a $ha_user
			mkdir $ha_srvroot
			chown $ha_user:$ha_user $ha_srvroot

			# Install pyenv
			su --shell /bin/bash --command "cd $ha_userroot; curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash" $ha_user

			# Install Python which is needed for HA.
			su --shell /bin/bash --command "cd $ha_userroot; $ha_pyenv_activation; pyenv install $ha_python_version" $ha_user

			# Make the virtual environment.
			su --shell /bin/bash --command "cd $ha_srvroot; $ha_pyenv_activation; pyenv virtualenv $ha_python_version homeassistant-$ha_python_version" $ha_user
			su --shell /bin/bash --command "cd $ha_srvroot; $ha_pyenv_activation; pyenv local homeassistant-$ha_python_version" $ha_user
			su --shell /bin/bash --command "cd $ha_srvroot; $ha_pyenv_activation; pyenv local" $ha_user

			# Install Home Assistant and extra modules.
			su --shell /bin/bash --command "cd $ha_srvroot; $ha_pyenv_activation; pyenv activate homeassistant-$ha_python_version; pip3 install colorlog PyMySQL mysqlclient" $ha_user
			su --shell /bin/bash --command "cd $ha_srvroot; $ha_pyenv_activation; pyenv activate homeassistant-$ha_python_version; pip3 install --upgrade homeassistant" $ha_user

			# Generate the scripts to launch HA using pyenv.
			echo '#!/bin/bash' > $ha_srvroot/homeassistant-start.sh
			echo "cd $ha_srvroot" >> $ha_srvroot/homeassistant-start.sh
			echo "$ha_pyenv_activation" >> $ha_srvroot/homeassistant-start.sh
			echo "pyenv activate homeassistant-$ha_python_version" >> $ha_srvroot/homeassistant-start.sh
			echo "hass -c \"$ha_userroot/.homeassistant\"" >> $ha_srvroot/homeassistant-start.sh
			#su --shell /bin/bash --command "/srv/homeassistant/homeassistant-start.sh" homeassistant
			chmod +x /srv/homeassistant/homeassistant-start.sh

		fi

		software_id=170 # UnRAR
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Installing

			# On Raspbian, only "unrar-free" is available in repos, but does not support all rar formats, thus we use "unrar" [non-free] from Debian repo
			if (( $G_HW_MODEL < 10 )); then

				Download_Install "https://dietpi.com/downloads/binaries/rpi/unrar-armhf-$G_DISTRO_NAME.deb"

			else

				G_AGI unrar

			fi

		fi

		#-------------------------------------------------------------------
		# Reset error handler (eg: for usermsg clear set in Banner_Installing)
		G_ERROR_HANDLER_RESET
		#-------------------------------------------------------------------

	}

	Apply_SSHServer_Choices(){

		# Work out which SSH server needs installing from IDs (if any)
		# Work out which SSH server needs removing (if any)
		if (( $INDEX_SSHSERVER_TARGET != $INDEX_SSHSERVER_CURRENT )); then

			# - No SSH server
			if (( $INDEX_SSHSERVER_TARGET == 0 )); then

				# Check currently installed SSH servers via "dpkg --get-selections" to be failsafe
				local dpkg_out=$(dpkg --get-selections)

				grep -q '^dropbear[^[:blank:]]*[[:blank:]]' <<< "$dpkg_out" && aSOFTWARE_INSTALL_STATE[104]=-1 && UNINSTALL_REQUIRED=1
				grep -q '^openssh-server[[:blank:]]' <<< "$dpkg_out" && aSOFTWARE_INSTALL_STATE[105]=-1 && UNINSTALL_REQUIRED=1

			# - Dropbear
			elif (( $INDEX_SSHSERVER_TARGET == -1 )); then

				aSOFTWARE_INSTALL_STATE[104]=1

			# - OpenSSH
			elif (( $INDEX_SSHSERVER_TARGET == -2 )); then

				aSOFTWARE_INSTALL_STATE[105]=1

			fi

		fi

	}

	Apply_FileServer_Choices(){

		# Work out which File Server needs installing from IDs (if any)
		# Work out which File server needs removing (if any)
		if (( $INDEX_FILESERVER_TARGET != $INDEX_FILESERVER_CURRENT )); then

			# Run uninstall of old file servers, after install loop
			UNINSTALL_REQUIRED=1

			# No File server
			if (( $INDEX_FILESERVER_TARGET == 0 )); then

				(( ${aSOFTWARE_INSTALL_STATE[94]} == 2 )) && aSOFTWARE_INSTALL_STATE[94]=-1
				(( ${aSOFTWARE_INSTALL_STATE[96]} == 2 )) && aSOFTWARE_INSTALL_STATE[96]=-1

			# ProFTP
			elif (( $INDEX_FILESERVER_TARGET == -1 )); then

				aSOFTWARE_INSTALL_STATE[94]=1
				(( ${aSOFTWARE_INSTALL_STATE[96]} == 2 )) && aSOFTWARE_INSTALL_STATE[96]=-1

			# Samba
			elif (( $INDEX_FILESERVER_TARGET == -2 )); then

				aSOFTWARE_INSTALL_STATE[96]=1
				(( ${aSOFTWARE_INSTALL_STATE[94]} == 2 )) && aSOFTWARE_INSTALL_STATE[94]=-1

			fi

			# Update Current SSHSERVER index
			INDEX_FILESERVER_CURRENT=$INDEX_FILESERVER_TARGET

		fi

	}

	Apply_Logging_Choices(){

		# Work out which Logging system needs installing from IDs (if any)
		# Work out which Logging system needs removing (if any)
		if (( $INDEX_LOGGING_TARGET != $INDEX_LOGGING_CURRENT )); then

			# Run uninstall of old logging systems, after install loop
			UNINSTALL_REQUIRED=1

			# None
			if (( $INDEX_LOGGING_TARGET == 0 )); then

				(( ${aSOFTWARE_INSTALL_STATE[101]} == 2 )) && aSOFTWARE_INSTALL_STATE[101]=-1
				(( ${aSOFTWARE_INSTALL_STATE[102]} == 2 )) && aSOFTWARE_INSTALL_STATE[102]=-1
				(( ${aSOFTWARE_INSTALL_STATE[103]} == 2 )) && aSOFTWARE_INSTALL_STATE[103]=-1

			# Ramlog - clear every hour
			elif (( $INDEX_LOGGING_TARGET == -1 )); then

				aSOFTWARE_INSTALL_STATE[103]=1
				(( ${aSOFTWARE_INSTALL_STATE[101]} == 2 )) && aSOFTWARE_INSTALL_STATE[101]=-1
				(( ${aSOFTWARE_INSTALL_STATE[102]} == 2 )) && aSOFTWARE_INSTALL_STATE[102]=-1

			# Ramlog - backup every 1H to /root/logfile_storage, then clear.
			elif (( $INDEX_LOGGING_TARGET == -2 )); then

				aSOFTWARE_INSTALL_STATE[103]=1
				(( ${aSOFTWARE_INSTALL_STATE[101]} == 2 )) && aSOFTWARE_INSTALL_STATE[101]=-1
				(( ${aSOFTWARE_INSTALL_STATE[102]} == 2 )) && aSOFTWARE_INSTALL_STATE[102]=-1

			# Logrotate + rsyslog - logs to disk
			elif (( $INDEX_LOGGING_TARGET == -3 )); then

				aSOFTWARE_INSTALL_STATE[101]=1
				aSOFTWARE_INSTALL_STATE[102]=1
				(( ${aSOFTWARE_INSTALL_STATE[103]} == 2 )) && aSOFTWARE_INSTALL_STATE[103]=-1

			fi

			# Update Current Logging index
			INDEX_LOGGING_CURRENT=$INDEX_LOGGING_TARGET

		fi

	}

	Apply_Webserver_Preference(){

		if (( $INDEX_WEBSERVER_TARGET != $INDEX_WEBSERVER_CURRENT )); then

			# Update Current to Target
			INDEX_WEBSERVER_CURRENT=$INDEX_WEBSERVER_TARGET

		fi

	}

	# Configure marked software titles
	Install_Apply_Configs(){

		# Copy/Set optimised Software settings.
		# Set install states to 2 (installed).

		local software_id=-1

		software_id=23 # Desktop LXDE
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Pre-create dirs
			mkdir -p /root/.config/openbox
			mkdir -p /root/.config/lxpanel/LXDE/panels
			mkdir -p /root/.config/pcmanfm/LXDE

			# - PCmanFM configs
			G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/lxde/pcmanfm.conf -O /root/.config/pcmanfm/LXDE/pcmanfm.conf
			G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/lxde/pcmanfm-desktopitems.conf -O /root/.config/pcmanfm/LXDE/desktop-items-0.conf

			# - Panel config
			G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/lxde/panel -O /root/.config/lxpanel/LXDE/panels/panel

			# - Openbox config
			G_THREAD_START wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/lxde/lxde-rc.xml -O /root/.config/openbox/lxde-rc.xml

			# - Remove Lxrandr Menu item (monitor configuration tool as we set res in dietpi-config)
			[[ -f '/usr/share/applications/lxrandr.desktop' ]] && rm /usr/share/applications/lxrandr.desktop

			# - Disable Trash
			G_CONFIG_INJECT 'use_trash=' 'use_trash=0' /etc/xdg/libfm/libfm.conf

			# - Firefox optimizations
			#	??? These keep adding new entries, ignore existing entry???
			#G_CONFIG_INJECT 'extensions.update.enabled' 'pref("extensions.update.enabled", false);' /etc/firefox-esr/firefox-esr.js
			#G_CONFIG_INJECT 'datareporting.healthreport.uploadEnabled' 'pref("datareporting.healthreport.uploadEnabled", false);' /etc/firefox-esr/firefox-esr.js
			#G_CONFIG_INJECT 'browser.cache.disk.parent_directory' 'pref("browser.cache.disk.parent_directory", "/tmp/firefox_cache");' /etc/firefox-esr/firefox-esr.js
			#G_CONFIG_INJECT 'general.smoothScroll' 'pref("general.smoothScroll", false);' /etc/firefox-esr/firefox-esr.js

			G_THREAD_WAIT

			Create_Desktop_Shared_Items

			# - file manager desktop icon
			ln -sf /usr/share/applications/pcmanfm.desktop /root/Desktop/pcmanfm.desktop

		fi

		software_id=24 # Desktop MATE
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			Create_Desktop_Shared_Items

			# File manager desktop icon
			ln -sf /usr/share/applications/caja.desktop /root/Desktop/caja.desktop

			# Odroid C2, define default pulseaudio sink: https://github.com/MichaIng/DietPi/issues/415
			if (( $G_HW_MODEL == 12 )); then

				G_CONFIG_INJECT 'set-default-sink[[:blank:]]' 'set-default-sink alsa_output.platform-odroid_hdmi.37.analog-stereo' /etc/pulse/default.pa

			fi

		fi

		software_id=173 # Desktop LXQt
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Configs
			Download_Install "https://github.com/MichaIng/DietPi/raw/$G_GITBRANCH/.conf/desktop/lxqt/lxqt-$G_DISTRO_NAME.7z" /root/.config
			# Disable trash
			# - Skip on Buster since trash seems to be implemented differently: https://github.com/MichaIng/DietPi/issues/1918#issuecomment-488085982
			(( $G_DISTRO < 5 )) && G_CONFIG_INJECT 'use_trash=' 'use_trash=0' /etc/xdg/libfm/libfm.conf

			Create_Desktop_Shared_Items

		fi

		software_id=26 # Desktop GNUStep
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration
			Create_Desktop_Shared_Items

		fi

		software_id=25 # Desktop Xfce
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration
			Create_Desktop_Shared_Items

		fi

		software_id=83 # Apache Webserver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Apache2 confs
			G_BACKUP_FP /etc/apache2/apache2.conf
			dps_index=$software_id Download_Install 'apache2.conf' /etc/apache2/apache2.conf
			cat << _EOF_ > /etc/apache2/sites-available/000-default.conf
<VirtualHost *:80>
	ServerAdmin webmaster@localhost
	DocumentRoot /var/www

	ErrorLog \${APACHE_LOG_DIR}/error.log
	#CustomLog \${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
_EOF_

			cat << _EOF_ > /etc/apache2/mods-available/mpm_event.conf
<IfModule mpm_event_module>
	StartServers		$G_HW_CPU_CORES
	MinSpareThreads		1
	MaxSpareThreads		8
	ThreadLimit		16
	ThreadsPerChild		4
	MaxRequestWorkers	50
	MaxConnectionsPerChild	0
</IfModule>
_EOF_

			cat << _EOF_ > /etc/apache2/mods-available/mpm_prefork.conf
<IfModule mpm_prefork_module>
	StartServers		$G_HW_CPU_CORES
	MinSpareServers		1
	MaxSpareServers		$G_HW_CPU_CORES
	MaxRequestWorkers	50
	MaxConnectionsPerChild	0
</IfModule>
_EOF_

			cat << _EOF_ > /etc/apache2/mods-available/mpm_worker.conf
<IfModule mpm_worker_module>
	StartServers		$G_HW_CPU_CORES
	MinSpareThreads		1
	MaxSpareThreads		8
	ThreadLimit		16
	ThreadsPerChild		4
	MaxRequestWorkers	50
	MaxConnectionsPerChild	0
</IfModule>
_EOF_

			# Use /var/www as default webroot
			[[ -f '/var/www/html/index.html' ]] && mv /var/www/html/index.html /var/www/
			rmdir --ignore-fail-on-non-empty /var/www/html

			# Change error log level
			sed -i '/LogLevel[[:blank:]]/c\	LogLevel error' /etc/apache2/sites-available/*

		fi

		software_id=85 # Nginx Webserver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Custom confs, included by sites-enabled/default within server directive, while nginx/(conf.d|sites-enabled) is included by nginx.conf outside server directive
			mkdir -p /etc/nginx/sites-dietpi

			G_BACKUP_FP /etc/nginx/nginx.conf
			dps_index=$software_id Download_Install 'nginx.conf' /etc/nginx/nginx.conf
			# Adjust socket name to PHP version
			sed -i "s#/run/php/php.*-fpm.sock#/run/php/$PHP_NAME-fpm.sock#g" /etc/nginx/nginx.conf

			# CPU core count
			sed -i "/worker_processes/c\worker_processes $G_HW_CPU_CORES;" /etc/nginx/nginx.conf

			# Default site
			dps_index=$software_id Download_Install 'nginx.default' /etc/nginx/sites-available/default

			# Nginx index page
			[[ -f '/var/www/html/index.nginx-debian.html' ]] && mv /var/www/html/index.nginx-debian.html /var/www/
			rmdir --ignore-fail-on-non-empty /var/www/html

		fi

		software_id=84 # Lighttpd Webserver
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Webroot
			sed -i '/^server.document-root/c\server.document-root        = "/var/www"' /etc/lighttpd/lighttpd.conf
			# - Move default page
			[[ -f '/var/www/html/index.lighttpd.html' ]] && mv /var/www/html/index.lighttpd.html /var/www/
			rmdir --ignore-fail-on-non-empty /var/www/html

			# Fix in case Lighttpd got updated to Buster version (on ARMv6 due to PHP7.3 libssl1.1 depedency)
			# - "create-mime.assign.pl" has been renamed to "create-mime.conf.pl"
			[[ -f '/usr/share/lighttpd/create-mime.assign.pl' ]] || sed -i 's/create-mime\.assign\.pl/create-mime.conf.pl/g' /etc/lighttpd/lighttpd.conf

			# Configure fastcgi for PHP-FPM
			cat << _EOF_ > /etc/lighttpd/conf-available/15-fastcgi-php.conf
# -*- depends: fastcgi -*-
# /usr/share/doc/lighttpd/fastcgi.txt.gz
# https://redmine.lighttpd.net/projects/lighttpd/wiki/Docs:ConfigurationOptions#mod_fastcgi-fastcgi

## Start an FastCGI server using php-fpm
fastcgi.server += ( ".php" =>
        ((
                "socket" => "/run/php/${PHP_NAME}-fpm.sock",
                "broken-scriptfilename" => "enable"
        ))
)
_EOF_
			# - Enable modules
			lighttpd-enable-mod fastcgi
			lighttpd-enable-mod fastcgi-php

		fi

		software_id=89 # PHP
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Apache2 has its own PHP module
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				# https://github.com/MichaIng/DietPi/issues/1144
				local php_service='/lib/systemd/system/apache2.service'

			# Nginx and Lighttpd use PHP-FPM
			elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 || ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				local php_service="/lib/systemd/system/${PHP_NAME}-fpm.service"

				# - PHP-FPM confs
				sed -i '/cgi.fix_pathinfo=/c\cgi.fix_pathinfo=1' "$FP_PHP_BASE_DIR"/fpm/php.ini

				# - PHP-FPM optimizations based on total cores
				sed -i "/pm.max_children = /c\pm.max_children = $(( $G_HW_CPU_CORES * 3 ))" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf
				sed -i "/pm.start_servers = /c\pm.start_servers = $G_HW_CPU_CORES" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf
				sed -i "/pm.min_spare_servers = /c\pm.min_spare_servers = $G_HW_CPU_CORES" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf
				sed -i "/pm.max_spare_servers = /c\pm.max_spare_servers = $G_HW_CPU_CORES" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf

				# - Enviroment PHP settings:
				sed -i "/env\[HOSTNAME\]/c\env\[HOSTNAME\] = \$HOSTNAME" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf
				sed -i "/env\[PATH\]/c\env\[PATH\] = /usr/local/bin:/usr/bin:/bin" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf

				#	/tmp is mounted to RAM, so use DISK (/var/tmp) instead
				sed -i "/env\[TMP\]/c\env\[TMP\] = /var/tmp" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf
				sed -i "/env\[TMPDIR\]/c\env\[TMPDIR\] = /var/tmp" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf
				sed -i "/env\[TEMP\]/c\env\[TEMP\] = /var/tmp" "$FP_PHP_BASE_DIR"/fpm/pool.d/www.conf

			fi

			# We create our own PHP mod to add DietPi specific configs.
			target_php_ini="$FP_PHP_BASE_DIR/mods-available/dietpi.ini"
			echo -e '; DietPi PHP settngs\n; priority=98' > $target_php_ini

			# - Set upload_tmp_dir to disk. Can't be /tmp as its ramdisk and limited size. Also used by ownCloud/Nextcloud uploads
			#	- If PHP uses PrivateTmp, we must not use own subfolder: https://github.com/MichaIng/DietPi/issues/1144
			if [[ -f $php_service ]] && grep -q '^[[:blank:]]*PrivateTmp=true' $php_service; then

				local upload_tmp_dir='/var/tmp'

			else

				local upload_tmp_dir='/var/tmp/php_upload_tmp'
				mkdir -p $upload_tmp_dir
				chown -R www-data:www-data $upload_tmp_dir

			fi
			G_CONFIG_INJECT 'upload_tmp_dir[[:blank:]]*=' "upload_tmp_dir=$upload_tmp_dir" $target_php_ini

			# - Max upload size
			local php_max_upload_size="$(( $(php -r 'print(PHP_INT_MAX);') / 1024 / 1024))M"
			#	- upload_max_filesize
			G_CONFIG_INJECT 'upload_max_filesize[[:blank:]]*=' "upload_max_filesize=$php_max_upload_size" $target_php_ini
			#	- post_max_size
			G_CONFIG_INJECT 'post_max_size[[:blank:]]*=' "post_max_size=$php_max_upload_size" $target_php_ini
			#	- Nginx: Set client_max_body_size to avoid 2MB upload error: https://github.com/MichaIng/DietPi/issues/546
			if (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				sed -i "/client_max_body_size/c\	client_max_body_size $php_max_upload_size;" /etc/nginx/nginx.conf

			fi

			# - Set UTF-8
			G_CONFIG_INJECT 'default_charset[[:blank:]]*=' 'default_charset="UTF-8"' $target_php_ini

			# - PHP cache settings
			local target_php_cachesize=$(( $RAM_TOTAL / 30 ))
			(( $target_php_cachesize < 10 )) && target_php_cachesize=10
			#	- OPcache
			G_CONFIG_INJECT 'opcache.enable[[:blank:]]*=' 'opcache.enable=1' $target_php_ini
			G_CONFIG_INJECT 'opcache.memory_consumption[[:blank:]]*=' "opcache.memory_consumption=$target_php_cachesize" $target_php_ini
			G_CONFIG_INJECT 'opcache.revalidate_freq[[:blank:]]*=' 'opcache.revalidate_freq=60' $target_php_ini
			#	- APCu
			G_CONFIG_INJECT 'apc.shm_size[[:blank:]]*=' "apc.shm_size=${target_php_cachesize}M" $target_php_ini
			G_CONFIG_INJECT 'apc.ttl[[:blank:]]*=' 'apc.ttl=259200' $target_php_ini # 3 days TTL

			# Enable all available PHP modules
			phpenmod $(ls $FP_PHP_BASE_DIR/mods-available | sed -n '/\.ini$/{s/\.ini$//;p}')

			# Create PHP info pages within webroot, if webserver is installed.
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 ||
				${aSOFTWARE_INSTALL_STATE[84]} > 0 ||
				${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				# PHP info page
				echo '<?php phpinfo(); ?>' > /var/www/phpinfo.php
				# OPcache info page
				G_THREAD_START wget https://raw.githubusercontent.com/rlerdorf/opcache-status/master/opcache.php -O /var/www/opcache.php
				# APCu info page
				G_THREAD_START wget https://raw.githubusercontent.com/krakjoe/apcu/master/apc.php -O /var/www/apc.php

				G_THREAD_WAIT

			fi

		fi

		software_id=88 # MariaDB Database
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			G_DIETPI-NOTIFY 2 'Assuring 4-byte support and InnoDB Barracuda file format with large prefix'
			cat << _EOF_ > /etc/mysql/mariadb.conf.d/99-dietpi-4byte.cnf
[mysqld]
innodb_large_prefix=1
innodb_file_format=barracuda
innodb_file_per_table=1
character-set-server=utf8mb4
collation-server=utf8mb4_general_ci
_EOF_
			# Since Buster (MariaDB 10.3) the following settings are removed and default to our needs:
			# - innodb_large_prefix: https://mariadb.com/kb/en/library/innodb-system-variables/#innodb_large_prefix
			# - innodb_file_format: https://mariadb.com/kb/en/library/innodb-system-variables/#innodb_file_format
			if (( $G_DISTRO > 4 )); then

				sed -i '/innodb_large_prefix/d' /etc/mysql/mariadb.conf.d/99-dietpi-4byte.cnf
				sed -i '/innodb_file_format/d' /etc/mysql/mariadb.conf.d/99-dietpi-4byte.cnf

			fi

			# Optimise for reduced memory use: https://github.com/MichaIng/DietPi/issues/605#issue-188930987
			#cat << _EOF_ > /etc/mysql/mariadb.conf.d/99-dietpi.cnf
#[mysqld]
#key_buffer_size=8M
#max_connections=30
#query_cache_size=8M
#query_cache_limit=512K
#thread_stack=128K
#_EOF_

		fi

		software_id=90 # phpMyAdmin
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Nginx/Lighttpd symlink to /var/www
			if (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 ||
				${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				ln -sf /usr/share/phpmyadmin /var/www

			fi

			# Due to MariaDB unix_socket authentication, "root" cannot be used to login the web ui.
			# Thus default "phpmyadmin" user need to be used, who on Jessie does not have all privileges:
			# https://dietpi.com/phpbb/viewtopic.php?p=54#p54
			systemctl start mariadb
			mysql -e 'grant all privileges on *.* to phpmyadmin@localhost with grant option'

		fi

		software_id=91 # Redis Database
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Enable redis php module, if installed:
			phpenmod redis 2> /dev/null

		fi

		software_id=58 # OpenBazaar
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Data dir
			mkdir -p $G_FP_DIETPI_USERDATA/openbazaar

			# Init OB to have config file available, if not yet the case, and edit to allow remote client access
			if [[ ! -f $G_FP_DIETPI_USERDATA/openbazaar/config ]]; then

				openbazaar-go init -d $G_FP_DIETPI_USERDATA/openbazaar

				# - Add current IP as gateway to allow external client connection
				G_CONFIG_INJECT '"Gateway": "' "    \"Gateway\": \"/ip4/$(sed -n 4p /DietPi/dietpi/.network)/tcp/4002\"," $G_FP_DIETPI_USERDATA/openbazaar/config

				# - Client connection user/password
				G_DIETPI-NOTIFY 2 "Please enter username and password for your ${aSOFTWARE_NAME[$software_id]} client connection:"
				openbazaar-go setapicreds -d $G_FP_DIETPI_USERDATA/openbazaar

				# - Client IP needs to be added to allowed IP list
				local ob_client_ip=''
				local invalid_entry=''
				while :
				do

					G_WHIP_INPUTBOX "${invalid_entry}Please enter the IP address of your ${aSOFTWARE_NAME[$software_id]} client machine
This is required, since the ${aSOFTWARE_NAME[$software_id]} server node by default does not allow any remote connection."
					if (( ! $? )) && [[ $G_WHIP_RETURNED_VALUE =~ ^[0-9.]+$ ]]; then

						ob_client_ip=$G_WHIP_RETURNED_VALUE
						break

					else

						invalid_entry='[FAILED] Please enter a valid IP address\n\n'

					fi

				done
				GCI_NEWLINE=1 G_CONFIG_INJECT '"AllowedIPs":' "    \"AllowedIPs\": [\n      \"$ob_client_ip\"\n    ]," $G_FP_DIETPI_USERDATA/openbazaar/config

			else

				G_DIETPI-NOTIFY 2 "Existing ${aSOFTWARE_NAME[$software_id]} config found. Skipping pre-configuration..."

			fi

			# Service
			cat << _EOF_ > /etc/systemd/system/openbazaar.service
[Unit]
Description=OpenBazaar (DietPi)

[Service]
Environment=GOPATH=$G_FP_DIETPI_USERDATA/go
WorkingDirectory=$G_FP_DIETPI_USERDATA/go
ExecStart=$(command -v openbazaar-go) start -d $G_FP_DIETPI_USERDATA/openbazaar

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=133 # YaCy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			chmod +x -R /etc/yacy

			cat << _EOF_ > /etc/systemd/system/yacy.service
[Unit]
Description=YaCy (DietPi)

[Service]
RemainAfterExit=yes
ExecStart=/etc/yacy/startYACY.sh
ExecStop=/etc/yacy/stopYACY.sh

[Install]
WantedBy=multi-user.target
_EOF_

			# Create admin login account
			/etc/yacy/bin/passwd.sh "$GLOBAL_PW"

		fi

		software_id=2 # Folding@Home
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Remove old data + config directories and init.d service
			[[ -d '/var/lib/fahclient' ]] && rm -R /var/lib/fahclient
			[[ -d '/etc/fahclient' ]] && rm -R /etc/fahclient
			[[ -f '/etc/init.d/FAHClient' ]] && rm /etc/init.d/FAHClient
			update-rc.d -f FAHClient remove

			# Create new working (data + config) directory and log file
			mkdir -p $G_FP_DIETPI_USERDATA/fahclient
			> /var/log/fahclient.log

			# Create new systemd service
			cat << _EOF_ > /lib/systemd/system/fahclient.service
[Unit]
Description=Folding@Home (DietPi)

[Service]
User=fahclient
Group=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/fahclient
ExecStart=$(command -v FAHClient) --allow='0/0' --web-allow='0/0' --daemon=false --user=DietPi --team=234437 --passkey=06c869246e88c00cb05cc4d1758a97f9 --gpu=true --log-rotate=false --log=/var/log/fahclient.log --power=light --data-directory=$G_FP_DIETPI_USERDATA/fahclient

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R fahclient:dietpi $G_FP_DIETPI_USERDATA/fahclient /var/log/fahclient.log

		fi

		software_id=47 # ownCloud
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			G_DIETPI-NOTIFY 2 'Enabling needed PHP modules.' # https://doc.owncloud.org/server/administration_manual/installation/manual_installation.html#php-extensions
			phpenmod curl gd intl json pdo_mysql opcache apcu redis ctype dom fileinfo iconv mbstring posix simplexml xmlwriter xmlreader zip exif

			G_DIETPI-NOTIFY 2 'Enabling APCu memory cache for PHP command line usage (CLI) as well, including ownCloud occ command and cron jobs.'
			echo -e '; ownCloud PHP settngs\n; priority=99\napc.enable_cli=1' > $FP_PHP_BASE_DIR/mods-available/dietpi-owncloud.ini
			phpenmod dietpi-owncloud

			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				G_DIETPI-NOTIFY 2 'Apache webserver found, enabling ownCloud specific configuration.' # https://doc.owncloud.org/server/administration_manual/installation/manual_installation.html#configure-apache-web-server
				a2enmod rewrite headers env dir mime 1> /dev/null
				local owncloud_conf='/etc/apache2/sites-available/dietpi-owncloud.conf'
				if [[ -f $owncloud_conf ]]; then

					owncloud_conf+='.dietpi-new'
					G_WHIP_MSG "Existing ownCloud Apache configuration found, will preserve the old one and save the new one for review and comparison to: $owncloud_conf"

				fi
				dps_index=$software_id Download_Install 'apache.owncloud.conf' $owncloud_conf
				a2ensite dietpi-owncloud 1> /dev/null
				# Cal/CardDAV redirects to ownCloud DAV endpoint
				if [[ ! -f /etc/apache2/conf-available/dietpi-dav_redirect.conf ]]; then

					echo '# Redirect Cal/CardDAV requests to ownCloud endpoint:
Redirect permanent /.well-known/carddav /owncloud/remote.php/dav
Redirect permanent /.well-known/caldav /owncloud/remote.php/dav' > /etc/apache2/conf-available/dietpi-dav_redirect.conf
					a2enconf dietpi-dav_redirect

				fi

			elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

				G_DIETPI-NOTIFY 2 'Lighttpd webserver found, enabling ownCloud specific configuration.'

				# Enable required modules
				G_CONFIG_INJECT '"mod_access",' '	"mod_access",' /etc/lighttpd/lighttpd.conf '"mod_.+",'
				G_CONFIG_INJECT '"mod_setenv",' '	"mod_setenv",' /etc/lighttpd/lighttpd.conf '"mod_.+",'
				lighttpd-enable-mod rewrite

				# Move ownCloud configuration file in place and activate it
				owncloud_conf='/etc/lighttpd/conf-available/99-dietpi-owncloud.conf'
				if [[ -f $owncloud_conf ]]; then

					owncloud_conf+='.dietpi-new'
					G_WHIP_MSG "Existing ownCloud Lighttpd configuration found, will preserve the old one and save the new one for review and comparison to: $nextcloud_conf"

				fi
				dps_index=$software_id Download_Install 'lighttpd.owncloud.conf' $owncloud_conf
				lighttpd-enable-mod dietpi-owncloud

				# Cal/CardDAV redirects to ownCloud DAV endpoint
				if [[ ! -f /etc/lighttpd/conf-enabled/99-dietpi-dav_redirect.conf ]]; then

					echo '# Redirect Cal/CardDAV requests to ownCloud endpoint:
url.redirect += (
	"^/.well-known/caldav"  => "/owncloud/remote.php/dav",
	"^/.well-known/carddav" => "/owncloud/remote.php/dav"
)' > /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf
					lighttpd-enable-mod dietpi-dav_redirect

				fi

			elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				G_DIETPI-NOTIFY 2 'Nginx webserver found, enabling ownCloud specific configuration.' # https://doc.owncloud.org/server/administration_manual/installation/nginx_configuration.html
				local owncloud_conf='/etc/nginx/sites-dietpi/dietpi-owncloud.conf'
				if [[ -f $owncloud_conf ]]; then

					owncloud_conf+='.dietpi-new'
					G_WHIP_MSG "Existing ownCloud Nginx configuration found, will preserve the old one and save the new one for review and comparison to: $owncloud_conf"

				fi

				dps_index=$software_id Download_Install 'nginx.owncloud.conf' $owncloud_conf

				# Uncomment HSTS header, if chosen via dietpi-letsencrypt and HTTPS connection test succeeds (incl. self-singed cert => exit code 5)
				if [[ -f /DietPi/dietpi/.dietpi-letsencrypt && $(sed -n 4p /DietPi/dietpi/.dietpi-letsencrypt) == 1 ]]; then

					wget -q --spider --timeout=10 --tries=2 https://localhost &> /dev/null
					(( $? == 0 || $? == 5)) && sed -i 's/#add_header Strict-Transport-Security/add_header Strict-Transport-Security/g' $owncloud_conf

				fi

				# Disable pretty URLs (front controller), if ownCloud version is lower than 10:
				if (( $(grep '$OC_VersionString' /var/www/owncloud/version.php | sed "s/^.*= '//" | sed "s/\..*$//") < 10 )); then

					sed -i 's/^[[:blank:]]*fastcgi_param front_controller_active true;/\t\t#fastcgi_param front_controller_active true;/g' $owncloud_conf

				fi

				# Cal/CardDAV redirects to ownCloud DAV endpoint
				if [[ ! -f '/etc/nginx/sites-dietpi/dietpi-dav_redirect.conf' ]]; then

					echo '# Redirect Cal/CardDAV requests to ownCloud endpoint:
location = /.well-known/carddav {
	return 301 $scheme://$host/owncloud/remote.php/dav;
}
location = /.well-known/caldav {
	return 301 $scheme://$host/owncloud/remote.php/dav;
}' > /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf

				fi

			fi

			# Start MariaDB and Redis for database creation and occ command
			G_RUN_CMD systemctl restart mariadb
			G_RUN_CMD systemctl start redis-server

			# Initially add occ command shortcut, will be done by Dietpi-Globals automatically, if occ file exist:
			occ(){ sudo -u www-data php /var/www/owncloud/occ "$@"; }

			# Adjusting config file:
			local config_php='/var/www/owncloud/config/config.php'

			local datadir=$(grep -m1 '^[[:blank:]]*SOFTWARE_OWNCLOUD_DATADIR=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
			[[ $datadir ]] || datadir="$G_FP_DIETPI_USERDATA/owncloud_data"
			mkdir -p $datadir
			chown -R www-data:www-data $datadir

			if [[ -d $G_FP_DIETPI_USERDATA/mysql/owncloud ]]; then

				G_DIETPI-NOTIFY 2 'ownCloud database found, will NOT overwrite.'

			else

				if [[ -f $datadir/dietpi-owncloud-database-backup.sql ]]; then

					G_DIETPI-NOTIFY 2 'ownCloud database backup found, starting recovery...'
					local dbuser=$(grep -m1 "^[[:blank:]]*'dbuser'" $config_php | mawk '{print $3}' | sed "s/[',]//g")
					local dbpass=$(grep -m1 "^[[:blank:]]*'dbpassword'" $config_php | mawk '{print $3}' | sed "s/[',]//g")
					/DietPi/dietpi/func/create_mysql_db owncloud "$dbuser" "$dbpass"
					mysql owncloud < "$datadir"/dietpi-owncloud-database-backup.sql
					### Seems to be not needed anymore and can cause double entries: https://help.nextcloud.com/t/howto-change-move-data-directory-after-installation/17170/3?u=michaing
					# Adjust database data directory entry, in case it changed due to server migration:
					#mysql -e "update owncloud.oc_storages set id='local::$datadir/' where id rlike 'local::'"

				elif ! grep -q "'installed' => true," $config_php 2>/dev/null; then

					local username=$(grep -m1 '^[[:blank:]]*SOFTWARE_OWNCLOUD_NEXTCLOUD_USERNAME=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
					[[ $username ]] || username='admin'

					# For MariaDB, temporary database admin user needs to be created, as 'root' uses unix_socket login, which cannot be accessed by sudo -u www-data.
					mysql -e "grant all privileges on *.* to 'tmp_root'@'localhost' identified by '$GLOBAL_PW' with grant option"

					G_ERROR_HANDLER_COMMAND='occ maintenance:install'
					G_ERROR_HANDLER_ONERROR_FPLOGFILE='G_ERROR_HANDLER_OCC'
					occ maintenance:install --no-interaction --database 'mysql' --database-name 'owncloud' --database-user 'tmp_root' --database-pass "$GLOBAL_PW" --admin-user "$username" --admin-pass "$GLOBAL_PW" --data-dir "$datadir" &> G_ERROR_HANDLER_OCC
					G_ERROR_HANDLER_EXITCODE=$?
					if (( ! $G_ERROR_HANDLER_EXITCODE )) && grep -qi 'Stack trace' G_ERROR_HANDLER_OCC; then

						G_ERROR_HANDLER_EXITCODE=999 # Our individual error code for unhandled exceptions

					fi
					G_ERROR_HANDLER

					# Remove obsolete default data dir
					[[ $(readlink -f $datadir) != $(readlink -f /var/www/owncloud/data) ]] && rm -R /var/www/owncloud/data

					mysql -e 'drop user tmp_root@localhost'

				fi

			fi

			# Enable ownCloud to use 4-byte database
			G_CONFIG_INJECT "'mysql.utf8mb4'" "'mysql.utf8mb4' => true," $config_php "'dbpassword'"

			# Add local IP and hostname to trusted domains.
			# If "1 => '" does not exist, the config.php is not copied e.g. from older instance, so we add entries.
			if ! grep -q "1 => '" $config_php; then

				sed -i "/0 => 'localhost'/a     1 => '$(sed -n 4p /DietPi/dietpi/.network)'," $config_php
				sed -i "/1 => '/a     2 => '$(cat /etc/hostname)'," $config_php

			fi

			# Set CLI URL to ownCloud sub directory:
			sed -i "s|'http://localhost'|'http://localhost/owncloud'|g" $config_php

			# Set pretty URLs (without /index.php/) on Apache:
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				GCI_PRESERVE=1 G_CONFIG_INJECT "'htaccess.RewriteBase'" "'htaccess.RewriteBase' => '/owncloud'," $config_php "'overwrite.cli.url'"
				occ maintenance:update:htaccess

			fi

			# APCu Memcache
			GCI_PRESERVE=1 G_CONFIG_INJECT "'memcache.local'" "'memcache.local' => '\\\\OC\\\\Memcache\\\\APCu'," $config_php "'version'"

			# Redis for transactional file locking:
			G_DIETPI-NOTIFY 2 'Enabling Redis for transactional file locking.' # https://doc.owncloud.org/server/administration_manual/configuration/server/caching_configuration.html#configuring-transactional-file-locking
			local redis_conf="/etc/redis/redis*.conf"
			# - Enable Redis socket and grant www-data access to it:
			#	- NB: To allow wildcard expansion, do not use quotes around $redis_conf!
			GCI_PRESERVE=1 G_CONFIG_INJECT 'unixsocket[[:blank:]]' 'unixsocket /run/redis/redis-server.sock' $redis_conf
			#	- Current Buster PHP7.3 Redis module cannot access Redis socket even with group + 770 permissions.
			#	- Obviously group of spawned processes is overridden by only www-data while redis membership is lost.
			#	- Requires secure solution, however for now we workaround with 777 socket permissions.
			if (( $G_DISTRO > 4 )); then

				G_CONFIG_INJECT 'unixsocketperm[[:blank:]]' 'unixsocketperm 777' $redis_conf

			else

				G_CONFIG_INJECT 'unixsocketperm[[:blank:]]' 'unixsocketperm 770' $redis_conf

			fi
			local redis_sock=$(grep -m1 '^[[:blank:]]*unixsocket[[:blank:]]' $redis_conf | mawk '{print $2}')
			usermod -a -G redis www-data
			G_RUN_CMD systemctl restart redis-server
			# - Enable ownCloud to use Redis socket for transactional file locking:
			G_CONFIG_INJECT "'filelocking.enabled'" "'filelocking.enabled' => true," $config_php "'memcache.local'"
			GCI_PRESERVE=1 GCI_NEWLINE=1 G_CONFIG_INJECT "'memcache.locking'" "'memcache.locking' => '\\\\OC\\\\Memcache\\\\Redis',\n'redis' => array ('host' => '$redis_sock', 'port' => 0,)," $config_php "'filelocking.enabled'"

			# Enable ownCloud background cron job:
			crontab -u www-data -l 2>/dev/null | grep -q '/var/www/owncloud/cron.php' || ( crontab -u www-data -l 2>/dev/null ; echo "*/15 * * * * php /var/www/owncloud/cron.php" ) | crontab -u www-data -
			occ background:cron

			# Enable maintenance mode to allow handling by dietpi-services:
			grep -q "^[[:blank:]]*'maintenance' => true," $config_php || occ maintenance:mode --on

		fi

		software_id=114 # Nextcloud
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			G_DIETPI-NOTIFY 2 'Enabling required PHP modules.' # https://docs.nextcloud.com/server/stable/admin_manual/installation/source_installation.html#prerequisites-for-manual-installation
			phpenmod curl gd intl json pdo_mysql opcache apcu redis ctype dom fileinfo iconv mbstring posix simplexml xmlwriter xmlreader zip exif

			G_DIETPI-NOTIFY 2 'Optimising APCu and OPcache modules for Nextcloud.' # https://docs.nextcloud.com/server/stable/admin_manual/configuration_server/server_tuning.html#enable-php-opcache
			echo -e '; Nextcloud PHP settngs\n; priority=99\napc.enable_cli=1\nopcache.enable=1\nopcache.interned_strings_buffer=8
opcache.max_accelerated_files=10000\nopcache.memory_consumption=128\nopcache.save_comments=1\nopcache.revalidate_freq=1' > $FP_PHP_BASE_DIR/mods-available/dietpi-nextcloud.ini
			phpenmod dietpi-nextcloud

			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				G_DIETPI-NOTIFY 2 'Apache webserver found, enabling Nextcloud specific configuration.' # https://docs.nextcloud.com/server/stable/admin_manual/installation/source_installation.html#apache-web-server-configuration
				a2enmod rewrite headers env dir mime 1> /dev/null
				local nextcloud_conf='/etc/apache2/sites-available/dietpi-nextcloud.conf'
				if [[ -f $nextcloud_conf ]]; then

					nextcloud_conf+='.dietpi-new'
					G_WHIP_MSG "Existing Nextcloud Apache configuration found, will preserve the old one and save the new one for review and comparison to: $nextcloud_conf"

				fi
				dps_index=$software_id Download_Install 'apache.nextcloud.conf' $nextcloud_conf
				a2ensite dietpi-nextcloud 1> /dev/null
				# Cal/CardDAV redirects to Nextcloud DAV endpoint
				if [[ ! -f /etc/apache2/conf-available/dietpi-dav_redirect.conf ]]; then

					echo '# Redirect Cal/CardDAV requests to Nextcloud endpoint:
Redirect permanent /.well-known/carddav /nextcloud/remote.php/dav
Redirect permanent /.well-known/caldav /nextcloud/remote.php/dav' > /etc/apache2/conf-available/dietpi-dav_redirect.conf
					a2enconf dietpi-dav_redirect

				fi

			elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

				G_DIETPI-NOTIFY 2 'Lighttpd webserver found, enabling Nextcloud specific configuration.'

				# Enable required modules
				G_CONFIG_INJECT '"mod_access",' '	"mod_access",' /etc/lighttpd/lighttpd.conf '"mod_.+",'
				G_CONFIG_INJECT '"mod_setenv",' '	"mod_setenv",' /etc/lighttpd/lighttpd.conf '"mod_.+",'
				lighttpd-enable-mod rewrite

				# Move Nextcloud configuration file in place and activate it
				nextcloud_conf='/etc/lighttpd/conf-available/99-dietpi-nextcloud.conf'
				if [[ -f $nextcloud_conf ]]; then

					nextcloud_conf+='.dietpi-new'
					G_WHIP_MSG "Existing Nextcloud Lighttpd configuration found, will preserve the old one and save the new one for review and comparison to: $nextcloud_conf"

				fi
				dps_index=$software_id Download_Install 'lighttpd.nextcloud.conf' $nextcloud_conf
				lighttpd-enable-mod dietpi-nextcloud

				# Cal/CardDAV redirects to Nextcloud DAV endpoint
				if [[ ! -f /etc/lighttpd/conf-enabled/99-dietpi-dav_redirect.conf ]]; then

					echo '# Redirect Cal/CardDAV requests to Nextcloud endpoint:
url.redirect += (
	"^/.well-known/caldav"  => "/nextcloud/remote.php/dav",
	"^/.well-known/carddav" => "/nextcloud/remote.php/dav"
)' > /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf
					lighttpd-enable-mod dietpi-dav_redirect

				fi

			elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				G_DIETPI-NOTIFY 2 'Nginx webserver found, enabling Nextcloud specific configuration.' # https://docs.nextcloud.com/server/stable/admin_manual/installation/nginx.html
				local nextcloud_conf='/etc/nginx/sites-dietpi/dietpi-nextcloud.conf'
				if [[ -f $nextcloud_conf ]]; then

					nextcloud_conf+='.dietpi-new'
					G_WHIP_MSG "Existing Nextcloud Nginx configuration found, will preserve the old one and save the new one for review and comparison to: $nextcloud_conf"

				fi
				dps_index=$software_id Download_Install 'nginx.nextcloud.conf' $nextcloud_conf

				# Uncomment HSTS header, if chosen via dietpi-letsencrypt and HTTPS connection test succeeds (incl. self-singed cert => exit code 5)
				if [[ -f /DietPi/dietpi/.dietpi-letsencrypt && $(sed -n 4p /DietPi/dietpi/.dietpi-letsencrypt) == 1 ]]; then

					wget -q --spider --timeout=10 --tries=2 https://localhost &> /dev/null
					(( $? == 0 || $? == 5)) && sed -i 's/#add_header Strict-Transport-Security/add_header Strict-Transport-Security/g' $nextcloud_conf

				fi

				# Disable pretty URLs (front controller), if Nextcloud version is lower than 13
				if (( $(grep '$OC_VersionString' /var/www/nextcloud/version.php | sed "s/^.*= '//" | sed "s/\..*$//") < 13 )); then

					sed -i 's/^[[:blank:]]*fastcgi_param front_controller_active true;/\t\t#fastcgi_param front_controller_active true;/g' $nextcloud_conf

				fi

				# Cal/CardDAV redirects to Nextcloud DAV endpoint
				if [[ ! -f '/etc/nginx/sites-dietpi/dietpi-dav_redirect.conf' ]]; then

					echo '# Redirect Cal/CardDAV requests to Nextcloud endpoint:
location = /.well-known/carddav {
	return 301 $scheme://$host/nextcloud/remote.php/dav;
}
location = /.well-known/caldav {
	return 301 $scheme://$host/nextcloud/remote.php/dav;
}' > /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf

				fi

			fi

			# Start MariaDB and Redis for database creation and ncc command
			G_RUN_CMD systemctl restart mariadb
			G_RUN_CMD systemctl start redis-server

			# Initially add occ command shortcut, will be done by Dietpi-Globals automatically, if occ file exist:
			ncc(){ sudo -u www-data php /var/www/nextcloud/occ "$@"; }

			# Adjusting config file:
			local config_php='/var/www/nextcloud/config/config.php'

			local datadir=$(grep -m1 '^[[:blank:]]*SOFTWARE_NEXTCLOUD_DATADIR=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
			[[ $datadir ]] || datadir="$G_FP_DIETPI_USERDATA/nextcloud_data"
			mkdir -p $datadir
			chown www-data:www-data $datadir

			if [[ -d $G_FP_DIETPI_USERDATA/mysql/nextcloud ]]; then

				G_DIETPI-NOTIFY 2 'Nextcloud database found, will NOT overwrite.'
				if [[ ! -f $config_php ]]; then

					G_WHIP_MSG '[WARNING] Existing Nextcloud database was found, but no related install directory\n
A remaining MariaDB "nextcloud" database from an earlier installed instance was found. But the related install directory "/var/www/nextcloud/config/config.php" does not exist.
Since running a fresh install with an existing database can produce data corruption, if the versions do not exactly match, you either need to remove the database or find and place the related install directory.\n
We cannot predict your aim and do not want to mess or break your data, so please do this manually.\n
To remove the existing database (including e.g. contacts, calendar, file tags etc.):
	# mysqladmin drop nextcloud
Otherwise to copy an existing instance in place:
	# rm -R /var/www/nextcloud
	# cp -a /path/to/existing/nextcloud/. /var/www/nextcloud/
	# chown -R www-data:www-data /var/www/nextcloud\n
The install script will now exit. After applying one of the the above, rerun dietpi-software, e.g.:
	# dietpi-software install 114'

					[[ -f /var/www/nextcloud/occ ]] && rm /var/www/nextcloud/occ
					/DietPi/dietpi/dietpi-services start
					exit 1

				fi

			else

				if [[ -f $datadir/dietpi-nextcloud-database-backup.sql ]]; then

					G_DIETPI-NOTIFY 2 'Nextcloud database backup found, starting recovery...'
					local dbuser=$(grep -m1 "^[[:blank:]]*'dbuser'" $config_php | mawk '{print $3}' | sed "s/[',]//g")
					local dbpass=$(grep -m1 "^[[:blank:]]*'dbpassword'" $config_php | mawk '{print $3}' | sed "s/[',]//g")
					/DietPi/dietpi/func/create_mysql_db nextcloud "$dbuser" "$dbpass"
					mysql nextcloud < $datadir/dietpi-nextcloud-database-backup.sql
					### Seems to be not needed anymore and can cause double entries: https://help.nextcloud.com/t/howto-change-move-data-directory-after-installation/17170/3?u=michaing
					# Adjust database data directory entry, in case it changed due to server migration:
					#mysql -e "update nextcloud.oc_storages set id='local::$datadir/' where id rlike 'local::'"

				elif ! grep -q "'installed' => true," $config_php 2>/dev/null; then

					local username=$(grep -m1 '^[[:blank:]]*SOFTWARE_OWNCLOUD_NEXTCLOUD_USERNAME=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
					[[ $username ]] || username='admin'

					# For MariaDB, temporary database admin user needs to be created, as 'root' uses unix_socket login, which cannot be accessed by sudo -u www-data.
					mysql -e "grant all privileges on *.* to 'tmp_root'@'localhost' identified by '$GLOBAL_PW' with grant option"

					G_ERROR_HANDLER_COMMAND='ncc maintenance:install'
					G_ERROR_HANDLER_ONERROR_FPLOGFILE='G_ERROR_HANDLER_NCC'
					ncc maintenance:install --no-interaction --database 'mysql' --database-name 'nextcloud' --database-user 'tmp_root' --database-pass "$GLOBAL_PW" --admin-user "$username" --admin-pass "$GLOBAL_PW" --data-dir "$datadir" &> G_ERROR_HANDLER_NCC
					G_ERROR_HANDLER_EXITCODE=$?
					if (( ! G_ERROR_HANDLER_EXITCODE )) && grep -qi 'Stack trace' G_ERROR_HANDLER_NCC; then

						G_ERROR_HANDLER_EXITCODE=999 # Our individual error code for unhandled exceptions

					fi
					# Workaround Nextcloud 14.0.3 throwing an error, when data dir path contains a symlink: https://github.com/nextcloud/server/issues/12247
					if [[ $(readlink -f $datadir) != $datadir ]]; then

						G_ERROR_HANDLER_RESET
						# Install with this error does not copy over skeleton
						cp -a /var/www/nextcloud/core/skeleton/. "$datadir/$username/files/"

					else

						G_ERROR_HANDLER

					fi

					# Remove obsolete default data dir
					[[ $(readlink -f $datadir) != $(readlink -f /var/www/nextcloud/data) ]] && rm -R /var/www/nextcloud/data

					mysql -e 'drop user tmp_root@localhost'

				fi

			fi

			# Enable Nextcloud to use 4-byte database
			G_CONFIG_INJECT "'mysql.utf8mb4'" "'mysql.utf8mb4' => true," $config_php "'dbpassword'"

			# Disable trusted_domains.
			if ! grep -q "1 => '*'" $config_php; then

				sed -i "/0 => 'localhost'/a     1 => '*'," $config_php

			fi

			# Set CLI URL to Nextcloud sub directory:
			sed -i "s|'http://localhost'|'http://localhost/nextcloud'|g" $config_php

			# Set pretty URLs (without /index.php/) on Apache:
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				GCI_PRESERVE=1 G_CONFIG_INJECT "'htaccess.RewriteBase'" "'htaccess.RewriteBase' => '/nextcloud'," $config_php "'overwrite.cli.url'"
				ncc maintenance:update:htaccess

			fi

			# APCu Memcache
			GCI_PRESERVE=1 G_CONFIG_INJECT "'memcache.local'" "'memcache.local' => '\\\\OC\\\\Memcache\\\\APCu'," $config_php "'version'"

			# Redis for transactional file locking:
			G_DIETPI-NOTIFY 2 'Enabling Redis for transactional file locking.' # https://docs.nextcloud.com/server/stable/admin_manual/configuration_files/files_locking_transactional.html
			local redis_conf="/etc/redis/redis*.conf"
			# - Enable Redis socket and grant www-data access to it:
			#	- NB: To allow wildcard expansion, do not use quotes around $redis_conf!
			GCI_PRESERVE=1 G_CONFIG_INJECT 'unixsocket[[:blank:]]' 'unixsocket /run/redis/redis-server.sock' $redis_conf
			#	- Current Buster PHP7.3 Redis module cannot access Redis socket even with group + 770 permissions.
			#	- Obviously group of spawned processes is overridden by only www-data while redis membership is lost.
			#	- Requires secure solution, however for now we workaround with 777 socket permissions.
			if (( $G_DISTRO > 4 )); then

				G_CONFIG_INJECT 'unixsocketperm[[:blank:]]' 'unixsocketperm 777' $redis_conf

			else

				G_CONFIG_INJECT 'unixsocketperm[[:blank:]]' 'unixsocketperm 770' $redis_conf

			fi
			local redis_sock=$(grep -m1 '^[[:blank:]]*unixsocket[[:blank:]]' $redis_conf | mawk '{print $2}')
			usermod -a -G redis www-data
			G_RUN_CMD systemctl restart redis-server
			# - Enable Nextloud to use Redis socket:
			G_CONFIG_INJECT "'filelocking.enabled'" "'filelocking.enabled' => true," $config_php "'memcache.local'"
			GCI_PRESERVE=1 GCI_NEWLINE=1 G_CONFIG_INJECT "'memcache.locking'" "'memcache.locking' => '\\\\OC\\\\Memcache\\\\Redis',\n'redis' => array ('host' => '$redis_sock', 'port' => 0,)," $config_php "'filelocking.enabled'"

			# Enable Nextcloud background cron job:
			crontab -u www-data -l 2>/dev/null | grep -q '/var/www/nextcloud/cron.php' || ( crontab -u www-data -l 2>/dev/null ; echo "*/15 * * * * php /var/www/nextcloud/cron.php" ) | crontab -u www-data -
			ncc background:cron

			# Convert filecache tables to bigint, which is not done anymore automatically by Nextcloud since v15
			ncc db:convert-filecache-bigint -n

			# Enable maintenance mode to allow handling by dietpi-services:
			grep -q "^[[:blank:]]*'maintenance' => true," $config_php || ncc maintenance:mode --on

		fi

		software_id=168 # Nextcloud Talk
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			G_DIETPI-NOTIFY 2 'Configuring TURN server:'
			# Buster: systemd unit
			if [[ -f '/lib/systemd/system/coturn.service' ]]; then

				# - Remove sysvinit service traces
				[[ -f '/etc/init.d/coturn' ]] && rm /etc/init.d/coturn
				update-rc.d -f coturn remove
				[[ -f '/etc/default/coturn' ]] && rm /etc/default/coturn

				# - Disable coturn logging by default, this can be overridden via /etc/turnserver.conf
				mkdir -p /etc/systemd/system/coturn.service.d
				echo -e "[Service]\nExecStart=\n$(grep -m1 "^[[:blank:]]*ExecStart=" /lib/systemd/system/coturn.service) -l stdout --no-stdout-log --simple-log" > /etc/systemd/system/coturn.service.d/dietpi-logging.conf

			# Stretch: sysvinit service
			else

				# - Enable init.d service
				G_CONFIG_INJECT 'TURNSERVER_ENABLED=' 'TURNSERVER_ENABLED=1' /etc/default/coturn
				# - Disable coturn logging by default, this can be overridden via /etc/turnserver.conf
				G_CONFIG_INJECT 'DAEMON_ARGS=' "DAEMON_ARGS='-c /etc/turnserver.conf -o -l stdout --no-stdout-log --simple-log'" /etc/default/coturn

			fi

			# Ask user for server domain and desired TURN server port
			local invalid_text=''
			local domain=$(hostname)
			while :
			do

				G_WHIP_DEFAULT_ITEM=$domain
				G_WHIP_INPUTBOX "${invalid_text}Please enter your servers external domain to allow Nextcloud Talk access your TURN server:"
				if (( $? == 0 )) && [[ $G_WHIP_RETURNED_VALUE ]]; then

					domain=${G_WHIP_RETURNED_VALUE#http*://}
					break

				else

					invalid_text='[ERROR] No valid entry found. Please retry...\n\n'

				fi

			done
			invalid_text=''
			local port=3478
			while :
			do

				G_WHIP_DEFAULT_ITEM=$port
				G_WHIP_INPUTBOX "${invalid_text}Please enter the network port, that should be used for your TURN server:\n
NB: This port needs to be forwarded by your router and/or opened in your firewall settings. Default value is: 3478"
				if (( $? == 0 )) && disable_error=1 G_CHECK_VALIDINT "$G_WHIP_RETURNED_VALUE" 0; then

					port=$G_WHIP_RETURNED_VALUE
					break

				else

					invalid_text='[ERROR] No valid entry found, value needs to be a sequence of integers. Please retry...\n\n'

				fi

			done

			# Adjust coTURN settings
			# - On Buster by default /etc/turnserver.conf is not created. Use example or create empty file:
			if [[ ! -f '/etc/turnserver.conf' ]]; then

				> /etc/turnserver.conf
				[[ -f '/usr/share/doc/coturn/examples/etc/turnserver.conf.gz' ]] && gzip -cd /usr/share/doc/coturn/examples/etc/turnserver.conf.gz > /etc/turnserver.conf

			fi
			# - Estimate coTURN version to handle outdated settings correctly
			local version=$(dpkg-query -Wf '${Version}' coturn); version=${version:0:7}; version=${version//./}
			# https://help.nextcloud.com/t/howto-setup-nextcloud-talk-with-turn-server/30794
			G_CONFIG_INJECT 'listening-port=' "listening-port=$port" /etc/turnserver.conf
			G_CONFIG_INJECT 'fingerprint' 'fingerprint' /etc/turnserver.conf
			G_CONFIG_INJECT 'use-auth-secret' 'use-auth-secret' /etc/turnserver.conf
			if (( $version < 4508 )); then

				G_CONFIG_INJECT 'lt-cred-mech' 'lt-cred-mech' /etc/turnserver.conf

			else

				sed -i '/^[[:blank:]]*lt-cred-mech/#lt-cred-mech/' /etc/turnserver.conf

			fi
			G_CONFIG_INJECT 'realm=' "realm=$domain" /etc/turnserver.conf
			GCI_PRESERVE=1 G_CONFIG_INJECT 'total-quota=' 'total-quota=100' /etc/turnserver.conf
			GCI_PRESERVE=1 G_CONFIG_INJECT 'bps-capacity=' 'bps-capacity=0' /etc/turnserver.conf
			G_CONFIG_INJECT 'stale-nonce' 'stale-nonce' /etc/turnserver.conf
			G_CONFIG_INJECT 'no-loopback-peers' 'no-loopback-peers' /etc/turnserver.conf
			if (( $version < 4510 )); then

				G_CONFIG_INJECT 'no-multicast-peers' 'no-multicast-peers' /etc/turnserver.conf

			else

				sed -i '/^[[:blank:]]*no-multicast-peers/d' /etc/turnserver.conf

			fi

			# Install Nextcloud Talk app
			G_RUN_CMD systemctl start mariadb
			G_RUN_CMD systemctl start redis-server
			G_RUN_CMD ncc maintenance:mode --off
			[[ -d '/var/www/nextcloud/apps/spreed' ]] || G_RUN_CMD ncc app:install spreed
			ncc app:enable spreed

			# Adjust Nextcloud Talk settings to use coturn
			ncc config:app:set spreed stun_servers --value="[\"$domain:$port\"]"
			# - Generate random secret to secure TURN server access
			local secret=$(openssl rand -hex 32)
			GCI_PRESERVE=1 G_CONFIG_INJECT 'static-auth-secret=' "static-auth-secret=$secret" /etc/turnserver.conf
			# - Scrape existing secret, in case user manually chose/edited it
			secret=$(grep -m1 '^[[:blank:]]*static-auth-secret=' /etc/turnserver.conf)
			secret=${secret#*static-auth-secret=}
			ncc config:app:set spreed turn_servers --value="[{\"server\":\"$domain:$port\",\"secret\":\"$secret\",\"protocols\":\"udp,tcp\"}]"
			unset secret domain port invalid_text version

		fi

		software_id=44 # Transmission
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Remove obsolete sysvinit service and its environment file
			[[ -f '/etc/init.d/transmission-daemon' ]] && rm /etc/init.d/transmission-daemon
			update-rc.d -f transmission-daemon remove
			[[ -f '/etc/default/transmission-daemon' ]] && rm /etc/default/transmission-daemon

			# Run service as "dietpi" group: https://github.com/MichaIng/DietPi/issues/350#issuecomment-423763518
			mkdir -p /etc/systemd/system/transmission-daemon.service.d
			# - Re-adding "debian-transmission" group somehow required: https://github.com/MichaIng/DietPi/issues/2793
			echo -e '[Service]\nGroup=dietpi\nSupplementaryGroups=debian-transmission' > /etc/systemd/system/transmission-daemon.service.d/dietpi-group.conf

			# Apply optimised settings
			G_CONFIG_INJECT '"cache-size-mb"' '    "cache-size-mb": '$(Optimise_BitTorrent 0)',' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"download-queue-size"' '    "download-queue-size": '$(Optimise_BitTorrent 1)',' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"peer-limit-global"' '    "peer-limit-global": '$(Optimise_BitTorrent 2)',' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"upload-slots-per-torrent"' '    "upload-slots-per-torrent": '$(Optimise_BitTorrent 3)',' /etc/transmission-daemon/settings.json '^\{$'

			G_CONFIG_INJECT '"port-forwarding-enabled"' '    "port-forwarding-enabled": true,' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"encryption"' '    "encryption": 2,' /etc/transmission-daemon/settings.json '^\{$'

			G_CONFIG_INJECT '"idle-seeding-limit"' '    "idle-seeding-limit": 1,' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"idle-seeding-limit-enabled"' '    "idle-seeding-limit-enabled": true,' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"ratio-limit"' '    "ratio-limit": 1.1,' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"ratio-limit-enabled"' '    "ratio-limit-enabled": true,' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"trash-original-torrent-files"' '    "trash-original-torrent-files": true,' /etc/transmission-daemon/settings.json '^\{$'

			G_CONFIG_INJECT '"download-dir"' '    "download-dir": "'$G_FP_DIETPI_USERDATA'/downloads",' /etc/transmission-daemon/settings.json '^\{$'
			# - Double quotes need to be escaped in .json files: https://github.com/MichaIng/DietPi/issues/2484#issuecomment-481374924
			# - ToDo: Hash password directly. Which hash method is used?
			GCI_PASSWORD=1 G_CONFIG_INJECT '"rpc-password"' '    "rpc-password": "'"${GLOBAL_PW//\"/\\\"}"'",' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"rpc-username"' '    "rpc-username": "root",' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"rpc-whitelist-enabled"' '    "rpc-whitelist-enabled": false,' /etc/transmission-daemon/settings.json '^\{$'
			G_CONFIG_INJECT '"message-level"' '    "message-level": 0,' /etc/transmission-daemon/settings.json '^\{$'

			# To allow access for download managers and media software, files need to be created with 77X permissions.
			G_CONFIG_INJECT '"umask"' '    "umask": 7,' /etc/transmission-daemon/settings.json '^\{$'

		fi

		software_id=54 # phpBB Forum
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration
			/DietPi/dietpi/func/create_mysql_db phpbb3 phpbb3 "$GLOBAL_PW"

		fi

		software_id=128 # MPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Create MPD user
			local usercmd='useradd -rMU'
			getent passwd mpd &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi,audio -d $G_FP_DIETPI_USERDATA/.mpd_cache -s $(command -v nologin) mpd
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -a -G render mpd

			# Runtime dirs/files
			# - Log
			mkdir -p /var/log/mpd
			>> /var/log/mpd/mpd.log
			# - Cache
			mkdir -p $G_FP_DIETPI_USERDATA/.mpd_cache
			>> $G_FP_DIETPI_USERDATA/.mpd_cache/db_file
			>> $G_FP_DIETPI_USERDATA/.mpd_cache/state
			>> $G_FP_DIETPI_USERDATA/.mpd_cache/sticker.sql
			# - Symlink from MPD defaults that applications may still expect/use.
			[[ ! -e '/var/lib/mpd/music' || -L '/var/lib/mpd/music' ]] || mv -n /var/lib/mpd/music/* $G_FP_DIETPI_USERDATA/$FOLDER_MUSIC/ &> /dev/null
			[[ ! -e '/var/lib/mpd/playlists' || -L '/var/lib/mpd/playlists' ]] || mv -n /var/lib/mpd/playlists/* $G_FP_DIETPI_USERDATA/$FOLDER_MUSIC/ &> /dev/null
			[[ ! -e '/var/lib/mpd/mpd.db' || -L '/var/lib/mpd/mpd.db' ]] || mv -n /var/lib/mpd/mpd.db $G_FP_DIETPI_USERDATA/.mpd_cache/db_file
			[[ ! -e '/var/lib/mpd/state' || -L '/var/lib/mpd/state' ]] || mv -n /var/lib/mpd/state $G_FP_DIETPI_USERDATA/.mpd_cache/state
			[[ ! -e '/var/lib/mpd/sticker.sql' || -L '/var/lib/mpd/sticker.sql' ]] || mv -n /var/lib/mpd/sticker.sql $G_FP_DIETPI_USERDATA/.mpd_cache/sticker.sql
			[[ -d '/var/lib/mpd' ]] && rm -R /var/lib/mpd
			mkdir -p /var/lib/mpd
			ln -sf $G_FP_DIETPI_USERDATA/$FOLDER_MUSIC /var/lib/mpd/music
			ln -sf $G_FP_DIETPI_USERDATA/$FOLDER_MUSIC /var/lib/mpd/playlists
			ln -sf $G_FP_DIETPI_USERDATA/.mpd_cache/db_file /var/lib/mpd/mpd.db
			ln -sf $G_FP_DIETPI_USERDATA/.mpd_cache/state /var/lib/mpd/state
			ln -sf $G_FP_DIETPI_USERDATA/.mpd_cache/sticker.sql /var/lib/mpd/sticker.sql

			# Default config
			G_BACKUP_FP /etc/mpd.conf
			dps_index=$software_id Download_Install 'mpd.conf' /etc/mpd.conf
			# - On Stretch (custom build), symlink /etc/mpd.conf to /usr/local/etc/mpd.conf, where /usr/local/bin/mpd by default searches
			if [[ $(command -v mpd) == '/usr/local/bin/mpd' ]]; then

				mkdir -p /usr/local/etc
				ln -sf /etc/mpd.conf /usr/local/etc/mpd.conf

			fi

			# MPD service/confs
			[[ -f '/etc/default/mpd' ]] && rm /etc/default/mpd

			# - Upsteam systemd unit: https://github.com/MusicPlayerDaemon/MPD/blob/master/systemd/system/mpd.service.in
			# - Debian package systemd unit: https://deb.debian.org/debian/pool/main/m/mpd/
			cat << _EOF_ > /lib/systemd/system/mpd.service
[Unit]
Description=Music Player Daemon (DietPi)
Documentation=man:mpd(1) man:mpd.conf(5)
Documentation=file:///usr/share/doc/mpd/user-manual.html
After=network.target sound.target

[Service]
User=mpd
#Group=dietpi # Do not change, use system assigned groups, requires both dietpi and audio groups
PermissionsStartOnly=true
ExecStartPre=$(command -v mkdir) -p /run/mpd
ExecStartPre=$(command -v chown) -R mpd:dietpi /run/mpd
ExecStart=$(command -v mpd) --no-daemon /etc/mpd.conf

# allow MPD to use real-time priority 50
LimitRTPRIO=50
LimitRTTIME=infinity

# disallow writing to /usr, /bin, /sbin, ...
ProtectSystem=yes

# more paranoid security settings
NoNewPrivileges=yes
ProtectKernelTunables=yes
ProtectControlGroups=yes
ProtectKernelModules=yes
# AF_NETLINK is required by libsmbclient, or it will exit() .. *sigh*
RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX AF_NETLINK
RestrictNamespaces=yes

[Install]
WantedBy=multi-user.target
Also=mpd.socket
_EOF_

			# JustBoom specials
			if grep -qi '^[[:blank:]]*CONFIG_SOUNDCARD=justboom' /DietPi/dietpi.txt; then

				# - Name displayed in YMPD sound button
				local justboom_soundcard_desc='JustBoom DietPi'
				G_CONFIG_INJECT 'name "' "name \"$justboom_soundcard_desc\"" /etc/mpd.conf
				G_CONFIG_INJECT 'zeroconf_name "' "zeroconf_name \"$justboom_soundcard_desc\"" /etc/mpd.conf

				# - Output (192khz 32bit)
				local target_bitdepth=32
				local target_rate=192000
				G_CONFIG_INJECT 'format "' "format \"$target_rate:$target_bitdepth:2\"" /etc/mpd.conf
				G_CONFIG_INJECT 'audio_output_format "' "audio_output_format \"$target_rate:$target_bitdepth:2\"" /etc/mpd.conf

				# - Set SOXR quality
				#	All RPi's can handle SOXR VH @ 192khz 32bit: https://github.com/MichaIng/DietPi/issues/581#issuecomment-256643079
				G_CONFIG_INJECT 'samplerate_converter "' 'samplerate_converter "soxr very high"' /etc/mpd.conf #highest

			fi

			# Grab our test music for the user.
			Download_Test_Media

			# Permissions
			chmod 0664 /var/log/mpd/mpd.log /etc/mpd.conf
			chmod -R 775 $G_FP_DIETPI_USERDATA/.mpd_cache
			chown -R mpd:dietpi /etc/mpd.conf /var/log/mpd $G_FP_DIETPI_USERDATA/.mpd_cache

		fi

		software_id=94 # ProFTPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			G_CONFIG_INJECT 'root' '#root' /etc/ftpusers

			G_BACKUP_FP /etc/proftpd/proftpd.conf
			dps_index=$software_id Download_Install 'conf' /etc/proftpd/proftpd.conf

		fi

		software_id=96 # Samba Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			echo -e "$GLOBAL_PW\n$GLOBAL_PW" | smbpasswd -s -a dietpi

			local fp_conf='/etc/samba/smb.conf'
			G_BACKUP_FP $fp_conf
			dps_index=$software_id Download_Install 'conf' $fp_conf

			G_CONFIG_INJECT 'max connections =' "max connections = $(( $G_HW_CPU_CORES * 2 ))" $fp_conf

		fi

		software_id=95 # vsFTPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			G_CONFIG_INJECT 'root' '#root' /etc/ftpusers

			local fp_conf='/etc/vsftpd.conf'
			G_BACKUP_FP $fp_conf
			dps_index=$software_id Download_Install 'conf' $fp_conf

			G_CONFIG_INJECT 'local_root=' "local_root=$G_FP_DIETPI_USERDATA" $fp_conf

		fi

		software_id=109 # NFS Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			cat << _EOF_ > /etc/exports
$G_FP_DIETPI_USERDATA *(rw,async,no_root_squash,fsid=0,crossmnt,no_subtree_check)
_EOF_

		fi

		software_id=32 # ympd
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd ympd &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi,audio -s $(command -v nologin) ympd
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -a -G render ympd

			# Service
			cat << _EOF_ > /etc/systemd/system/ympd.service
[Unit]
Description=ympd (DietPi)
After=mpd.service

[Service]
#User=ympd # Changes to ympd during run
Group=dietpi
ExecStart=/usr/bin/ympd --user ympd --webport 1337

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=148 # myMPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Add user to "dietpi" group
			usermod -aG dietpi mympd
			# Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -aG render mympd

			# Adjust config file on fresh install
			# - On reinstall /etc/mympd/mympd.conf.dist will be created, so use its existence as reinstall flag
			if [[ ! -f '/etc/mympd.conf.dist' ]]; then

				G_CONFIG_INJECT 'webport[[:blank:]]*=' 'webport = 1333' /etc/mympd.conf
				G_CONFIG_INJECT 'ssl[[:blank:]]*=' 'ssl = false' /etc/mympd.conf

			fi

		fi

		software_id=121 # Roon Bridge
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			#useradd -rMU -G dietpi,audio,render -d $G_FP_DIETPI_USERDATA/roon -s $(command -v nologin) roon
			# root required for remote updates

			dps_index=$software_id Download_Install 'roonbridge.service' /etc/systemd/system/roonbridge.service

			# Move logfiles to /var/log (dietpi-ramlog)
			mkdir -p /var/log/roon $G_FP_DIETPI_USERDATA/roon/{RoonBridge,RAATServer}
			# - Clear symlink locations
			rm -Rf $G_FP_DIETPI_USERDATA/roon/{RoonBridge,RAATServer}/Logs
			ln -s /var/log/roon $G_FP_DIETPI_USERDATA/roon/RoonBridge/Logs
			ln -s /var/log/roon $G_FP_DIETPI_USERDATA/roon/RAATServer/Logs

			# Permissions
			chown -R roon:dietpi $G_FP_DIETPI_USERDATA/roon /var/log/roon

		fi

		software_id=122 # Node-RED
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Data dir
			mkdir -p $G_FP_DIETPI_USERDATA/node-red

			# User
			local usercmd='useradd -rMU'
			getent passwd nodered &> /dev/null && usercmd='usermod'
			$usercmd -d $G_FP_DIETPI_USERDATA/node-red -s $(command -v nologin) nodered

			# - Only add user to "gpio" group, if it does exist (most SBCs), otherwise user creation fails: https://github.com/MichaIng/DietPi/issues/2975#issuecomment-513917360
			getent group gpio &> /dev/null && usermod -aG gpio nodered

			# - Allow sudo calls
			echo 'nodered ALL=NOPASSWD: ALL' > /etc/sudoers.d/nodered

			# Service
			cat << _EOF_ > /etc/systemd/system/node-red.service
[Unit]
Description=Node-RED (DietPi)

[Service]
User=nodered
ExecStart=$(command -v node-red) -u $G_FP_DIETPI_USERDATA/node-red

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R nodered:nodered $G_FP_DIETPI_USERDATA/node-red

		fi

		software_id=125 # Tomcat8
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local java=8
			(( $G_DISTRO > 4 )) && java=11
			G_CONFIG_INJECT 'JAVA_HOME=' "JAVA_HOME=$(find /usr/lib/jvm/ -name java-$java-openjdk*)" /etc/default/tomcat8

		fi

		software_id=119 # CAVA
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# - Cava conf
			mkdir -p /root/.config/cava

			G_BACKUP_FP /root/.config/cava/config
			cp /var/lib/dietpi/dietpi-software/conf/cava.conf /root/.config/cava/config

			# - lower MPD buffer size to reduce latency of spectrum:
			sed -i '/audio_buffer_size /c\audio_buffer_size "384"' /etc/mpd.conf

			# - fifo stream for mpd
			if ! grep -q '/tmp/mpd.fifo' /etc/mpd.conf; then

				cat << _EOF_ >> /etc/mpd.conf

# Cava fifo stream
audio_output {

    type "fifo"
    enabled "yes"
    name "CAVA"
    path "/tmp/mpd.fifo"
    format "44100:16:2"

}
_EOF_

			fi

		fi

		software_id=118 # Mopidy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Assure user home, data and cache dir as well on custom configs
			G_CONFIG_INJECT 'data_dir[[:blank:]]*=' 'data_dir = /mnt/dietpi_userdata/mopidy/data' /etc/mopidy/mopidy.conf '\[core\]'
			G_CONFIG_INJECT 'cache_dir[[:blank:]]*=' 'cache_dir = /mnt/dietpi_userdata/mopidy/cache' /etc/mopidy/mopidy.conf '\[core\]'

			# Move existing home+data to dietpi_userdata, if not yet existent
			if [[ -d '/var/lib/mopidy' && ! -d $G_FP_DIETPI_USERDATA/mopidy ]]; then

				mv /var/lib/mopidy $G_FP_DIETPI_USERDATA/mopidy
				# Workaround error about moving data dir into itself
				mkdir -p $G_FP_DIETPI_USERDATA/mopidy/.hidden_data
				# Non-hidden files/folders are data
				mv $G_FP_DIETPI_USERDATA/mopidy/* $G_FP_DIETPI_USERDATA/mopidy/.hidden_data
				mv $G_FP_DIETPI_USERDATA/mopidy/.hidden_data $G_FP_DIETPI_USERDATA/mopidy/data

			else

				mkdir -p $G_FP_DIETPI_USERDATA/mopidy/data
				[[ -d '/var/lib/mopidy' ]] && rm -R /var/lib/mopidy

			fi

			# Move existing cache to dietpi_userdata, if not yet existent
			if [[ -d '/var/cache/mopidy' && ! -d $G_FP_DIETPI_USERDATA/mopidy/cache ]]; then

				mv /var/cache/mopidy $G_FP_DIETPI_USERDATA/mopidy/cache

			else

				mkdir -p $G_FP_DIETPI_USERDATA/mopidy/cache
				[[ -d '/var/cache/mopidy' ]] && rm -R /var/cache/mopidy

			fi

			# Permissions
			chown -R mopidy:root $G_FP_DIETPI_USERDATA/mopidy

			# Adjust user group and home dir
			usermod -aG dietpi,audio -d $G_FP_DIETPI_USERDATA/mopidy mopidy
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -aG render mopidy

			# Adjust systemd unit to match new group and do not pre-create obsolete cache dir
			mkdir -p /etc/systemd/system/mopidy.service.d
			echo -e '[Service]\nGroup=dietpi\nExecStartPre=' > /etc/systemd/system/mopidy.service.d/dietpi.conf

			Download_Test_Media

		fi

		software_id=31 # Kodi
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Remove Kodi user (Whilst waving)
			getent passwd kodi &> /dev/null && userdel -r kodi

			# Run Kodi as root
			[[ -f '/etc/default/kodi' ]] && G_CONFIG_INJECT 'USER=' 'USER=root' /etc/default/kodi

			# Copy udev rules, probably not needed for root, but we'll do it anyway
			dps_index=$software_id Download_Install '99-dietpi-kodi.rules' /etc/udev/rules.d/99-dietpi-kodi.rules

			# Create .desktop symlink
			mkdir -p /root/Desktop
			G_RUN_CMD wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/apps/kodi.desktop -O /usr/share/applications/kodi.desktop
			ln -sf /usr/share/applications/kodi.desktop /root/Desktop/kodi.desktop

		fi

		software_id=39 # MiniDLNA
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd minidlna &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -s $(command -v nologin) minidlna

			[[ -f '/etc/init.d/minidlna' ]] && rm /etc/init.d/minidlna
			update-rc.d -f minidlna remove
			[[ -f '/lib/systemd/system/minidlna.service' ]] && rm /lib/systemd/system/minidlna.service

			cat << _EOF_ > /etc/systemd/system/minidlna.service
[Unit]
Description=MiniDLNA (DietPi)
After=network.target

[Service]
User=minidlna
Group=dietpi
RuntimeDirectory=minidlna
ExecStart=$(command -v minidlnad) -SR -f /etc/minidlna.conf

[Install]
WantedBy=multi-user.target
_EOF_

			# Copy config
			G_BACKUP_FP /etc/minidlna.conf
			dps_index=$software_id Download_Install 'minidlna.conf' /etc/minidlna.conf

			# Data dir
			mkdir -p $G_FP_DIETPI_USERDATA/.MiniDLNA_Cache
			chown -R minidlna:dietpi $G_FP_DIETPI_USERDATA/.MiniDLNA_Cache

			Download_Test_Media

		fi

		software_id=67 # No-IP
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Failsafe: Directory required for "noip2 -C" to create the config file
			mkdir -p /usr/local/etc

			# noip2 service file
			cat << _EOF_ > /etc/systemd/system/noip2.service
[Unit]
Description=noip2 (DietPi)
After=network.target network-online.target rsyslog.service
ConditionPathExists=/usr/local/etc/no-ip2.conf

[Service]
Type=forking
RemainAfterExit=yes
ExecStart=/usr/local/bin/noip2
ExecStop=/usr/bin/killall -w noip2

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=108 # Amiberry
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local amiberry_filename
			local capsimg_filename='capsimg-rpi.so'

			# ASUS TB
			if (( $G_HW_MODEL == 52 )); then

				amiberry_filename='amiberry-tinker'
				capsimg_filename='capsimg-tinker.so'

			# XU4
			elif (( $G_HW_MODEL == 11 )); then

				amiberry_filename='amiberry-xu4'
				capsimg_filename='capsimg-xu4.so'

			# RPi4
			elif (( $G_HW_MODEL == 4 )); then

				amiberry_filename='amiberry-rpi4-sdl2-dispmanx'

			# RPi3
			elif (( $G_HW_MODEL == 3 )); then

				amiberry_filename='amiberry-rpi3-sdl2-dispmanx'

			# RPi2
			elif (( $G_HW_MODEL == 2 )); then

				amiberry_filename='amiberry-rpi2-sdl2-dispmanx'

			# Assume RPi1 (ARMv6)
			else

				amiberry_filename='amiberry-rpi1-sdl2-dispmanx'

			fi

			# Update executable and capsimg.so
			mv "$G_FP_DIETPI_USERDATA/amiberry/$amiberry_filename" $G_FP_DIETPI_USERDATA/amiberry/amiberry
			mv "$G_FP_DIETPI_USERDATA/amiberry/$capsimg_filename" $G_FP_DIETPI_USERDATA/amiberry/capsimg.so
			rm $G_FP_DIETPI_USERDATA/amiberry/{amiberry,capsimg}-*

			# Create additional user media directories
			mkdir -p $G_FP_DIETPI_USERDATA/amiberry/{floppy_images,hdf,cd}

			# Remove obsolete and old config file to allow Amiberry recreating it: https://github.com/midwan/amiberry/releases/tag/v2.25
			[[ -f $G_FP_DIETPI_USERDATA/amiberry/conf/adfdir.conf ]] && rm $G_FP_DIETPI_USERDATA/amiberry/conf/adfdir.conf
			[[ -f $G_FP_DIETPI_USERDATA/amiberry/conf/amiberry.conf ]] && rm $G_FP_DIETPI_USERDATA/amiberry/conf/amiberry.conf

			# Uae4arm does not support browsing symlinks: https://github.com/MichaIng/DietPi/issues/474#issuecomment-242973839
			# - So we need to change config file default paths to actual userdata location
			if [[ -L $G_FP_DIETPI_USERDATA ]]; then

				local fp_userdata_actual=$(readlink -f $G_FP_DIETPI_USERDATA)
				sed -i "s:$G_FP_DIETPI_USERDATA:$fp_userdata_actual:g" $G_FP_DIETPI_USERDATA/amiberry/conf/autostart.uae

			fi

			# Service
			# - On Stretch Asus TB we need to start it as X11 session
			local xinit_start=''
			(( $G_HW_MODEL == 52 && $G_DISTRO < 5 )) && xinit_start="$(command -v xinit) "

			cat << _EOF_ > /etc/systemd/system/amiberry.service
[Unit]
Description=Amiberry Amiga Emulator (DietPi)

[Service]
#StandardOutput=tty
#StandardInput=tty
#TTYPath=/dev/tty1
#TTYReset=yes
#TTYVHangup=yes
WorkingDirectory=$G_FP_DIETPI_USERDATA/amiberry
ExecStart=$xinit_start$G_FP_DIETPI_USERDATA/amiberry/amiberry -f $G_FP_DIETPI_USERDATA/amiberry/conf/autostart.uae

[Install]
WantedBy=local-fs.target
_EOF_

			# Start script
			cat << _EOF_ > $G_FP_DIETPI_USERDATA/amiberry/run.sh
#!/bin/dash
cd $G_FP_DIETPI_USERDATA/amiberry
./amiberry -f conf/autostart.uae
_EOF_

			# Execute permissions
			chmod +x $G_FP_DIETPI_USERDATA/amiberry/{amiberry,run.sh}

		fi

		software_id=112 # DDX-Rebirth
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Symlink savegames to root
			# - Remove existing syslinks
			rm -R /root/.d1x-rebirth &> /dev/null
			rm -R /root/.d2x-rebirth &> /dev/null

			ln -sf $G_FP_DIETPI_USERDATA/dxx-rebirth/descent_1_profiles /root/.d1x-rebirth
			ln -sf $G_FP_DIETPI_USERDATA/dxx-rebirth/descent_2_profiles /root/.d2x-rebirth

			# +exe
			chmod +x -R $G_FP_DIETPI_USERDATA/dxx-rebirth/*

			# Create .Desktop SymLinks
			mkdir -p /root/Desktop
			mkdir -p /usr/share/applications

			ln -s $G_FP_DIETPI_USERDATA/dxx-rebirth/dxx-rebirth.desktop /root/Desktop/dxx-rebirth.desktop
			ln -s $G_FP_DIETPI_USERDATA/dxx-rebirth/dxx-rebirth.desktop  /usr/share/applications/dxx-rebirth.desktop

		fi

		software_id=51 # OpenTyrian
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Copy the DietPi run file for OpenTyrian
			dps_index=$software_id Download_Install 'run' /usr/games/opentyrian/run
			chmod +x /usr/games/opentyrian/run

			# Create .Desktop SymLinks
			mkdir -p /root/Desktop
			rm /usr/share/applications/opentyrian.desktop &> /dev/null
			G_RUN_CMD wget https://raw.githubusercontent.com/MichaIng/DietPi/$G_GITBRANCH/.conf/desktop/apps/opentyrian.desktop -O /usr/share/applications/opentyrian.desktop
			ln -s /usr/share/applications/opentyrian.desktop /root/Desktop/opentyrian.desktop

		fi

		software_id=59 # RPi Cam Control
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# - raspimjpeg conf
			chmod +x /etc/raspimjpeg
			ln -s /etc/raspimjpeg /var/www/rpicam/raspimjpeg

			# - Motion conf
			chgrp www-data /etc/motion/motion.conf
			chmod 777 /etc/motion/motion.conf
			usermod -a -G video www-data

			# - raspimjpeg/php schedule startup and control script
			dps_index=$software_id Download_Install 'raspimjpeg.sh' /var/lib/dietpi/dietpi-software/installed/raspimjpeg.sh
			chmod +x /var/lib/dietpi/dietpi-software/installed/raspimjpeg.sh
			cat << _EOF_ > /etc/systemd/system/raspimjpeg.service
[Unit]
Description=Raspimjpeg (DietPi)

[Service]
RemainAfterExit=yes
ExecStart=/var/lib/dietpi/dietpi-software/installed/raspimjpeg.sh start
ExecStop=/var/lib/dietpi/dietpi-software/installed/raspimjpeg.sh stop

[Install]
WantedBy=multi-user.target
_EOF_

			# - Replace confs with /var/www to /var/www/rpicam, once
			if ! grep -q '/rpicam' /etc/raspimjpeg; then

				sed -i 's#/var/www#/var/www/rpicam#g' /etc/raspimjpeg
				sed -i 's#/var/www#/var/www/rpicam#g' /etc/motion/motion.conf

			fi

			# - Setup Data directory
			mkdir -p $G_FP_DIETPI_USERDATA/rpicam
			rm -R /var/www/rpicam/media
			ln -s $G_FP_DIETPI_USERDATA/rpicam /var/www/rpicam/media
			chown -R www-data:www-data $G_FP_DIETPI_USERDATA/rpicam

			# - Enable RPi camera
			/DietPi/dietpi/func/dietpi-set_hardware rpi-camera enable

		fi

		software_id=45 # Deluge
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd debian-deluged &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/deluge -s $(command -v nologin) debian-deluged

			mkdir -p $G_FP_DIETPI_USERDATA/deluge/.config/deluge /var/log/deluged

			# https://git.deluge-torrent.org/deluge/tree/packaging/systemd/deluged.service
			cat << _EOF_ > /etc/systemd/system/deluged.service
[Unit]
Description=Deluge Daemon (DietPi)
Documentation=man:deluged

[Service]
User=debian-deluged
Group=dietpi
UMask=002
ExecStart=$(command -v deluged) -d -l /var/log/deluged/daemon.log -L warning
Restart=on-failure
TimeoutStopSec=300

[Install]
WantedBy=multi-user.target
_EOF_

			# https://git.deluge-torrent.org/deluge/tree/packaging/systemd/deluge-web.service
			cat << _EOF_ > /etc/systemd/system/deluge-web.service
[Unit]
Description=Deluge Web UI (DietPi)
Documentation=man:deluge-web

[Service]
User=debian-deluged
UMask=027
ExecStart=$(command -v deluge-web) -l /var/log/deluged/web.log -L warning
Restart=on-failure

[Install]
WantedBy=multi-user.target
_EOF_

			# Add web.log to logrotate config
			if [[ -f '/etc/logrotate.d/deluged' ]] && ! grep -q 'web.log' /etc/logrotate.d/deluged; then

				echo -e "\n$(</etc/logrotate.d/deluged)" >> /etc/logrotate.d/deluged
				sed -i '1,1s/daemon.log/web.log/' /etc/logrotate.d/deluged

			fi

			# Adjust config files only, if not yet existent
			if [[ ! -f $G_FP_DIETPI_USERDATA/deluge/.config/deluge/core.conf ]]; then

				# Copy DietPi configs
				dps_index=$software_id Download_Install 'deluge.conf' $G_FP_DIETPI_USERDATA/deluge/.config/deluge/core.conf
				dps_index=$software_id Download_Install 'deluge_web.conf' $G_FP_DIETPI_USERDATA/deluge/.config/deluge/web.conf

				# Set remote access login details
				echo "root:$GLOBAL_PW:10" > $G_FP_DIETPI_USERDATA/deluge/.config/deluge/auth

				# Apply optimised settings
				# - Cache size is in steps of 16 KiB. (Cachesize * 16 = total KiB)
				sed -i '/"cache_size": /c\ "cache_size": '$(( $(Optimise_BitTorrent 0) * 1024 / 16 ))',' $G_FP_DIETPI_USERDATA/deluge/.config/deluge/core.conf
				sed -i '/"max_active_limit": /c\ "max_active_limit": '$(Optimise_BitTorrent 1)',' $G_FP_DIETPI_USERDATA/deluge/.config/deluge/core.conf
				sed -i '/"max_active_downloading": /c\ "max_active_downloading": '$(Optimise_BitTorrent 1)',' $G_FP_DIETPI_USERDATA/deluge/.config/deluge/core.conf
				sed -i '/"max_connections_global": /c\ "max_connections_global": '$(Optimise_BitTorrent 2)',' $G_FP_DIETPI_USERDATA/deluge/.config/deluge/core.conf
				sed -i '/"max_upload_slots_global": /c\ "max_upload_slots_global": '$(Optimise_BitTorrent 3)',' $G_FP_DIETPI_USERDATA/deluge/.config/deluge/core.conf

			fi

			# Remove sysvinit service leftovers, installed by Debian APT package
			[[ -f '/etc/init.d/deluged' ]] && rm /etc/init.d/deluged
			update-rc.d -f deluged remove
			[[ -f '/etc/default/deluged' ]] && rm /etc/default/deluged
			[[ -d '/var/lib/deluged' ]] && rm -R /var/lib/deluged

			# Permissions
			chown -R debian-deluged:debian-deluged $G_FP_DIETPI_USERDATA/deluge
			chown -R debian-deluged /var/log/deluged

		fi

		software_id=115 # Webmin
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			[[ -f '/etc/init.d/webmin' ]] && rm /etc/init.d/webmin
			update-rc.d -f webmin remove
			cat << _EOF_ > /etc/systemd/system/webmin.service
[Unit]
Description=Webmin (DietPi)

[Service]
Type=forking
ExecStart=/etc/webmin/start
ExecStop=/etc/webmin/stop

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=93 # Pi-hole
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Webserver configs
			# - Lighttpd
			if (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

				# Enable required modules
				G_CONFIG_INJECT '"mod_setenv",' '	"mod_setenv",' /etc/lighttpd/lighttpd.conf '"mod_.+",'

				# Add and enable Pi-hole config
				dps_index=$software_id Download_Install 'lighttpd.pihole.conf' /etc/lighttpd/conf-available/99-dietpi-pihole.conf
				lighttpd-enable-mod dietpi-pihole

				# Optional config to block public access to admin panel
				dps_index=$software_id Download_Install 'lighttpd.block_public_admin.conf' /etc/lighttpd/conf-available/99-dietpi-pihole-block_public_admin.conf
				local enable_cmd='lighttpd-enable-mod dietpi-pihole-block_public_admin'
				local disable_cmd='lighttpd-disable-mod dietpi-pihole-block_public_admin'

			# - Apache
			elif (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				# Enable required modules
				a2enmod headers

				# Add and enable Pi-hole config
				dps_index=$software_id Download_Install 'apache.pihole.conf' /etc/apache2/sites-available/dietpi-pihole.conf
				a2ensite dietpi-pihole

				# Optional config to block public access to admin panel
				dps_index=$software_id Download_Install 'apache.block_public_admin.conf' /etc/apache2/sites-available/dietpi-pihole-block_public_admin.conf
				local enable_cmd='a2ensite dietpi-pihole-block_public_admin'
				local disable_cmd='a2dissite dietpi-pihole-block_public_admin'

			# - Nginx
			elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				# Add Pi-hole config
				dps_index=$software_id Download_Install 'nginx.pihole.conf' /etc/nginx/sites-dietpi/dietpi-pihole.conf

				# Optional config to block public access to admin panel
				dps_index=$software_id Download_Install 'nginx.block_public_admin.conf' /etc/nginx/sites-dietpi/dietpi-pihole-block_public_admin.off
				local enable_cmd='cd /etc/nginx/sites-dietpi; mv dietpi-pihole-block_public_admin.off dietpi-pihole-block_public_admin.on'
				local disable_cmd='cd /etc/nginx/sites-dietpi; mv dietpi-pihole-block_public_admin.on dietpi-pihole-block_public_admin.off'

			fi

			# Ask user if they want to block report access to the admin panel
			G_WHIP_BUTTON_OK_TEXT='YES'
			G_WHIP_BUTTON_CANCEL_TEXT='NO'
			G_WHIP_YESNO "In order to increase security, it is recommended that you block public access to the Pi-hole admin panel, so that unless you're on a local network, or connected via VPN, the Pi-hole admin panel isn't accessible.\n
You can always enable/disable this at a later point using the commands:
 - $enable_cmd
 - $disable_cmd\n
Do you want to block public access to the admin panel now?" && $enable_cmd

			# Create symlinks to align Pi-hole admin and blocking page relative to webroot
			cd /var/www
			# - Move existing files/dirs out of the way
			[[ ! -L 'admin' && -e 'admin' ]] && mv -v admin admin.bak
			ln -vsf html/admin admin
			[[ ! -L 'pihole' && -e 'pihole' ]] && mv -v pihole pihole.bak
			ln -vsf html/pihole pihole

			# Ask user whether to show blocking page
			G_WHIP_BUTTON_OK_TEXT='YES'
			G_WHIP_BUTTON_CANCEL_TEXT='NO'
			if G_WHIP_YESNO 'Pi-hole can show a blocking page, when clients access a blocked website. This allows you to whitelist domains directly from the blocking page and prevents the need to access the admin page or use the Pi-hole CLI for this.\n
The downside is additional traffic and less performance compared to a silent request block. Additional info can be found at: https://docs.pi-hole.net/ftldns/blockingmode/\n
Do you want to enable the Pi-hole blocking page?'; then

				G_CONFIG_INJECT 'BLOCKINGMODE=' 'BLOCKINGMODE=IP-NODATA-AAAA' /etc/pihole/pihole-FTL.conf
				# Enable 404 handler to rewrite all non-existent ad URL paths to blocking page
				[[ -f '/etc/apache2/sites-available/dietpi-pihole.conf' ]] && G_CONFIG_INJECT 'ErrorDocument 404' 'ErrorDocument 404 /html/pihole/index.php' /etc/apache2/sites-available/dietpi-pihole.conf
				[[ -f '/etc/nginx/sites-dietpi/dietpi-pihole.conf' ]] && G_CONFIG_INJECT 'error_page 404' 'error_page 404 /html/pihole/index.php;' /etc/nginx/sites-dietpi/dietpi-pihole.conf
				[[ -f '/etc/lighttpd/conf-available/99-dietpi-pihole.conf' ]] && G_CONFIG_INJECT 'server.error-handler-404' 'server.error-handler-404 = "/html/pihole/index.php"' /etc/lighttpd/conf-available/99-dietpi-pihole.conf
				# Backup default index page to rewrite webroot ad URL paths to blocking page
				[[ -f 'index.html' ]] && mv index.html index.html.bak
				[[ -f 'index.lighttpd.html' ]] && mv index.lighttpd.html index.lighttpd.html.bak
				[[ -f 'index.nginx-debian.html' ]] && mv index.nginx-debian.html index.nginx-debian.html.bak

			else

				G_CONFIG_INJECT 'BLOCKINGMODE=' 'BLOCKINGMODE=NULL' /etc/pihole/pihole-FTL.conf

			fi

			# Failsafe: Reset permissions
			cd /var/www/html/admin && git reset --hard HEAD
			cd /tmp/$G_PROGRAM_NAME

			# Fix service to disable syslog pre-req preventing start
			G_CONFIG_INJECT '# Required-Stop:' '# Required-Stop: $network $remote_fs' /etc/init.d/pihole-FTL
			G_CONFIG_INJECT '# Required-Start:' '# Required-Start: $network $remote_fs' /etc/init.d/pihole-FTL
			systemctl enable pihole-FTL

			# Disable non-required dhcpcd, which is installed by Pi-hole installer
			systemctl disable dhcpcd

			# Disable pihole.log query logging: https://github.com/pi-hole/FTL/issues/614#issuecomment-510564476
			pihole -l off

			# Run Gravity
			pihole -g

			# Generate web interface PW: https://github.com/MichaIng/DietPi/issues/662
			pihole -a -p "$GLOBAL_PW"

		fi

		software_id=33 # Airsonic
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd airsonic &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi,audio -d $G_FP_DIETPI_USERDATA/airsonic -s $(command -v nologin) airsonic
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -aG render airsonic

			# Optimise memory limit
			local airsonic_memory_max=$(( $RAM_TOTAL / 5 ))
			(( $airsonic_memory_max < 200 )) && airsonic_memory_max=200

			cat << _EOF_ > /etc/systemd/system/airsonic.service
[Unit]
Description=Airsonic Media Server (DietPi)
After=remote-fs.target network.target

[Service]
User=airsonic
Group=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/airsonic
ExecStart=$(command -v java) -Xmx${airsonic_memory_max}m -Dairsonic.home=$G_FP_DIETPI_USERDATA/airsonic -Dserver.context-path=/airsonic -Dserver.port=8080 -jar $G_FP_DIETPI_USERDATA/airsonic/airsonic.war

[Install]
WantedBy=multi-user.target
_EOF_

			# Symlink FFmpeg to Airsonic transcoder
			command -v ffmpeg &> /dev/null && ln -sf $(command -v ffmpeg) $G_FP_DIETPI_USERDATA/airsonic/transcode

			# Permissions
			chown -R airsonic:airsonic $G_FP_DIETPI_USERDATA/airsonic

			# Grab our test media for user
			Download_Test_Media

		fi

		software_id=34 # Subsonic
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd subsonic &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi,audio -d /var/subsonic -s $(command -v nologin) subsonic
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -aG render subsonic

			# Optimise memory limit
			local subsonic_memory_max=$(( $RAM_TOTAL / 5 ))
			(( $subsonic_memory_max < 200 )) && subsonic_memory_max=200

			G_CONFIG_INJECT 'SUBSONIC_USER=' 'SUBSONIC_USER=subsonic' /etc/default/subsonic
			G_CONFIG_INJECT 'SUBSONIC_ARGS=' "SUBSONIC_ARGS='--quiet --pidfile=/run/subsonic.pid --max-memory=$subsonic_memory_max --default-music-folder=$G_FP_DIETPI_USERDATA/$FOLDER_MUSIC --default-podcast-folder=$G_FP_DIETPI_USERDATA/$FOLDER_MUSIC --default-playlist-folder=$G_FP_DIETPI_USERDATA/$FOLDER_MUSIC'" /etc/default/subsonic

			# Symlink FFmpeg to Subsonic transcoder
			mkdir -p /var/subsonic/transcode
			command -v ffmpeg &> /dev/null && ln -sf $(command -v ffmpeg) /var/subsonic/transcode

			# Grab our test media for user
			Download_Test_Media

		fi

		software_id=71 # WebIOPi
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Autostart
			update-rc.d webiopi defaults

		fi

		software_id=62 # DietPi-CloudShell
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Enable DietPi-Cloudshell autostart
			/DietPi/dietpi/dietpi-autostart 5

			# Service
			cat << _EOF_ > /etc/systemd/system/dietpi-cloudshell.service
[Unit]
Description=dietpi-cloudshell on main screen (DietPi)

[Service]
StandardOutput=tty
TTYPath=/dev/tty1
ExecStartPre=$(command -v setterm) --term linux --blank 0 --powersave off --cursor off
ExecStart=/DietPi/dietpi/dietpi-cloudshell 1
ExecStop=$(command -v setterm) --reset
ExecStop=$(command -v echo) 'DietPi-Cloudshell terminated, have a nice day!'

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=98 # HAProxy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Create jail directory
			mkdir -p /var/lib/haproxy

			cat << _EOF_ > /etc/haproxy/haproxy.cfg
global

	# rsyslog is required for logging
	#log /var/log    local0
	#log /var/log    local1 notice
	maxconn 64
	# Jail directory
	chroot /var/lib/haproxy
	stats socket /run/haproxy.sock mode 660 level admin
	stats timeout 30s
	user root
	group root
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL).
	ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults

	log     global
	mode    http
	option  httplog
	option  dontlognull
	timeout connect 5000
	timeout client  50000
	timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend localnodes

	bind *:80
	mode http
	default_backend nodes

backend nodes

	mode http
	balance roundrobin
	option forwardfor
	http-request set-header X-Forwarded-Port %[dst_port]
	http-request add-header X-Forwarded-Proto https if { ssl_fc }
	option httpchk HEAD / HTTP/1.1\r\nHost:localhost
	server web01 127.0.0.1:9000 check
	server web02 127.0.0.1:9001 check
	server web03 127.0.0.1:9002 check

# Admin web page

	listen stats
	bind *:1338
	stats enable
	stats uri /
	stats hide-version
	stats auth admin:dietpi
_EOF_

			# Add html error pages
			mkdir -p /etc/haproxy/errors
			local errorcode=0

			errorcode=400; echo -e "[html]$errorcode[/html]" > /etc/haproxy/errors/"$errorcode".http
			errorcode=403; echo -e "[html]$errorcode[/html]" > /etc/haproxy/errors/"$errorcode".http
			errorcode=408; echo -e "[html]$errorcode[/html]" > /etc/haproxy/errors/"$errorcode".http
			errorcode=500; echo -e "[html]$errorcode[/html]" > /etc/haproxy/errors/"$errorcode".http
			errorcode=502; echo -e "[html]$errorcode[/html]" > /etc/haproxy/errors/"$errorcode".http
			errorcode=503; echo -e "[html]$errorcode[/html]" > /etc/haproxy/errors/"$errorcode".http
			errorcode=504; echo -e "[html]$errorcode[/html]" > /etc/haproxy/errors/"$errorcode".http

		fi

		software_id=35 # Logitech Media Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Remove bundled SysVinit service
			systemctl disable --now logitechmediaserver &> /dev/null
			killall -qwr squeezeboxserver* # Provided service may not wait for exit, kill: https://github.com/MichaIng/DietPi/issues/1613#issuecomment-372787574
			[[ -f '/etc/init.d/logitechmediaserver' ]] && rm /etc/init.d/logitechmediaserver
			update-rc.d -f logitechmediaserver remove
			[[ -f '/etc/default/logitechmediaserver' ]] && rm /etc/default/logitechmediaserver

			# Grant user access to audio devices and DietPi media files
			usermod -a -G audio,dietpi squeezeboxserver
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -a -G render squeezeboxserver

			# systemd service
			cat << _EOF_ > /etc/systemd/system/logitechmediaserver.service
[Unit]
Description=Logitech Media Server (DietPi)

[Service]
User=squeezeboxserver
ExecStart=$(command -v squeezeboxserver) --prefsdir /var/lib/squeezeboxserver/prefs --logdir /var/log/squeezeboxserver/ --cachedir /var/lib/squeezeboxserver/cache --charset=utf8 --logfile /var/log/squeezeboxserver/error.log
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
_EOF_

			# Grab our test media for user
			Download_Test_Media

		fi

		software_id=55 # Wordpress
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Create MariaDB database
			/DietPi/dietpi/func/create_mysql_db wordpress wordpress "$GLOBAL_PW"

		fi

		software_id=38 # FreshRSS
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Enable required PHP modules: https://github.com/FreshRSS/FreshRSS#requirements
			phpenmod curl gmp intl json pdo_mysql ctype dom mbstring xml zip

			# Apache configuration
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				# - Required modules
				a2enmod headers expires rewrite

				# - Better compatibility with mobile clients
				echo 'AllowEncodedSlashes On' > /etc/apache2/conf-available/dietpi-freshrss.conf
				a2enconf dietpi-freshrss

			fi

			# Create MariaDB database and user
			if [[ -d $G_FP_DIETPI_USERDATA/mysql/freshrss ]]; then

				G_DIETPI-NOTIFY 2 'FreshRSS MariaDB database found, will NOT overwrite.'

			else

				/DietPi/dietpi/func/create_mysql_db freshrss freshrss "$GLOBAL_PW"

			fi

			# Set permissions for webserver access
			chown -R :www-data /opt/FreshRSS
			chmod -R g+r+w /opt/FreshRSS

			# CLI install: https://github.com/FreshRSS/FreshRSS/blob/master/cli/README.md#commands
			cd /opt/FreshRSS
			sudo -u www-data php ./cli/prepare.php
			sudo -u www-data php ./cli/do-install.php --default_user dietpi --auth_type form --environment production --title FreshRSS --db-type mysql --db-host localhost --db-user freshrss --db-password "$GLOBAL_PW" --db-base freshrss --db-prefix freshrss
			sudo -u www-data php ./cli/create-user.php --user dietpi --password "$GLOBAL_PW" --api_password "$GLOBAL_PW"
			cd /tmp/$G_PROGRAM_NAME

			# Link web interface to webroot
			ln -sf /opt/FreshRSS/p /var/www/freshrss

			# Create cron job for feed update every 30 minutes, if it does not yet exist
			crontab -u www-data -l 2>/dev/null | grep -q '/opt/FreshRSS/app/actualize_script.php' || ( crontab -u www-data -l 2>/dev/null ; echo '*/30 * * * * php /opt/FreshRSS/app/actualize_script.php' ) | crontab -u www-data -

		fi

		# TigerVNC/RealVNC Server - Shared setup
		if (( ${aSOFTWARE_INSTALL_STATE[28]} == 1 || ${aSOFTWARE_INSTALL_STATE[120]} == 1 )); then

			(( ${aSOFTWARE_INSTALL_STATE[28]} == 1 )) && software_id=28 || software_id=120
			Banner_Configuration

			cat << _EOF_ > /etc/systemd/system/vncserver.service
[Unit]
Description=Manage VNC Server (DietPi)
Before=xrdp.service xrdp-sesman.service
After=dietpi-boot.service

[Service]
RemainAfterExit=yes
User=root
PAMName=login
Environment=HOME=/root
ExecStart=/usr/local/bin/vncserver start
ExecStop=/usr/local/bin/vncserver stop

[Install]
WantedBy=multi-user.target
_EOF_
			systemctl daemon-reload
			systemctl enable vncserver

			cat << _EOF_ > /usr/local/bin/vncserver
#!/bin/bash

# Check shared mode
SHARED_MODE=\$(grep -cm1 '^[[:blank:]]*SOFTWARE_VNCSERVER_SHARE_DESKTOP=1' /DietPi/dietpi.txt)

# RealVNC | Slightly different launch method to TigerVNC
REALVNC=0
if dpkg-query -s realvnc-vnc-server &> /dev/null; then

	REALVNC=1
	# Set shared desktop mode if autostart is enabled for desktops. This prevents another VNC server being launched on :1.
	[[ -f '/DietPi/dietpi/.dietpi-autostart_index' && \$(</DietPi/dietpi/.dietpi-autostart_index) == 2 ]] && SHARED_MODE=1

fi

# Find binary FP to use
BINARY_FP='/usr/bin/vncserver'
[[ -f '/usr/bin/tigervncserver' ]] && BINARY_FP='/usr/bin/tigervncserver'

case "\$1" in

	start)
		# Shared mode: x11vnc, excluding RealVNC as it has its own services
		if (( \$SHARED_MODE )); then

			if (( ! \$REALVNC )); then

				# Wait for X to start
				while ! pgrep Xorg
				do

					echo 'Waiting for X11 to start'
					sleep 2

				done

				sleep 5 # Give system some time to finish setting up X11 + desktop
				xset dpms force on # Disable screen blanking
				x11vnc -display :0 -usepw -forever || exit 1

			fi

		# Virtual desktop mode
		else

			WIDTH=\$(sed -n '/^[[:blank:]]*SOFTWARE_VNCSERVER_WIDTH=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
			HEIGHT=\$(sed -n '/^[[:blank:]]*SOFTWARE_VNCSERVER_HEIGHT=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
			DEPTH=\$(sed -n '/^[[:blank:]]*SOFTWARE_VNCSERVER_DEPTH=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
			DISPLAY=\$(sed -n '/^[[:blank:]]*SOFTWARE_VNCSERVER_DISPLAY_INDEX=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
			\$BINARY_FP :\${DISPLAY:-1} -geometry \${WIDTH:-1280}'x'\${HEIGHT:-720} -depth \${DEPTH:-16} || exit 1

		fi
	;;

	stop)
		DISPLAY=\$(sed -n '/^[[:blank:]]*SOFTWARE_VNCSERVER_DISPLAY_INDEX=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		\$BINARY_FP -kill :\${DISPLAY:-1} &> /dev/null
		killall -qw x11vnc Xtigervnc
	;;

esac

exit 0
_EOF_
			chmod +x /usr/local/bin/vncserver

			# + RealVNC | enable services
			if (( ${aSOFTWARE_INSTALL_STATE[120]} == 1 )); then

				systemctl enable vncserver-x11-serviced
				systemctl enable vncserver-virtuald

			fi

			# - Stretch + TigerVNC: Disable Localhost only by default
			[[ -f '/etc/vnc.conf' ]] && GCI_PRESERVE=1 G_CONFIG_INJECT '\$localhost[[:blank:]]*=' '$localhost = "no";' /etc/vnc.conf

			local cmd_launch_desktop=''
			# DESKTOP_LXDE
			if (( ${aSOFTWARE_INSTALL_STATE[23]} > 0 )); then

				cmd_launch_desktop='lxsession -s LXDE -e LXDE'

			# DESKTOP_MATE
			elif (( ${aSOFTWARE_INSTALL_STATE[24]} > 0 )); then

				cmd_launch_desktop='mate-session'

			# DESKTOP_GNUSTEP
			elif (( ${aSOFTWARE_INSTALL_STATE[26]} > 0 )); then

				cmd_launch_desktop='x-window-manager'

			# DESKTOP_XFCE
			elif (( ${aSOFTWARE_INSTALL_STATE[25]} > 0 )); then

				cmd_launch_desktop='xfce4-session'

			# DESKTOP_LXQT
			elif (( ${aSOFTWARE_INSTALL_STATE[173]} > 0 )); then

				cmd_launch_desktop='startlxqt'

			fi

			mkdir -p /root/.vnc
			cat << _EOF_ > /root/.vnc/xstartup
#!/bin/bash
export SHELL='/bin/bash'
[[ -x '/etc/vnc/xstartup' ]] && exec /etc/vnc/xstartup
[[ -r '/root/.Xresources' ]] && xrdb /root/.Xresources
xsetroot -solid grey
vncconfig -iconic &
$cmd_launch_desktop &
_EOF_
			chmod +x /root/.vnc/xstartup

			# Set control + read-only passwords
			vncpasswd -f << _EOF_ > /root/.vnc/passwd
$GLOBAL_PW
$GLOBAL_PW
_EOF_
			chmod 600 /root/.vnc/passwd

		fi

		software_id=74 # InfluxDB
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Move DB/datadir to userdata location
			[[ -d $G_FP_DIETPI_USERDATA/influxdb ]] || mv /var/lib/influxdb $G_FP_DIETPI_USERDATA/
			rm -Rf /var/lib/influxdb
			ln -sf $G_FP_DIETPI_USERDATA/influxdb /var/lib/influxdb

			# Permissions
			chown -R influxdb:influxdb $G_FP_DIETPI_USERDATA/influxdb

		fi

		software_id=77 # Grafana
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Move DB/plugins to userdata location, if not already existent
			if [[ -d $G_FP_DIETPI_USERDATA/grafana ]]; then

				G_DIETPI-NOTIFY 2 "Existing database/plugin directory $G_FP_DIETPI_USERDATA/grafana found. Will not overwrite..."
				rm -Rf /var/lib/grafana

			else

				mv /var/lib/grafana $G_FP_DIETPI_USERDATA/

			fi
			ln -sf $G_FP_DIETPI_USERDATA/grafana /var/lib/grafana

			# Permissions
			chown -R grafana:grafana $G_FP_DIETPI_USERDATA/grafana

			# Set password, wrap into trippled double quotes in case of ; or # being contained, according to docs: http://docs.grafana.org/installation/configuration/#password
			GCI_PASSWORD=1 GCI_PRESERVE=1 G_CONFIG_INJECT 'admin_password[[:blank:]]*=' "admin_password = \"\"\"$GLOBAL_PW\"\"\"" /etc/grafana/grafana.ini
			G_CONFIG_INJECT 'http_port = ' 'http_port = 3001' /etc/grafana/grafana.ini

		fi

		software_id=80 # Ubooquity
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd ubooquity &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -s $(command -v nologin) ubooquity

			mkdir -p $G_FP_DIETPI_USERDATA/{ebooks,comics}

			cat << _EOF_ > /etc/systemd/system/ubooquity.service
[Unit]
Description=Ubooquity (DietPi)
After=dietpi-boot.service network.target

[Service]
User=ubooquity
WorkingDirectory=$G_FP_DIETPI_USERDATA/ubooquity
ExecStart=$(command -v java) -jar $G_FP_DIETPI_USERDATA/ubooquity/Ubooquity.jar --headless --remoteadmin --adminport 2038 --libraryport 2039

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chmod +x $G_FP_DIETPI_USERDATA/ubooquity/Ubooquity.jar
			chown -R ubooquity:dietpi $G_FP_DIETPI_USERDATA/ubooquity

		fi

		software_id=64 # phpSysInfo
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			G_BACKUP_FP /var/www/phpsysinfo/phpsysinfo.ini
			dps_index=$software_id Download_Install 'phpsysinfo.ini' /var/www/phpsysinfo/phpsysinfo.ini

		fi

		software_id=56 # PHP Image Gallery
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Get test images
			mkdir -p /var/www/gallery/DietPi
			wget https://dietpi.com/images/dietpi-logo_256.png -O /var/www/gallery/DietPi/logo_256.png

			mkdir -p /var/www/gallery/Tr-Zero
			wget https://media.indiedb.com/images/games/1/25/24673/SS_0.jpg -O /var/www/gallery/Tr-Zero/SS_0.jpg
			wget https://media.indiedb.com/images/games/1/25/24673/SS_44.jpg -O /var/www/gallery/Tr-Zero/SS_1.jpg
			wget https://media.indiedb.com/images/games/1/25/24673/3.png -O /var/www/gallery/Tr-Zero/SS_2.jpg

			# Permissions for cache/thumbnail/database
			mkdir -p /var/www/gallery/_sfpg_data

			# Enable (Some type of security trigger)
			sed -i "/define('SECURITY_PHRASE'/c\define('SECURITY_PHRASE', 'true');" /var/www/gallery/index.php

		fi

		software_id=40 # Ampache
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration
			Download_Test_Media

			# Create/insert our pre-made Ampache database, if not existent already
			if [[ ! -d $G_FP_DIETPI_USERDATA/mysql/ampache ]]; then

				/DietPi/dietpi/func/create_mysql_db ampache ampache "$GLOBAL_PW"
				Download_Install 'https://dietpi.com/downloads/mysql_databases/ampache_mysql_3.8.2-v6.0.zip'
				mysql ampache < ampache.sql
				rm ampache.sql
				# - Also update password here for rare but possible case that database was lost but config file still exists
				[[ -f '/var/www/ampache/config/ampache.cfg.php' ]] && G_CONFIG_INJECT 'database_password =' "database_password = \"$GLOBAL_PW\"" /var/www/ampache/config/ampache.cfg.php

			fi

			# Grab config, if not existent already
			if [[ ! -f '/var/www/ampache/config/ampache.cfg.php' ]]; then

				G_RUN_CMD wget https://dietpi.com/downloads/conf/ampache.cfg.php_3.8.2-v6.0 -O /var/www/ampache/config/ampache.cfg.php
				G_CONFIG_INJECT 'database_password =' "database_password = \"$GLOBAL_PW\"" /var/www/ampache/config/ampache.cfg.php

			fi

		fi

		software_id=97 # OpenVPN Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Create initial server and client configs, if not yet present
			# - Wildcard config file detection via for loop
			local i
			for i in /etc/openvpn/*.conf
			do

				# Inform user, if config exist, that config generation is skipped
				if [[ -f $i ]]; then

					G_DIETPI-NOTIFY 2 "Existing OpenVPN configuration found: $i
 - Config generation will be skipped.
 - If you need a fresh key/cert/config set, please remove $i
   and run: dietpi-software reinstall 97"
					break

				fi

				# Pre-v6.26 cleanup
				[[ -f '/etc/openvpn/dh2048.pem' ]] && rm /etc/openvpn/dh2048.pem
				dpkg-query -s easy-rsa &> /dev/null && G_AGP easy-rsa

				# Download latest easy-rsa from GitHub
				G_DIETPI-NOTIFY 2 'Downloading latest easy-rsa for certificate and key generation...'
				INSTALL_URL_ADDRESS='https://api.github.com/repos/OpenVPN/easy-rsa/releases/latest'
				G_CHECK_URL "$INSTALL_URL_ADDRESS"
				fallback_url='https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.6/EasyRSA-unix-v3.0.6.tgz'
				no_check_url=1 Download_Install "$(curl -s "$INSTALL_URL_ADDRESS" | grep -m1 '"browser_download_url.*EasyRSA-.*\.tgz' | cut -d \" -f 4)"
				[[ -d '/etc/openvpn/easy-rsa' ]] && rm -R /etc/openvpn/easy-rsa
				mv EasyRSA-* /etc/openvpn/easy-rsa

				# Cert and key generation via easy-rsa
				G_DIETPI-NOTIFY 2 'Generating unique OpenVPN certificates and keys. Please wait...\n'
				cd /etc/openvpn/easy-rsa
				cat << _EOF_ > vars
set_var EASYRSA_REQ_COUNTRY	"UK"
set_var EASYRSA_REQ_PROVINCE	"DietPi"
set_var EASYRSA_REQ_CITY	"DietPi"
set_var EASYRSA_REQ_ORG		"DietPi"
set_var EASYRSA_REQ_EMAIL	"noreply@dietpi.com"
set_var EASYRSA_REQ_OU		"DietPi"
set_var EASYRSA_BATCH		"1"
_EOF_
				./easyrsa init-pki
				./easyrsa build-ca nopass
				./easyrsa gen-dh
				./easyrsa build-server-full DietPi_OpenVPN_Server nopass
				./easyrsa build-client-full DietPi_OpenVPN_Client nopass

				# Server config
				cp -a pki/{ca.crt,dh.pem,issued/DietPi_OpenVPN_Server.crt,private/DietPi_OpenVPN_Server.key} /etc/openvpn/
				cd /etc/openvpn
				cat << _EOF_ > server.conf
port 1194
proto udp
dev tun

ca ca.crt
cert DietPi_OpenVPN_Server.crt
key DietPi_OpenVPN_Server.key
dh dh.pem

server 10.8.0.0 255.255.255.0

client-to-client
keepalive 10 60
comp-lzo
max-clients 10

user nobody
group nogroup

persist-key
persist-tun
verb 3

# Web Forwarding (uncomment to enable)
#push "redirect-gateway"
#push "dhcp-option DNS 10.8.0.1"
_EOF_

				# Client config
				cat << _EOF_ > DietPi_OpenVPN_Client.ovpn
client
proto udp
dev tun

# IP/domain name of DietPi system, running OpenVPN server
remote mywebsite.com 1194

resolv-retry infinite
nobind

user nobody
group nogroup

persist-key
persist-tun

remote-cert-tls server
comp-lzo
verb 3
_EOF_
				# - Add CA cert, client cert and key
				echo -e "
<ca>\n$(<ca.crt)\n</ca>
<cert>\n$(<easy-rsa/pki/issued/DietPi_OpenVPN_Client.crt)\n</cert>
<key>\n$(<easy-rsa/pki/private/DietPi_OpenVPN_Client.key)\n</key>" >> DietPi_OpenVPN_Client.ovpn

				# - Copy to userdata
				cp DietPi_OpenVPN_Client.ovpn $G_FP_DIETPI_USERDATA/
				# - and /boot partition
				cp DietPi_OpenVPN_Client.ovpn /boot/

				cd /tmp/$G_PROGRAM_NAME
				break # Always break loop which is only for single wildcard file detection

			done

			# Enable IP forwarding
			echo -e 'net.ipv4.ip_forward=1\nnet.ipv6.conf.all.forwarding=1\nnet.ipv6.conf.default.forwarding=1' > /etc/sysctl.d/dietpi-openvpn.conf
			sysctl net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1 net.ipv6.conf.default.forwarding=1

			# Web Fowarding (Setup IPtables, must also be run during boot)
			#iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o "$(sed -n 3p /DietPi/dietpi/.network)" -j MASQUERADE

		fi

		software_id=172 # WireGuard
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			# Try to enable module, if it fails, a reboot is required
			local module_active=0
			modprobe wireguard 2> /dev/null && module_active=1

			# Server/Client choice
			local choice_required=''
			while :
			do

				G_WHIP_MENU_ARRAY=(

					'Server' ': Use this machine as VPN server and allow clients to connect to it.'
					'Client' ': Use this machine as VPN client to connect to another VPN server or service provider.'

				)

				G_WHIP_MENU "${choice_required}Please choose, if this machine should be set up as VPN server or client:" && break
				choice_required='[ERROR] A choice is required to finish the WireGuard install.\n\n'

			done

			# Server choice
			if [[ $G_WHIP_RETURNED_VALUE == 'Server' ]]; then

				# - Public IP/domain and desired WireGuard server port
				local invalid_text=''
				local domain=$(hostname -f)
				while :
				do

					G_WHIP_DEFAULT_ITEM=$domain
					G_WHIP_INPUTBOX "${invalid_text}Please enter your servers public IP/domain for WireGuard client access:"
					if (( $? == 0 )) && [[ $G_WHIP_RETURNED_VALUE ]]; then

						domain=${G_WHIP_RETURNED_VALUE#http*://}
						break

					else

						invalid_text='[ERROR] No valid entry found. Please retry...\n\n'

					fi

				done
				invalid_text=''
				local port=51820
				while :
				do

					G_WHIP_DEFAULT_ITEM=$port
					G_WHIP_INPUTBOX "${invalid_text}Please enter the network port, that should be used to access your WireGuard server:\n
NB: This port needs to be forwarded by your router and/or opened in your firewall settings. Default value is: 51820"
					if (( $? == 0 )) && disable_error=1 G_CHECK_VALIDINT "$G_WHIP_RETURNED_VALUE" 0; then

						port=$G_WHIP_RETURNED_VALUE
						break

					else

						invalid_text='[ERROR] No valid entry found, value needs to be a sequence of integers. Please retry...\n\n'

					fi

				done

				# - Create everything inside WireGuard config dir
				cd /etc/wireguard

				# - For securiy reasons set umask to 077
				umask 077

				# - Create server and client keys
				[[ -f 'server_private.key' ]] || wg genkey > server_private.key
				[[ -f 'server_public.key' ]] || wg pubkey < server_private.key > server_public.key
				[[ -f 'client_private.key' ]] || wg genkey > client_private.key
				[[ -f 'client_public.key' ]] || wg pubkey < client_private.key > client_public.key

				# - Server config
				[[ -f 'wg0.conf' ]] || cat << _EOF_ > wg0.conf
[Interface]
Address = 10.9.0.1/24
PrivateKey = $(<server_private.key)
ListenPort = $port

PostUp = sysctl net.ipv4.conf.%i.forwarding=1 net.ipv4.conf.\$(sed -n 3p /DietPi/dietpi/.network).forwarding=1
PostUp = sysctl net.ipv6.conf.\$(sed -n 3p /DietPi/dietpi/.network).accept_ra=2
PostUp = sysctl net.ipv6.conf.%i.forwarding=1 net.ipv6.conf.\$(sed -n 3p /DietPi/dietpi/.network).forwarding=1
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o \$(sed -n 3p /DietPi/dietpi/.network) -j MASQUERADE
PostUp = ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o \$(sed -n 3p /DietPi/dietpi/.network) -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o \$(sed -n 3p /DietPi/dietpi/.network) -j MASQUERADE
PostDown = ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o \$(sed -n 3p /DietPi/dietpi/.network) -j MASQUERADE

# Client 1
[Peer]
PublicKey = $(<client_public.key)
AllowedIPs = 10.9.0.2/32

# Client 2
#[Peer]
#PublicKey = XXXX
#AllowedIPs = 10.9.0.3/32
_EOF_

				# - Server local network IP
				local server_ip=$(sed -n 4p /DietPi/dietpi/.network)

				# - Server DNS nameserver
				local server_dns=$(mawk '/nameserver/ {print $2;exit}' /etc/resolv.conf)
				#	Replace "127.0.0.1"/"localhost" loopback entries by server wg0 IP: https://github.com/MichaIng/DietPi/issues/2482
				server_dns=${server_dns//127.0.0.1/10.9.0.1}
				server_dns=${server_dns//localhost/10.9.0.1}

				# - Client config
				[[ -f 'wg0-client.conf' ]] || cat << _EOF_ > wg0-client.conf
[Interface]
Address = 10.9.0.2/24
PrivateKey = $(<client_private.key)

# Comment the following to preserve the clients default DNS server, or force a desired one.
DNS = $server_dns

# Kill switch: Uncomment the following, if the client should stop any network traffic, when disconnected from the VPN server
# NB: This requires "iptables" to be installed, thus will not work on most mobile phones.
#PostUp = iptables -I OUTPUT ! -o %i -m mark ! --mark \$(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT && ip6tables -I OUTPUT ! -o %i -m mark ! --mark \$(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT
#PreDown = iptables -D OUTPUT ! -o %i -m mark ! --mark \$(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT && ip6tables -D OUTPUT ! -o %i -m mark ! --mark \$(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT

[Peer]
PublicKey = $(<server_public.key)
# Tunnel all network traffic through the VPN:
#	AllowedIPs = 0.0.0.0/0, ::/0
# Tunnel access to server-side local network only:
#	AllowedIPs = ${server_ip%.*}.0/24
# Tunnel access to VPN server only:
#	AllowedIPs = $server_ip/32
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = $domain:$port

# Uncomment the following, if you're behind a NAT and want the connection to be kept alive.
#PersistentKeepalive = 25
_EOF_

				# - Start WireGuard interface via systemd unit
				(( $module_active )) && systemctl start wg-quick@wg0
				#	persistent
				systemctl enable wg-quick@wg0

				# - Set umask back to default 022
				umask 022

				# - Navigate back to DietPi-Software working dir
				cd /tmp/$G_PROGRAM_NAME

			# Client choice
			elif [[ $G_WHIP_RETURNED_VALUE == 'Client' ]]; then

				G_WHIP_MSG '[ INFO ] WireGuard client setup has been chosen\n
Please follow the instructions of your VPN provider to configure WireGuard.\n
If no WireGuard (auto)start is included, but you require it, please do the following:
1. Check for the created config file/interface name:
	ls -Al /etc/wireguard/
   It has a ".conf" file ending, lets assume "wg0-client.conf".
2. To start the VPN interface, run:
	systemctl start wg-quick@wg0-client
3. To autostart the VPN interface on boot, run:
	systemctl enable wg-quick@wg0-client
4. To disable autostart again, run:
	systemctl disable wg-quick@wg0-client'

			fi

			(( $module_active )) || { [[ $DISABLE_REBOOT == 1 ]] && G_WHIP_MSG '[ INFO ] WireGuard install finished\n\nNB: WireGuard has been successfully installed, but a reboot is required, before it can be started.'; }

			unset module_active choice_required domain port invalid_text server_ip

		fi

		software_id=60 # WiFi Hostspot
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local eth_index=$(mawk 'NR==1 {print}' /DietPi/dietpi/.network)
			local wifi_index=$(mawk 'NR==2 {print}' /DietPi/dietpi/.network)

			# DHCPD Config
			G_BACKUP_FP /etc/dhcp/dhcpd.conf
			cat << _EOF_ > /etc/dhcp/dhcpd.conf
ddns-update-style none;
default-lease-time 600;
max-lease-time 7200;
authoritative;
log-facility local7;

subnet 192.168.42.0 netmask 255.255.255.0 {
        range 192.168.42.10 192.168.42.50;
        option broadcast-address 192.168.42.255;
        option routers 192.168.42.1;
        option domain-name "local";
        option domain-name-servers 8.8.8.8, 8.8.4.4;
}
_EOF_

			# Assign detected WLAN interface
			echo "INTERFACESv4=\"wlan$wifi_index\"" > /etc/default/isc-dhcp-server

			# Remove all entries below wlan, so we can recreate them
			sed -i '/allow-hotplug wlan/q0' /etc/network/interfaces

			# Enable up wlan
			G_CONFIG_INJECT 'allow-hotplug wlan' "allow-hotplug wlan$wifi_index" /etc/network/interfaces

			# Add WiFi settings to network interfaces config
			cat << _EOF_ >> /etc/network/interfaces
iface wlan$wifi_index inet static
address 192.168.42.1
netmask 255.255.255.0
#gateway 192.168.0.1
wireless-power off
#dns-nameservers 8.8.8.8 8.8.4.4

# IP tables
up iptables-restore < /etc/iptables.ipv4.nat
_EOF_

			# Assign static IP for wlan now
			ip a add 192.168.42.1 dev wlan$wifi_index

			# Create access point config
			G_BACKUP_FP /etc/hostapd/hostapd.conf
			cat << _EOF_ > /etc/hostapd/hostapd.conf
interface=wlan$wifi_index
driver=nl80211
ssid=$(sed -n '/^[[:blank:]]*SOFTWARE_WIFI_HOTSPOT_SSID=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
hw_mode=g
channel=$(sed -n '/^[[:blank:]]*SOFTWARE_WIFI_HOTSPOT_CHANNEL=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=$(sed -n '/^[[:blank:]]*SOFTWARE_WIFI_HOTSPOT_KEY=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
_EOF_

			# Check for RTL8188C* device, use the patched driver with compiled binary: https://github.com/pritambaral/hostapd-rtl871xdrv#why
			(( $WIFIHOTSPOT_RTL8188C_DEVICE )) && G_CONFIG_INJECT 'driver=' 'driver=rtl871xdrv' /etc/hostapd/hostapd.conf

			# Enable access point config
			echo "DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"" > /etc/default/hostapd

			# Enable IP forwarding
			echo -e 'net.ipv4.ip_forward=1\nnet.ipv6.conf.all.forwarding=1\nnet.ipv6.conf.default.forwarding=1' > /etc/sysctl.d/dietpi-wifihotspot.conf
			sysctl net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1 net.ipv6.conf.default.forwarding=1

			# Apply IP tables
			iptables -t nat -A POSTROUTING -o eth$eth_index -j MASQUERADE
			iptables -A FORWARD -i eth$eth_index -o wlan$wifi_index -m state --state RELATED,ESTABLISHED -j ACCEPT
			iptables -A FORWARD -i wlan$wifi_index -o eth$eth_index -j ACCEPT

			# Save IP tables, applied during ifup in /etc/network/interfaces
			iptables-save > /etc/iptables.ipv4.nat

			# RPi3/4 onboard WiFi: Enable N support
			(( ( $G_HW_MODEL == 3 || $G_HW_MODEL == 4 ) && ! $WIFIHOTSPOT_RTL8188C_DEVICE )) && G_CONFIG_INJECT 'ieee80211n=' 'ieee80211n=1' /etc/hostapd/hostapd.conf

		fi

		software_id=61 # Tor Hotspot
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# - Tor config
			cat << _EOF_ > /etc/tor/torrc
Log notice file /var/log/tor/notices.log
VirtualAddrNetwork 10.192.0.0/10
AutomapHostsSuffixes .onion,.exit
AutomapHostsOnResolve 1
TransPort 9040
TransListenAddress 192.168.42.1
DNSPort 53
DNSListenAddress 192.168.42.1
_EOF_

			# - Flush IP tables
			iptables -F
			iptables -t nat -F

			# - Generate tor prerouting tables
			local wifi_index=$(sed -n 2p /DietPi/dietpi/.network)
			iptables -t nat -A PREROUTING -i wlan$wifi_index -p tcp --dport 22 -j REDIRECT --to-ports 22
			iptables -t nat -A PREROUTING -i wlan$wifi_index -p udp --dport 53 -j REDIRECT --to-ports 53
			iptables -t nat -A PREROUTING -i wlan$wifi_index -p tcp --syn -j REDIRECT --to-ports 9040

			# - Save
			iptables-save > /etc/iptables.ipv4.nat

			# - Generate Logfile
			mkdir -p /var/log/tor
			> /var/log/tor/notices.log
			chown -R debian-tor:nogroup /var/log/tor/notices.log

			# - User: Test tor is functional.
			#https://check.torproject.org

		fi

		software_id=37 # Shairport-Sync
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Enable SOXR by default:
			G_BACKUP_FP /usr/local/etc/shairport-sync.conf
			cat << _EOF_ >  /usr/local/etc/shairport-sync.conf
general =
{
  name = "%H";
  interpolation = "soxr";
};

metadata =
{
	enabled = "yes";
	include_cover_art = "no";
	pipe_name = "/tmp/shairport-sync-metadata";
	pipe_timeout = 5000;
	socket_address = "226.0.0.1";
	socket_port = 5555;
	socket_msglength = 65000;
};

alsa =
{
//  mixer_control_name = "PCM";
//  output_rate = 44100; // can be 44100, 88200, 176400 or 352800
//  output_format = "S16"; // can be "U8", "S8", "S16", "S24", "S24_3LE", "S24_3BE" or "S32"
};
_EOF_

			# Create shairport user
			local usercmd='useradd -rMU'
			getent passwd shairport-sync &> /dev/null && usercmd='usermod -a'
			$usercmd -G audio -s $(command -v nologin) shairport-sync

			chmod +x /usr/local/bin/shairport-sync

		fi

		software_id=48 # Pydio
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# PHP configuration
			phpenmod apcu gd intl pdo_mysql dom mbstring xml

			# Webserver config
			# - Apache2
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				# - Enable Apache2 rewrite engine
				a2enmod rewrite

				# - Move Pydio Apache2 config in place
				dps_index=$software_id Download_Install 'apache.pydio.conf' /etc/apache2/sites-available/dietpi-pydio.conf
				a2ensite dietpi-pydio

			# - Lighttpd
			elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

				# - Enable Lighttpd setenv, access and rewrite modules
				G_CONFIG_INJECT '"mod_access",' '	"mod_access",' /etc/lighttpd/lighttpd.conf '"mod_.+",'
				G_CONFIG_INJECT '"mod_setenv",' '	"mod_setenv",' /etc/lighttpd/lighttpd.conf '"mod_.+",'
				lighttpd-enable-mod rewrite

				# - Move Pydio Lighttpd config in place
				dps_index=$software_id Download_Install 'lighttpd.pydio.conf' /etc/lighttpd/conf-available/99-dietpi-pydio.conf
				lighttpd-enable-mod dietpi-pydio

			# - Nginx
			elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				# - Move Pydio Nginx config in place
				dps_index=$software_id Download_Install 'nginx.pydio.conf' /etc/nginx/sites-dietpi/dietpi-pydio.conf

			fi

			# Create MySQL DB
			/DietPi/dietpi/func/create_mysql_db pydio pydio "$GLOBAL_PW"

			# Setup Data directory
			# - Skip if already existent
			local target_data_dir=$G_FP_DIETPI_USERDATA/pydio_data
			if [[ -d $target_data_dir ]]; then

				G_DIETPI-NOTIFY 2 "Existing $target_data_dir found, will migrate..."
				[[ -e '/var/www/pydio/data' ]] && rm -R /var/www/pydio/data

			else

				# - Move data structure
				[[ -e $target_data_dir ]] && rm -R $target_data_dir
				mv /var/www/pydio/data $target_data_dir

			fi

			# Create symlink
			ln -sf $target_data_dir /var/www/pydio/data
			chown -R www-data:www-data $target_data_dir

		fi

		software_id=36 # SqueezeLite
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Replace sysvinit service with systemd
			[[ -f '/etc/init.d/squeezelite' ]] && rm /etc/init.d/squeezelite
			update-rc.d -f squeezelite remove
			[[ -f '/etc/default/squeezelite' ]] && rm /etc/default/squeezelite
			dps_index=$software_id Download_Install 'squeezelite.service' /etc/systemd/system/squeezelite.service

			Download_Test_Media

		fi

		software_id=99 # EmonHub
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Copy config
			cp /etc/emonhub/conf/default/emonhub /etc/default/emonhub

			# Setup service
			cp /etc/emonhub/service/emonhub /etc/init.d/emonhub
			chmod +x /etc/init.d/emonhub
			update-rc.d emonhub defaults

			chmod +x -R /etc/emonhub

			# Disable onboard Bluetooth, if present, to recover ttyAMA0
			# RPi4: Test required
			if (( $(sed -n 10p /DietPi/dietpi/.hw_model) )); then

				/DietPi/dietpi/func/dietpi-set_hardware bluetooth disable

			# Else, assure that primary UART is enabled, which is ttyAMA0 on non-onboard WiFi/BT models
			else

				G_CONFIG_INJECT 'enable_uart=' 'enable_uart=1' $FP_RPI_CONFIG

			fi

			# Disable console on ttyAMA0
			/DietPi/dietpi/func/dietpi-set_hardware serialconsole disable ttyAMA0

			# - Apply user API KEY
			USER_EMONHUB_APIKEY_CURRENT=$(grep -m1 '^[[:blank:]]*SOFTWARE_EMONHUB_APIKEY=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
			sed -i "/apikey/c\        apikey = $USER_EMONHUB_APIKEY_CURRENT" /etc/emonhub/conf/emonhub.conf

		fi

		software_id=66 # RPi Monitor
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# - Update apt package stats
			/usr/share/rpimonitor/scripts/updatePackagesStatus.pl

			# - USBdrive stats implimentation by Rich
			if (( $USBDRIVE )); then

				sed -i '\/include=\/etc\/rpimonitor\/template\/sdcard.conf/a include=\/etc\/rpimonitor\/template\/usb_hdd.conf' /etc/rpimonitor/data.conf

				cat << _EOF_ > /etc/rpimonitor/template/usb_hdd.conf
########################################################################
# Extract USB HDD (sda1) information
#  Page: 1
#  Information               Status     Statistics
#  - USBHDD1 total          - yes      - yes
#  - USBHDD1 used           - yes      - yes
########################################################################
static.10.name=usbhdd_total
static.10.source=df -t ext4
static.10.regexp=sda1\s+(\d+)
static.10.postprocess=\$1/1024

dynamic.14.name=usbhdd_used
dynamic.14.source=df -t ext4
dynamic.14.regexp=sda1\s+\d+\s+(\d+)
dynamic.14.postprocess=\$1/1024
dynamic.14.rrd=GAUGE

web.status.1.content.9.name=USB HDD
web.status.1.content.9.icon=usb_hdd.png
web.status.1.content.9.line.1="<b>/sda1</b> Used: <b>"+KMG(data.usbhdd_used,'M')+"</b> (<b>"+Percent(data.udbhdd_used,data.usbhdd_total,'M')+"</b>) Free: <b>"+KMG(data.usbhdd_total-data.usbhdd_used,'M')+ "</b> Total: <b>"+ KMG(data.usbhdd_total,'M') +"</b>"
web.status.1.content.9.line.2=ProgressBar(data.usbhdd_used,data.usbhdd_total)

web.statistics.1.content.9.name=USB HDD
web.statistics.1.content.9.graph.1=usbhdd_total
web.statistics.1.content.9.graph.2=usbhdd_used
web.statistics.1.content.9.ds_graph_options.usbhdd_total.label=USB HDD total space (MB)
web.statistics.1.content.9.ds_graph_options.usbhdd_total.color="#FF7777"
web.statistics.1.content.9.ds_graph_options.usbhdd_used.label=USB HDD used space (MB)
web.statistics.1.content.9.ds_graph_options.usbhdd_used.lines={ fill: true }
web.statistics.1.content.9.ds_graph_options.usbhdd_used.color="#7777FF"
_EOF_

			fi

		fi

		software_id=65 # Netdata
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Only required for our self-compiled package, leave defaults for Debian APT package otherwise
			if (( $G_HW_ARCH == 1 && $G_DISTRO < 5 )); then

				# Service
				dps_index=$software_id Download_Install 'netdata.service' /etc/systemd/system/netdata.service

				# Dir (failsafe)
				mkdir -p /var/lib/netdata

				# User
				local usercmd='useradd -rMU'
				getent passwd netdata &> /dev/null && usercmd='usermod'
				$usercmd -d /var/lib/netdata -s $(command -v nologin) netdata

				# Permissions: https://docs.netdata.cloud/docs/netdata-security/#netdata-directories
				# - R/O
				chown -R root:netdata /etc/netdata /usr/lib/netdata /usr/libexec/netdata /usr/share/netdata
				chmod -R 0750 /etc/netdata /usr/lib/netdata /usr/libexec/netdata /usr/share/netdata
				# - apps.plugin requires root privileges to read disk I/O
				chmod 4750 /usr/libexec/netdata/plugins.d/apps.plugin
				# - R/W (web access: https://github.com/MichaIng/DietPi/issues/2336#issuecomment-450196178)
				chown -R netdata:netdata /var/cache/netdata /var/lib/netdata /var/log/netdata /usr/share/netdata/web
				chmod -R 0770 /var/cache/netdata /var/lib/netdata /var/log/netdata

			fi

		fi

		software_id=57 # BaiKal
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Permissions: http://sabre.io/baikal/install/
			chown -R www-data:www-data /var/www/baikal/Specific

			# Enable required PHP modules: https://github.com/sabre-io/Baikal/wiki/Baïkal-dependencies
			phpenmod xml mbstring pdo_mysql

			# Install/run composer | Also run for ampache. Move this to a global function....
			php -r "readfile('https://getcomposer.org/installer');" > composer-setup.php
			php composer-setup.php
			php -r "unlink('composer-setup.php');"
			mv composer.phar /usr/local/bin/composer

			cd /var/www/baikal
			composer install --no-interaction
			cd /tmp/$G_PROGRAM_NAME

			# Database
			/DietPi/dietpi/func/create_mysql_db baikal baikal "$GLOBAL_PW"

			# Cal/CardDAV request redirection: http://sabre.io/baikal/install/, https://github.com/bambocher/docker-baikal/blob/master/lighttpd.conf
			# - Apache
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				echo '# Redirect Cal/CardDAV requests to Baikal endpoint:
Redirect permanent /.well-known/carddav /baikal/html/dav.php
Redirect permanent /.well-known/caldav /baikal/html/dav.php' > /etc/apache2/conf-available/dietpi-dav_redirect.conf
				a2enconf dietpi-dav_redirect

			# - Lighttpd
			elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

				echo '# Redirect Cal/CardDAV requests to Baikal endpoint:
url.redirect += (
	"^/.well-known/caldav"  => "/baikal/html/dav.php",
	"^/.well-known/carddav" => "/baikal/html/dav.php"
)' > /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf
				lighttpd-enable-mod dietpi-dav_redirect

			# - Nginx
			elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				echo '# Redirect Cal/CardDAV requests to Baikal endpoint:
location = /.well-known/carddav {
	return 301 $scheme://$host/baikal/html/dav.php;
}
location = /.well-known/caldav {
	return 301 $scheme://$host/baikal/html/dav.php;
}' > /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf

			fi

		fi

		software_id=43 # Mumble Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Cap total connections
			local max_users=$(( $G_HW_CPU_CORES * 8 ))
			sed -i "/users=/c\users=$max_users" /etc/mumble-server.ini

			# Name the root channel
			sed -i '/registerName=/c\registerName=DietPi Mumble Server' /etc/mumble-server.ini

			# Disable DB logging
			sed -i '/logdays=/c\logdays=-1' /etc/mumble-server.ini

			# Set Superuser passwd: https://dietpi.com/phpbb/viewtopic.php?f=11&t=2024#p8084
			murmurd -ini /etc/mumble-server.ini -supw "$GLOBAL_PW"

		fi

		software_id=41 # Emby Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration
			Download_Test_Media

			# Permissions
			usermod -a -G dietpi emby
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -a -G render emby

		fi

		software_id=42 # Plex Media Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration
			Download_Test_Media

			# Permissions
			usermod -a -G dietpi plex
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -a -G render plex

			# Run service as "dietpi" group: https://github.com/MichaIng/DietPi/issues/350#issuecomment-423763518
			mkdir -p /etc/systemd/system/plexmediaserver.service.d
			echo -e '[Service]\nGroup=dietpi' > /etc/systemd/system/plexmediaserver.service.d/dietpi-group.conf

		fi

		software_id=52 # Cuberite
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd cuberite &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/cubrite -s $(command -v nologin) cuberite

			cat << _EOF_ > /etc/systemd/system/cuberite.service
[Unit]
Description=Cuberite Server (DietPi)

[Service]
Type=forking
User=cuberite
Group=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/cubrite
ExecStart=$G_FP_DIETPI_USERDATA/cubrite/Cuberite --service

[Install]
WantedBy=multi-user.target
_EOF_

			# WebUI settings
			cat << _EOF_ > $G_FP_DIETPI_USERDATA/cubrite/webadmin.ini
[User:admin]
Password=$GLOBAL_PW

[WebAdmin]
Ports=1339
Enabled=1
_EOF_

			# Permissions
			chown -R cuberite:dietpi $G_FP_DIETPI_USERDATA/cubrite

		fi

		software_id=53 # MineOS
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Add underprivilged user for web access | no longer works, could be a nodejs v8 issue?
			getent passwd mineos &> /dev/null || useradd -p "$GLOBAL_PW" mineos

			# Stop mineos from running while we config it. When we didnt do this, the program would constantly overwrite our symlink from (/var/games/minecraft).
			#/DietPi/dietpi/dietpi-services stop # Already done after install step now
			killall -w supervisord &> /dev/null
			killall -w node &> /dev/null
			killall -w nodejs &> /dev/null

			# Create symlinks to userdata dir
			mkdir -p $G_FP_DIETPI_USERDATA/mineos/minecraft
			ln -sf $G_FP_DIETPI_USERDATA/mineos/minecraft/mineos_console.js /usr/local/bin/mineos

			G_BACKUP_FP /etc/mineos.conf
			cp $G_FP_DIETPI_USERDATA/mineos/minecraft/mineos.conf /etc/mineos.conf

			rm -Rf /var/games/minecraft
			mkdir -p /var/games $G_FP_DIETPI_USERDATA/mineos/serverdata
			ln -s $G_FP_DIETPI_USERDATA/mineos/serverdata /var/games/minecraft

			# Setup SSL cert
			cd $G_FP_DIETPI_USERDATA/mineos/minecraft
			./generate-sslcert.sh
			cd /tmp/$G_PROGRAM_NAME

			# Supervisor service
			cat << _EOF_ > /etc/supervisor/conf.d/mineos.conf
[program:mineos]
command=/usr/local/bin/node webui.js
directory=$G_FP_DIETPI_USERDATA/mineos/minecraft
environment=HOME=$G_FP_DIETPI_USERDATA/mineos
user=root
autostart=true
autorestart=true
redirect_stderr=true
_EOF_
			supervisorctl reload

			# Permissions
			chown -R mineos:dietpi $G_FP_DIETPI_USERDATA/mineos /var/games/minecraft /etc/ssl/certs/mineos*

		fi

		software_id=49 # Gogs
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# User
			local usercmd='useradd -rMU'
			getent passwd gogs &> /dev/null && usercmd='usermod'
			$usercmd -d /etc/gogs -s $(command -v nologin) gogs

			# Directories + permissions
			mkdir -p $G_FP_DIETPI_USERDATA/gogs-repo /var/log/gogs
			chown -R gogs:gogs /etc/gogs $G_FP_DIETPI_USERDATA/gogs-repo /var/log/gogs

			# Database
			if [[ ! -d '/var/lib/mysql/gogs' ]]; then

				G_RUN_CMD systemctl restart mariadb
				mysql < /etc/gogs/scripts/mysql.sql
				mysql -e "grant all privileges on gogs.* to gogs@localhost identified by '$GLOBAL_PW'"

			fi

			# Service
			cat << _EOF_ > /etc/systemd/system/gogs.service
[Unit]
Description=Gogs (DietPi)
DefaultDependencies=no
After=mysqld.service mysql.service mariadb.service

[Service]
User=gogs
WorkingDirectory=/etc/gogs
ExecStart=/bin/dash -c '/etc/gogs/gogs web 2>&1 > /var/log/gogs/gogs_daemon.log'

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=46 # qBitTorrent
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd qbittorrent &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -p "$GLOBAL_PW" -s $(command -v nologin) qbittorrent

			# Config
			mkdir -p /home/qbittorrent/.config/qBittorrent
			G_BACKUP_FP /home/qbittorrent/.config/qBittorrent/qBittorrent.conf
			cat << _EOF_ > /home/qbittorrent/.config/qBittorrent/qBittorrent.conf
[General]
ported_to_new_savepath_system=true

[Preferences]
Downloads\DiskWriteCacheSize=$(Optimise_BitTorrent 0)
Downloads\DiskWriteCacheTTL=60
Queueing\MaxActiveDownloads=$(Optimise_BitTorrent 1)
Queueing\MaxActiveTorrents=$(Optimise_BitTorrent 1)
Queueing\MaxActiveUploads=1
Queueing\IgnoreSlowTorrents=false
Bittorrent\MaxConnecs=$(Optimise_BitTorrent 2)
Bittorrent\MaxConnecsPerTorrent=$(Optimise_BitTorrent 2)
Bittorrent\MaxUploads=$(Optimise_BitTorrent 3)
Bittorrent\MaxUploadsPerTorrent=$(Optimise_BitTorrent 3)
WebUI\Port=1340
WebUI\Enabled=true
General\Locale=en
Downloads\SavePath=$G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS
Downloads\TempPathEnabled=false
Downloads\TempPath=$G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS
Downloads\ScanDirs=@Invalid()
Downloads\DownloadInScanDirs=@Invalid()
Downloads\TorrentExportDir=
MailNotification\enabled=false
MailNotification\email=
MailNotification\smtp_server=smtp.changeme.com
MailNotification\req_ssl=false
MailNotification\req_auth=false
MailNotification\username=
MailNotification\password=
Downloads\PreAllocation=false
Queueing\QueueingEnabled=false
Downloads\UseIncompleteExtension=false
Connection\PortRangeMin=6881
Connection\UPnP=true
Connection\GlobalDLLimit=-1
Connection\GlobalUPLimit=-1
Bittorrent\uTP=true
Bittorrent\uTP_rate_limited=false
Advanced\IncludeOverhead=false
Connection\GlobalDLLimitAlt=10
Connection\GlobalUPLimitAlt=10
Scheduler\Enabled=false
Bittorrent\DHT=true
Bittorrent\sameDHTPortAsBT=true
Bittorrent\DHTPort=6881
Bittorrent\PeX=true
Bittorrent\LSD=true
Bittorrent\Encryption=1
Advanced\AnonymousMode=false
Connection\ProxyType=-1
Connection\Proxy\IP=0.0.0.0
Connection\Proxy\Port=8080
Connection\ProxyPeerConnections=false
Connection\Proxy\Authentication=false
Connection\Proxy\Username=
Connection\Proxy\Password=
IPFilter\Enabled=false
IPFilter\File=
WebUI\Username=qbittorrent
WebUI\LocalHostAuth=true
WebUI\HTTPS\Enabled=false
DynDNS\Enabled=false
DynDNS\Service=0
DynDNS\Username=
DynDNS\Password=
DynDNS\DomainName=changeme.dyndns.org
WebUI\Password_ha1=@ByteArray($(echo -n "$GLOBAL_PW" | md5sum | mawk '{print $1}'))

[LegalNotice]
Accepted=true

[AutoRun]
enabled=false
program=
_EOF_

			# Service
			cat << _EOF_ > /etc/systemd/system/qbittorrent.service
[Unit]
Description=qBittorrent (DietPi)
After=network.target

[Service]
User=qbittorrent
Group=dietpi
RemainAfterExit=yes
ExecStart=/usr/bin/qbittorrent-nox --webui-port=1340

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R qbittorrent:dietpi /home/qbittorrent

		fi

		software_id=107 # rTorrent
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Create username/password for rutorrent based on webserver type.
			# - Apache2
			if (( ${aSOFTWARE_INSTALL_STATE[83]} > 0 )); then

				# - Install SCGI module
				G_AGI libapache2-mod-scgi
				a2enmod rewrite scgi

				# - Enable password protection
				htpasswd -cb /etc/.rutorrent-htaccess root "$GLOBAL_PW"
				cat << _EOF_ > /var/www/rutorrent/.htaccess
AuthUserFile /etc/.rutorrent-htaccess
AuthName "ruTorrent_login"
AuthType Basic
require user root
_EOF_

				# - Allow overrides/.htaccess and enable SCGI + authentication
				cat << _EOF_ > /etc/apache2/sites-available/dietpi-rutorrent.conf
<Directory /var/www/rutorrent/>
	AllowOverride All
</Directory>

SCGIMount /RPC2 127.0.0.1:5000
<location /RPC2>
	AuthName "rTorrent secure access"
	AuthType Basic
	AuthBasicProvider file
	AuthUserFile /etc/.rutorrent-htaccess
	Require user root
</location>
_EOF_
				a2ensite dietpi-rutorrent

			# - Lighttpd
			elif (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

				echo "root:rtorrent:$(echo -n 'root:rtorrent:dietpi' | md5sum | cut -b -32)" > /etc/.rutorrent-htaccess

				# - Add to /etc/lighttpd/lighttpd.conf
				if ! grep -qi '^#RUTORRENT_DIETPI' /etc/lighttpd/lighttpd.conf; then

					cat << _EOF_ >> /etc/lighttpd/lighttpd.conf
#RUTORRENT_DIETPI
server.modules += ( "mod_fastcgi" )
server.modules += ( "mod_scgi" )
server.modules += ( "mod_auth" )
auth.debug = 0
auth.backend = "htdigest"
auth.backend.htdigest.userfile = "/etc/.rutorrent-htaccess"

auth.require = ( "/rutorrent/" => (
                    "method"  => "digest",
                    "realm"   => "rtorrent",
                    "require" => "valid-user"
               ))

scgi.server = ( "/RPC2" =>
    ( "127.0.0.1" =>
        (
            "host" => "127.0.0.1",
            "port" => 5000,
            "check-local" => "disable"
        )
    )
)
#RUTORRENT_DIETPI
_EOF_

				fi

			# - Nginx
			elif (( ${aSOFTWARE_INSTALL_STATE[85]} > 0 )); then

				echo "root:$(openssl passwd -crypt dietpi)" > /etc/.rutorrent-htaccess

				cat << _EOF_ > /etc/nginx/sites-dietpi/dietpi-rutorrent.conf
location /rutorrent {
    auth_basic "Restricted Content";
    auth_basic_user_file /etc/.rutorrent-htaccess;
}

location /RPC2 {
    include scgi_params;
    scgi_pass 127.0.0.1:5000;
}
_EOF_

			fi

			# - Define curl location in config.php (for Lighttpd and Nginx)
			G_CONFIG_INJECT '"curl"[[:blank:]]' '		"curl"	=> "/usr/bin/curl",' /var/www/rutorrent/conf/config.php

			chown www-data:www-data /etc/.rutorrent-htaccess
			chmod 400 /etc/.rutorrent-htaccess

			# - Session folder
			mkdir -p $G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/.session

			# Create rTorrent run user
			local usercmd='useradd -rMU'
			getent passwd rtorrent &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/rtorrent -s $(command -v nologin) rtorrent

			# - Service using screen | '/usr/bin/rtorrent &> /var/log/rtorrent.log &' doesnt work, hangs program after 5 seconds
			cat << _EOF_ > /etc/systemd/system/rtorrent.service
[Unit]
Description=rTorrent (DietPi)
Wants=network-online.target
After=network-online.target

[Service]
Type=forking
User=rtorrent
Group=dietpi
KillMode=none
ExecStart=$(command -v screen) -fa -dmS rtorrent $(command -v rtorrent)
ExecStop=$(command -v screen) -S rtorrent -X quit

[Install]
WantedBy=multi-user.target
_EOF_
			# - On Buster we use new daemon mode
			if (( $G_DISTRO > 4 )); then

				sed -Ei '/^(Type|KillMode|ExecStop)=/d' /etc/systemd/system/rtorrent.service
				G_CONFIG_INJECT 'ExecStart=' "ExecStart=$(command -v rtorrent)" /etc/systemd/system/rtorrent.service

			fi

			# - Default conf, do not overwrite if existent
			#	Example: https://github.com/rakshasa/rtorrent/blob/master/doc/rtorrent.rc
			#	Deprecated commands:
			#		- https://github.com/rakshasa/rtorrent/wiki/rTorrent-0.9-Comprehensive-Command-list-(WIP)
			#		- https://github.com/rakshasa/rtorrent/blob/master/doc/scripts/update_commands_0.9.sed
			mkdir -p $G_FP_DIETPI_USERDATA/rtorrent
			[[ -f $G_FP_DIETPI_USERDATA/rtorrent/.rtorrent.rc ]] || cat << _EOF_ > $G_FP_DIETPI_USERDATA/rtorrent/.rtorrent.rc
# Attempt to reduce disk throttling/abuse
network.max_open_files.set = 50

# Max queue
scheduler.max_active.set = 3

# byte value
pieces.memory.max.set = $(( $(Optimise_BitTorrent 0) * 1024 * 1024 ))

# Maximum and minimum number of peers to connect to per torrent.
throttle.min_peers.normal.set = 1
throttle.max_peers.normal.set = $(( $(Optimise_BitTorrent 2) / 2 + 1 ))

# Same as above but for seeding completed torrents (-1 = same as downloading)
throttle.min_peers.seed.set = -1
throttle.max_peers.seed.set = -1

# Maximum number of simultaneous downloads
throttle.max_downloads.set = $(Optimise_BitTorrent 2)
# Maximum number of simultaneous uploads
throttle.max_uploads.set = $(Optimise_BitTorrent 3)

# Global upload and download rate in KiB. "0" for unlimited.
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb = 0

# Default directory to save the downloaded torrents.
directory.default.set = $G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session.path.set = $G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/.session

# UMask
system.umask.set = 002

# Close torrents when diskspace is low.
schedule2 = low_diskspace,5,60,close_low_diskspace=1000M

# Periodically save session data
schedule2 = session_save,240,300,session_save=

# Enable the default ratio group.
ratio.enable=yes
# Change the limits, the defaults should be sufficient.
# Upload to a minimum ratio of 1.01
ratio.min.set=101
# Upload to a maximum ratio of 1.25
ratio.max.set=125
# Upload a minimum of x MB
ratio.upload.set=1M

# When seeding ratio is reached close the torrent
method.set = group.seeding.ratio.command,d.close=

# Move files to ./unsorted when download completes
method.set_key = event.download.finished,move_complete,"execute=mv,-n,$d.get_base_path=,./unsorted/;d.set_directory=./unsorted/"

# Port range to use for listening.
network.port_range.set = 33101-33199

# Start opening ports at a random position within the port range.
network.port_random.set = yes

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
protocol.encryption.set = require

# Sort the main view by ratio
view.sort_current = main,greater=d.get_ratio=
view.sort_new = main,less=d.get_ratio=
view.sort = main

# Sort the seeding view by the upload rate and only show torrents with peers
view.sort_current = seeding,greater=d.get_up_rate=
view.filter = seeding,"and=d.get_complete=,d.get_peers_connected="
view.sort_new = seeding,less=d.get_up_rate=
view.sort = seeding

# Sort the leeching view by name
view.sort_current = leeching,greater=d.get_name=
view.sort_new = leeching,greater=d.get_name=
view.sort = leeching

# Filter the active view by connected peers
view.sort_current = active,less=d.get_name=
view.sort_new = leeching,less=d.get_name=
view.filter = active,d.get_peers_connected=
view.sort = active

schedule2 = sort_main,11,5,view.sort=main
schedule2 = sort_seeding,12,5,view.sort=seeding
schedule2 = sort_leeching,13,5,view.sort=leeching
schedule2 = sort_active,14,5,view.sort=active

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
dht.mode.set = auto

# UDP port to use for DHT.
#
#dht.port.set = 6881

# Enable peer exchange (for torrents not marked private)
#
protocol.pex.set = yes

# SCGI Connectivity (for alternative rtorrent interfaces, XMLRPC)
#
# Use a IP socket with scgi_port, or a Unix socket with scgi_local.
# schedule can be used to set permissions on the unix socket.
#
scgi_port = 127.0.0.1:5000
#scgi_local = /home/user/rtorrent/rpc.socket
#schedule2 = scgi_permission,0,0,"execute.nothrow=chmod,\"g+w,o=\",/home/user/rtorrent/rpc.socket"
_EOF_
			# On Buster use new daemon mode
			(( $G_DISTRO > 4 )) && G_CONFIG_INJECT 'system.daemon.set[[:blank:]=]' 'system.daemon.set = true' $G_FP_DIETPI_USERDATA/rtorrent/.rtorrent.rc
			chown -R rtorrent:rtorrent $G_FP_DIETPI_USERDATA/rtorrent $G_FP_DIETPI_USERDATA/downloads/.session

		fi

		software_id=132 # Aria2
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# User
			local usercmd='useradd -rMN'
			getent passwd aria2 &> /dev/null && usercmd='usermod'
			$usercmd -g dietpi -d $G_FP_DIETPI_USERDATA/aria2 -s $(command -v nologin) aria2

			# Config
			mkdir -p $G_FP_DIETPI_USERDATA/aria2
			[[ -f $G_FP_DIETPI_USERDATA/aria2/aria2.conf ]] || cat << _EOF_ > $G_FP_DIETPI_USERDATA/aria2/aria2.conf
# DietPi default aria2c options served as aria2.conf file via --conf-path
# https://aria2.github.io/manual/en/html/aria2c.html#options

# Logging
log=/var/log/aria2.log
log-level=warn

# Session
always-resume=true
continue=true
input-file=$G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/aria2.session
save-session=$G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/aria2.session
save-session-interval=60

# Connection
listen-port=6881-6999
ftp-pasv=true
check-certificate=false
# - Count
max-concurrent-downloads=$(Optimise_BitTorrent 1)
split=$(Optimise_BitTorrent 1)
max-connection-per-server=$(Optimise_BitTorrent 1)
bt-max-peers=$(Optimise_BitTorrent 2)
# - Bandwidth
max-overall-upload-limit=0
max-upload-limit=0
max-overall-download-limit=0
max-download-limit=0
# - Retries
max-file-not-found=3
max-tries=5
retry-wait=60

# RPC
enable-rpc=true
rpc-listen-all=true
rpc-listen-port=6800
rpc-secret=$GLOBAL_PW
rpc-allow-origin-all=true
pause=false

# Store
dir=$G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS
allow-overwrite=false
auto-file-renaming=false
file-allocation=none
check-integrity=true

# Seeding
seed-ratio=0.1
seed-time=0
_EOF_

			# Pre-create log file
			local fp_log=$(sed -n '/^[[:blank:]]*log=/{s/^[^=]*=//p;q}' $G_FP_DIETPI_USERDATA/aria2/aria2.conf)
			[[ ${fp_log//\"} && ! -f $fp_log ]] && >> $fp_log

			# Pre-create input file
			local fp_input=$(sed -n '/^[[:blank:]]*input-file=/{s/^[^=]*=//p;q}' $G_FP_DIETPI_USERDATA/aria2/aria2.conf)
			[[ ${fp_input//\"} && ! -f $fp_input ]] && >> $fp_input

			# Permissions
			chown -R aria2:root $G_FP_DIETPI_USERDATA/aria2 $fp_input
			chown aria2:dietpi $fp_log
			chmod 600 $G_FP_DIETPI_USERDATA/aria2/aria2.conf
			unset fp_log fp_input

			# Service
			cat << _EOF_ > /etc/systemd/system/aria2.service
[Unit]
Description=Aria2 (DietPi)

[Service]
User=aria2
UMask=002
ExecStart=$(command -v aria2c) --conf-path=$G_FP_DIETPI_USERDATA/aria2/aria2.conf

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=50 # Syncthing
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Generate dirs
			mkdir -p $G_FP_DIETPI_USERDATA/syncthing
			mkdir -p $G_FP_DIETPI_USERDATA/syncthing_data

			# - Logs/Binary
			mkdir -p /var/log/syncthing
   			>> /var/log/syncthing/syncthing.log
   			chown -R dietpi:dietpi /var/log/syncthing
   			chown -R dietpi:dietpi /etc/syncthing

			# Run Syncthing to create cert/config and exit
			/etc/syncthing/syncthing -generate=$G_FP_DIETPI_USERDATA/syncthing

			# Disable automatic upgrades
			sed -i '/<\/autoUpgradeIntervalH>/c\        <autoUpgradeIntervalH>0<\/autoUpgradeIntervalH>' $G_FP_DIETPI_USERDATA/syncthing/config.xml

			# Allow external access (LAN).
			sed -i '/:8384<\/address>/c\        <address>0.0.0.0:8384<\/address>' $G_FP_DIETPI_USERDATA/syncthing/config.xml

			# Set default folder
			sed -i '/label=\"Default Folder/c\    <folder id=\"0000-0000\" label=\"Syncthing Data\" path=\"'"$G_FP_DIETPI_USERDATA/syncthing_data"'\" type=\"readwrite\" rescanIntervalS=\"60\" ignorePerms=\"false\" autoNormalize=\"true\">' $G_FP_DIETPI_USERDATA/syncthing/config.xml

			# Disable browser starting
			sed -i '/<\/startBrowser>/c\        <startBrowser>false<\/startBrowser>' $G_FP_DIETPI_USERDATA/syncthing/config.xml

			# Enable filesystem watcher (previously inotify)
			sed -i 's/fsWatcherEnabled=\"false\"/fsWatcherEnabled=\"true\"/g' $G_FP_DIETPI_USERDATA/syncthing/config.xml

			# Services
			cat << _EOF_ > /etc/systemd/system/syncthing.service
[Unit]
Description=Syncthing (DietPi)
After=network.target

[Service]
User=dietpi
ExecStart=/etc/syncthing/syncthing -logfile=/var/log/syncthing/syncthing.log -logflags=3 -home=$G_FP_DIETPI_USERDATA/syncthing

[Install]
WantedBy=multi-user.target
_EOF_

			# - Increase open file limit:
			echo 'fs.inotify.max_user_watches=204800' > /etc/sysctl.d/dietpi-syncthing.conf

		fi

		software_id=111 # UrBackup Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# As we have /tmp mounted to RAM, change tmp location
			mkdir -p $G_FP_DIETPI_USERDATA/urbackup/tmp
			chown -R urbackup:urbackup $G_FP_DIETPI_USERDATA/urbackup
			G_CONFIG_INJECT 'DAEMON_TMPDIR=' "DAEMON_TMPDIR='$G_FP_DIETPI_USERDATA/urbackup/tmp'"

			# https://github.com/MichaIng/DietPi/issues/545#issuecomment-252419739
			#sqlite3 /usr/local/var/urbackup/backup_server_settings.db "UPDATE settings SET value = '$G_FP_DIETPI_USERDATA/urbackup/' WHERE key = 'backupfolder'"

		fi

		software_id=116 # Medusa
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# User
			local usercmd='useradd -rMU'
			getent passwd medusa &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/medusa -s $(command -v nologin) medusa

			# Service
			cp $G_FP_DIETPI_USERDATA/medusa/runscripts/init.systemd /etc/systemd/system/medusa.service
			G_CONFIG_INJECT 'Group=' 'Group=dietpi' /etc/systemd/system/medusa.service '\[Service\]'
			G_CONFIG_INJECT 'ExecStart=' "ExecStart=$(command -v python3) $G_FP_DIETPI_USERDATA/medusa/start.py -q --nolaunch --datadir=$G_FP_DIETPI_USERDATA/medusa" /etc/systemd/system/medusa.service

			# Permissions
			chown -R medusa:dietpi $G_FP_DIETPI_USERDATA/medusa

		fi

		software_id=134 # Tonido
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd tonido &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -s $(command -v nologin) tonido

			# Service
			cat << _EOF_ > /etc/systemd/system/tonido.service
[Unit]
Description=Tonido (DietPi)

[Service]
User=tonido
Group=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/tonido
ExecStart=/bin/dash -c 'export LD_LIBRARY_PATH=$G_FP_DIETPI_USERDATA/tonido; export TONIDODIR=$G_FP_DIETPI_USERDATA/tonido; ./tonidoconsole'

[Install]
WantedBy=multi-user.target
_EOF_

			# User dirs
			mkdir -p /home/tonido $G_FP_DIETPI_USERDATA/tonido/sync{,data}
			# - Symlink
			[[ -d '/home/tonido/tonido' ]] && cp -a /home/tonido/tonido $G_FP_DIETPI_USERDATA/ &> /dev/null
			rm -Rf /home/tonido/{tonido,TonidoSync{,Data}}
			ln -s $G_FP_DIETPI_USERDATA/tonido /home/tonido/tonido
			ln -s $G_FP_DIETPI_USERDATA/tonido/sync /home/tonido/TonidoSync
			ln -s $G_FP_DIETPI_USERDATA/tonido/syncdata /home/tonido/TonidoSyncData

			# Permissions
			chown -R tonido:dietpi $G_FP_DIETPI_USERDATA/tonido /home/tonido

			# ARMv7 switch
			if (( $G_HW_ARCH == 2 )); then

				sed -i 's/armv6l/armv7l/' $G_FP_DIETPI_USERDATA/tonido/manifest.xml
				sed -i 's/armv6l/armv7l/' $G_FP_DIETPI_USERDATA/tonido/plugins/*/manifest.xml

			fi

		fi

		software_id=113 # Chromium
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Allow root, start maximized and disable sandbox under root (blank screen without)
			local export_options="export CHROMIUM_FLAGS=\"\$CHROMIUM_FLAGS \
--test-type \
--no-sandbox \
--temp-profile \
--user-data-dir \
--disable-smooth-scrolling \
--disable-low-res-tiling \
--enable-low-end-device-mode \
--num-raster-threads=$G_HW_CPU_CORES \
--profiler-timing=0 \
--disable-composited-antialiasing "

			# RPi
			if (( $G_HW_MODEL < 10 )); then

				# - OpenGL
				#if (( $G_HW_MODEL >= 2 )); then

					# Hangs xinit: https://github.com/MichaIng/DietPi/issues/834
					#/DietPi/dietpi/func/dietpi-set_hardware rpi-opengl vc4-kms-v3d

				#fi
				:

			# OpenGL
			elif (( $G_HW_MODEL == 21 )); then

				:

			# GLES
			else

				export_options+='--use-gl=egl'

			fi

			export_options+='"'

			mkdir -p /etc/chromium.d
			echo "$export_options" > /etc/chromium.d/custom_flags

			# Chromium 60+
			cp /etc/chromium.d/custom_flags /root/.chromium-browser.init

			# Symlink to desktop
			# - * for RPi Stretch due to chromium-browser.desktop
			ln -sf /usr/share/applications/chromium*.desktop /root/Desktop/chromium.desktop &> /dev/null

			# Autostart run script for Kiosk mode, based on @AYapejian https://github.com/MichaIng/DietPi/issues/1737#issue-318697621
			cat << _EOF_ > /var/lib/dietpi/dietpi-software/installed/chromium-autostart.sh
#!/bin/bash
# Autostart run script for Kiosk mode, based on @AYapejian https://github.com/MichaIng/DietPi/issues/1737#issue-318697621
# - Please see /root/.chromium-browser.init (and /etc/chromium.d/custom_flags) for additional egl/gl init options

# Command line switches https://peter.sh/experiments/chromium-command-line-switches/
# --test-type gets rid of some of the chromium warnings that you may or may not care about in kiosk on a LAN
# --pull-to-refresh=1
# --ash-host-window-bounds="400,300"

# - Resolution to use for kiosk mode, should ideally match current system resolution
RES_X=\$(grep -m1 '^[[:blank:]]*SOFTWARE_CHROMIUM_RES_X=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
RES_Y=\$(grep -m1 '^[[:blank:]]*SOFTWARE_CHROMIUM_RES_Y=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')

CHROMIUM_OPTS="--kiosk --test-type --window-size=\$RES_X,\$RES_Y --start-fullscreen --start-maximized --window-position=0,0"
# - If you want tablet mode, uncomment the next line.
#CHROMIUM_OPTS+=' --force-tablet-mode --tablet-ui'

# - Add URL for first run:
URL=\$(grep -m1 '^[[:blank:]]*SOFTWARE_CHROMIUM_AUTOSTART_URL=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')
CHROMIUM_OPTS+=" --homepage \$URL"

# Find absolute filepath location of Chromium binary.
FP_CHROMIUM=\$(command -v chromium)
if [[ ! \$FP_CHROMIUM ]]; then

	# - Assume RPi
	FP_CHROMIUM="\$(command -v chromium-browser)"

fi

xinit \$FP_CHROMIUM \$CHROMIUM_OPTS
_EOF_
			chmod +x /var/lib/dietpi/dietpi-software/installed/chromium-autostart.sh

		fi

		software_id=129 # O!MPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Preserve config file, create local override if non-existent
			# Database will be migrated automatically, so only create new on fresh install, using local override config as flag
			if [[ ! -f '/var/www/ompd/include/config.local.inc.php' ]]; then

				G_RUN_CMD systemctl start mariadb
				# - Create database user only, database will be created automatically
				mysql -e "grant all privileges on ompd.* to ompd@localhost identified by '$GLOBAL_PW'"
				systemctl stop mariadb

				cat << _EOF_ > /var/www/ompd/include/config.local.inc.php
<?php
# Database
\$cfg['mysqli_host']                 = '127.0.0.1';
\$cfg['mysqli_db']                   = 'ompd';
\$cfg['mysqli_user']                 = 'ompd';
\$cfg['mysqli_password']             = '$GLOBAL_PW';
\$cfg['mysqli_port']                 = '';
\$cfg['mysqli_socket']               = '/run/mysqld/mysqld.sock';
\$cfg['mysqli_auto_create_db']       = true;
# Media dir
\$cfg['media_dir']                   = '/mnt/dietpi_userdata/Music';
?>
_EOF_

			fi

			# Webserver configs
			# - Lighttpd
			if (( ${aSOFTWARE_INSTALL_STATE[84]} > 0 )); then

				dps_index=$software_id Download_Install 'lighttpd.ompd.conf' /etc/lighttpd/conf-available/99-dietpi-ompd.conf
				lighttpd-enable-mod dietpi-ompd

			fi

			# Permissions: http://ompd.pl/configuration
			chown -R www-data:www-data /var/www/ompd/{tmp,stream,cache}

		fi

		software_id=135 # IceCast + DarkIce
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# IceCast set passwords
			sed -i '/\<source-password\>/c\\<source-password\>'"$GLOBAL_PW"'\<\/source-password\>' /etc/icecast2/icecast.xml
			sed -i '/\<relay-password\>/c\\<relay-password\>'"$GLOBAL_PW"'\<\/relay-password\>' /etc/icecast2/icecast.xml

			# - Create random password
			local admin_password=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w10 | head -n1)
			sed -i "/\<admin-password\>/c\\<admin-password\>$admin_password\<\/admin-password\>" /etc/icecast2/icecast.xml

			sed -i '/ENABLE=/c\ENABLE=true' /etc/default/icecast2

			# DarkIce
			local input_device_index=$(arecord -l | mawk '/card/ {print $2;exit}' | sed 's/://')

			cat << _EOF_ > /etc/darkice.cfg
[general]
duration      = 0
bufferSecs    = 3
reconnect     = yes

[input]
device        = hw:$input_device_index,0
sampleRate    = 44100
bitsPerSample = 16
channel       = 1

[icecast2-0]
bitrateMode   = vbr
format        = vorbis
quality       = 0.8
server        = dietpi
port          = 8000
password      = $GLOBAL_PW
mountPoint    = DietPi
name          = DietPi
description   = DarkIce on DietPi
url           = http://localhost
genre         = none
public        = no
#localDumpFile = $G_FP_DIETPI_USERDATA/darkice_recording.ogg
_EOF_

			# systemd service for DarkIce
			[[ -f '/etc/init.d/darkice' ]] && rm /etc/init.d/darkice
			update-rc.d -f darkice remove
			cat << _EOF_ > /etc/systemd/system/darkice.service
[Unit]
Description=DarkIce (DietPi)
Requires=icecast2.service
After=icecast2.service

[Service]
ExecStart=$(command -v darkice)

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=123 # Mosquitto
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			[[ -f '/etc/init.d/mosquitto' ]] && rm /etc/init.d/mosquitto
			update-rc.d -f mosquitto remove
			cat << _EOF_ > /etc/systemd/system/mosquitto.service
[Unit]
Description=Mosquitto (DietPi)
After=network.target

[Service]
ExecStart=$(command -v mosquitto) -c /etc/mosquitto/mosquitto.conf

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=131 # Blynk Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Preserve existing config
			if [[ ! -f $G_FP_DIETPI_USERDATA/blynk/server.properties ]]; then

				local config_file_url_address='https://raw.githubusercontent.com/blynkkk/blynk-server/master/server/core/src/main/resources/server.properties'
				G_RUN_CMD wget "$config_file_url_address" -O $G_FP_DIETPI_USERDATA/blynk/server.properties
				G_CONFIG_INJECT 'data.folder=' "data.folder=$G_FP_DIETPI_USERDATA/blynk/data" $G_FP_DIETPI_USERDATA/blynk/server.properties
				# - Log to RAMlog
				mkdir -p /var/log/blynk
				G_CONFIG_INJECT 'logs.folder=' 'logs.folder=/var/log/blynk' $G_FP_DIETPI_USERDATA/blynk/server.properties

			fi

			# User
			local usercmd='useradd -rMU'
			getent passwd blynk &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/blynk -s $(command -v nologin) blynk

			# Service
			cat << _EOF_ > /etc/systemd/system/blynkserver.service
[Unit]
Description=Blynk Server (DietPi)
After=network.target

[Service]
User=blynk
Group=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/blynk
ExecStart=$(command -v java) -jar $G_FP_DIETPI_USERDATA/blynk/blynkserver.jar

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R blynk:dietpi $G_FP_DIETPI_USERDATA/blynk /var/log/blynk

		fi

		software_id=136 # MotionEye
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Enable RPi cam
			if (( $G_HW_MODEL < 10 )); then

				/DietPi/dietpi/func/dietpi-set_hardware rpi-camera enable

			fi

			mkdir -p /etc/motioneye
			G_BACKUP_FP /etc/motioneye/motioneye.conf
			cp /usr/local/share/motioneye/extra/motioneye.conf.sample /etc/motioneye/motioneye.conf

			mkdir -p $G_FP_DIETPI_USERDATA/motioneye
			sed -i "/^media_path/c\media_path $G_FP_DIETPI_USERDATA/motioneye" /etc/motioneye/motioneye.conf

			# Service
			cp /usr/local/share/motioneye/extra/motioneye.systemd-unit-local /etc/systemd/system/motioneye.service

		fi

		software_id=137 # CloudPrint
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Enable web admin
			G_RUN_CMD systemctl start cups
			cupsctl --remote-admin
			usermod -a -G lpadmin root
			systemctl stop cups

		fi

		software_id=138 # VirtualHere
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			cat << _EOF_ > /etc/systemd/system/virtualhere.service
[Unit]
Description=VirtualHere (DietPi)
After=local-fs.target

[Service]
ExecStart=/etc/vhusbd/vhusbd -r /var/log/virtualhere.log

[Install]
WantedBy=multi-user.target
_EOF_

			echo "ServerName='DietPi'" > /etc/vhusbd/config.ini

		fi

		software_id=139 # SABnzbd
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# User
			local usercmd='useradd -rMU'
			getent passwd sabnzbd &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d /etc/sabnzbd -s $(command -v nologin) sabnzbd

			# Service: https://github.com/sabnzbd/sabnzbd/blob/master/linux/sabnzbd%40.service
			# - Options: https://sabnzbd.org/wiki/advanced/command-line-parameters
			#	"-OO":	Optimise code and remove doc lines (default shebang of SABnzbd.py, but we run python2.7 explicitly to avoid version conflicts)
			#	"-d": Run in daemon mode without terminal and browser start (requires "-f </path/to/config.ini>")
			#	      NB: In systemd unit leads to unreliable long taking webserver start. A new process is forked which allows web access, but sometimes after very long time, sometimes never: https://github.com/sabnzbd/sabnzbd/issues/1283
			#	"-b 0":	Do no start browser with daemon
			cat << _EOF_ > /etc/systemd/system/sabnzbd.service
[Unit]
Description=SABnzbd (DietPi)
Documentation=https://sabnzbd.org/wiki/
Wants=network-online.target
After=network-online.target

[Service]
User=sabnzbd
Group=dietpi
ExecStart=$(command -v python2.7) -OO /etc/sabnzbd/SABnzbd.py -b 0 -f /etc/sabnzbd/sabnzbd.ini
Restart=on-failure

[Install]
WantedBy=multi-user.target
_EOF_

			# Log dir and permissions
			mkdir -p /var/log/sabnzbd
			chown -R sabnzbd:sabnzbd /etc/sabnzbd /var/log/sabnzbd

			# Create config
			# - Touch only if it does not yet exist, assume reinstall otherwise and preserve custom changes
			# - API keys and initial config are only generated during 1st run
			# - We need to launch program, then apply our config tweaks, else, wizard setup in web interface simply loops without API keys.
			if [[ ! -f '/etc/sabnzbd/sabnzbd.ini' ]]; then

				systemctl daemon-reload
				systemctl start sabnzbd

				G_DIETPI-NOTIFY 2 'Generating initial config, please wait...'
				while [[ ! -f '/etc/sabnzbd/sabnzbd.ini' ]]
				do

					sleep 0.5

				done
				sleep 2

				systemctl stop sabnzbd
				sleep 2 # Additional wait, config being overwritten after below changes: https://dietpi.com/phpbb/viewtopic.php?p=7082#p7082

				G_CONFIG_INJECT 'download_dir =' "download_dir = $G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/incomplete" /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'complete_dir =' "complete_dir = $G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/complete" /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'nzb_backup_dir =' "nzb_backup_dir = $G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/sabnzbd_nzb_backup" /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'admin_dir =' "admin_dir = $G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/sabnzbd_admin" /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'log_dir =' 'log_dir = /var/log/sabnzbd' /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'log_level =' 'log_level = 0' /etc/sabnzbd/sabnzbd.ini # Warning  errors only
				G_CONFIG_INJECT 'refresh_rate =' 'refresh_rate = 2' /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'host =' 'host = 0.0.0.0' /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'permissions =' 'permissions = 0775' /etc/sabnzbd/sabnzbd.ini
				G_CONFIG_INJECT 'auto_browser =' 'auto_browser = 0' /etc/sabnzbd/sabnzbd.ini

			fi

			# Install language packs: https://github.com/MichaIng/DietPi/issues/1917#issue-340631943
			cd /etc/sabnzbd
			G_RUN_CMD python2.7 tools/make_mo.py
			cd /tmp/$G_PROGRAM_NAME

		fi

		software_id=141 # Spotify Connect Web
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			cat << _EOF_ > /etc/systemd/system/spotify-connect-web.service
[Unit]
Description=Spotify Connect Web (DietPi)
After=sound.target

[Service]
WorkingDirectory=$G_FP_DIETPI_USERDATA/spotify-connect-web
ExecStart=$G_FP_DIETPI_USERDATA/spotify-connect-web/spotify-connect-web

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=142 # CouchPotato
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			cp /etc/couchpotato/init/ubuntu.default /etc/default/couchpotato
			sed -i "/CP_USER=/c\CP_USER=root" /etc/default/couchpotato
			sed -i "/CP_HOME=/c\CP_HOME=/etc/couchpotato" /etc/default/couchpotato
			sed -i "/CP_DATA=/c\CP_DATA=$G_FP_DIETPI_USERDATA/couchpotato" /etc/default/couchpotato

			mkdir -p $G_FP_DIETPI_USERDATA/couchpotato
			#useradd -d $G_FP_DIETPI_USERDATA/couchpotato couchpotato

			cp /etc/couchpotato/init/ubuntu /etc/init.d/couchpotato

		fi

		software_id=143 # Koel
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd koel &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -s $(command -v nologin) koel

			Download_Test_Media

			/DietPi/dietpi/func/create_mysql_db koel koel "$GLOBAL_PW"

			cd $G_FP_DIETPI_USERDATA/koel

			G_CONFIG_INJECT 'DB_CONNECTION=' 'DB_CONNECTION=mysql' .env
			G_CONFIG_INJECT 'DB_HOST=' 'DB_HOST=127.0.0.1' .env
			G_CONFIG_INJECT 'DB_DATABASE=' 'DB_DATABASE=koel' .env
			G_CONFIG_INJECT 'DB_USERNAME=' 'DB_USERNAME=koel' .env
			GCI_PASSWORD=1 G_CONFIG_INJECT 'DB_PASSWORD=' "DB_PASSWORD=$GLOBAL_PW" .env
			# ADMIN env vars are not used any more, user prompt will ask for info.
			#G_CONFIG_INJECT 'ADMIN_EMAIL=' 'ADMIN_EMAIL=dietpi@dietpi.com' .env
			#G_CONFIG_INJECT 'ADMIN_NAME=' 'ADMIN_NAME=admin' .env
			#GCI_PASSWORD=1 G_CONFIG_INJECT 'ADMIN_PASSWORD=' "ADMIN_PASSWORD=$GLOBAL_PW" .env
			G_CONFIG_INJECT 'FFMPEG_PATH=' "FFMPEG_PATH=$(command -v ffmpeg)" .env

			php artisan koel:init
			#php artisan db:seed --force

			cd /tmp/$G_PROGRAM_NAME

			cat << _EOF_ > /etc/systemd/system/koel.service
[Unit]
Description=Koel (DietPi)

[Service]
User=koel
Group=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/koel
ExecStart=$(command -v php) $G_FP_DIETPI_USERDATA/koel/artisan serve --host 0.0.0.0

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R koel:dietpi $G_FP_DIETPI_USERDATA/koel

		fi

		software_id=144 # Sonarr
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd sonarr &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/sonarr -s $(command -v nologin) sonarr

			mkdir -p $G_FP_DIETPI_USERDATA/sonarr

			cat << _EOF_ > /etc/systemd/system/sonarr.service
[Unit]
Description=Sonarr (NzbDrone) Daemon (DietPi)
After=network.target

[Service]
User=sonarr
Group=dietpi
ExecStart=/usr/bin/mono -O=-aot /opt/NzbDrone/NzbDrone.exe -nobrowser -data=$G_FP_DIETPI_USERDATA/sonarr

[Install]
WantedBy=multi-user.target
_EOF_

			# Logs to RAM
			rm -R $G_FP_DIETPI_USERDATA/sonarr/logs* &> /dev/null
			mkdir -p /var/log/sonarr
			ln -sf /var/log/sonarr $G_FP_DIETPI_USERDATA/sonarr/logs
			ln -sf /var/log/sonarr/logs.db $G_FP_DIETPI_USERDATA/sonarr/logs.db
			ln -sf /var/log/sonarr/logs.db-shm $G_FP_DIETPI_USERDATA/sonarr/logs.db-shm
			ln -sf /var/log/sonarr/logs.db-wal $G_FP_DIETPI_USERDATA/sonarr/logs.db-wal

			# Permissions
			chown -R sonarr:dietpi $G_FP_DIETPI_USERDATA/sonarr /opt/NzbDrone /var/log/sonarr

		fi

		software_id=145 # Radarr
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd radarr &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/radarr -s $(command -v nologin) radarr

			mkdir -p $G_FP_DIETPI_USERDATA/radarr

			cat << _EOF_ > /etc/systemd/system/radarr.service
[Unit]
Description=Radarr Daemon (DietPi)
After=network.target

[Service]
User=radarr
Group=dietpi
ExecStart=/usr/bin/mono -O=-aot /opt/Radarr/Radarr.exe -nobrowser -data=$G_FP_DIETPI_USERDATA/radarr

[Install]
WantedBy=multi-user.target
_EOF_

			# Logs to RAM
			rm -R $G_FP_DIETPI_USERDATA/radarr/logs* &> /dev/null
			mkdir -p /var/log/radarr
			ln -sf /var/log/radarr $G_FP_DIETPI_USERDATA/radarr/logs
			ln -sf /var/log/radarr/logs.db $G_FP_DIETPI_USERDATA/radarr/logs.db
			ln -sf /var/log/radarr/logs.db-shm $G_FP_DIETPI_USERDATA/radarr/logs.db-shm
			ln -sf /var/log/radarr/logs.db-wal $G_FP_DIETPI_USERDATA/radarr/logs.db-wal

			# Permissions
			chown -R radarr:dietpi $G_FP_DIETPI_USERDATA/radarr /opt/Radarr /var/log/radarr

		fi

		software_id=106 # Lidarr
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd lidarr &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d $G_FP_DIETPI_USERDATA/lidarr -s $(command -v nologin) lidarr

			mkdir -p $G_FP_DIETPI_USERDATA/lidarr

			cat << _EOF_ > /etc/systemd/system/lidarr.service
[Unit]
Description=lidarr (NzbDrone) Daemon (DietPi)
After=network.target

[Service]
User=lidarr
Group=dietpi
ExecStart=/usr/bin/mono -O=-aot /opt/Lidarr/Lidarr.exe -nobrowser -data=$G_FP_DIETPI_USERDATA/lidarr

[Install]
WantedBy=multi-user.target
_EOF_

			# Logs to RAM
			rm -R $G_FP_DIETPI_USERDATA/lidarr/logs* &> /dev/null
			mkdir -p /var/log/lidarr
			ln -sf /var/log/lidarr $G_FP_DIETPI_USERDATA/lidarr/logs
			ln -sf /var/log/lidarr/logs.db $G_FP_DIETPI_USERDATA/lidarr/logs.db
			ln -sf /var/log/lidarr/logs.db-shm $G_FP_DIETPI_USERDATA/lidarr/logs.db-shm
			ln -sf /var/log/lidarr/logs.db-wal $G_FP_DIETPI_USERDATA/lidarr/logs.db-wal

			# Permissions
			chown -R lidarr:dietpi $G_FP_DIETPI_USERDATA/lidarr /opt/Lidarr /var/log/lidarr

		fi

		software_id=146 # PlexPy
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# User
			local usercmd='useradd -rMU'
			getent passwd plexpy &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -d /opt/plexpy -s $(command -v nologin) plexpy

			# Directory
			mkdir -p $G_FP_DIETPI_USERDATA/plexpy

			# Service
			cat << _EOF_ > /etc/systemd/system/plexpy.service
[Unit]
Description=Tautulli - Stats for Plex Media Server usage (DietPi)

[Service]
Type=forking
User=plexpy
Group=dietpi
GuessMainPID=no
ExecStart=/opt/plexpy/PlexPy.py --quiet --daemon --nolaunch --config /opt/plexpy/config.ini --datadir $G_FP_DIETPI_USERDATA/plexpy

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R plexpy:plexpy /opt/plexpy
			chown -R plexpy:dietpi $G_FP_DIETPI_USERDATA/plexpy

		fi

		software_id=147 # Jackett
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# User
			local usercmd='useradd -rMU'
			getent passwd jackett &> /dev/null && usercmd='usermod'
			$usercmd -d /opt/jackett -s $(command -v nologin) jackett

			# Permissions
			chown -R jackett:jackett /opt/jackett

			# Service: https://github.com/Jackett/Jackett/wiki/systemd-service
			cat << _EOF_ > /etc/systemd/system/jackett.service
[Unit]
Description=Jackett Daemon (DietPi)
After=network.target

[Service]
User=jackett
Environment=XDG_CONFIG_HOME=/opt/jackett
ExecStart=$(command -v mono) -O=-aot /opt/jackett/JackettConsole.exe --NoRestart
Restart=always
RestartSec=5
TimeoutStopSec=20

# These lines optionally isolate (sandbox) Jackett from the rest of the system.
ProtectSystem=strict
ProtectHome=true
PrivateDevices=true
PrivateTmp=true
ReadWritePaths=/opt/jackett

[Install]
WantedBy=multi-user.target
_EOF_
			# - Non-ARMv6 devices run the standalone version: https://github.com/Jackett/Jackett#install-on-linux-amdx64
			(( $G_HW_ARCH != 1 )) && G_CONFIG_INJECT 'ExecStart=' 'ExecStart=/opt/jackett/jackett --NoRestart' /etc/systemd/system/jackett.service

		fi

		software_id=149 # NZBget
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			local usercmd='useradd -rMU'
			getent passwd nzbget &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi -s $(command -v nologin) nzbget

			G_BACKUP_FP $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/MainDir=/c\MainDir=$G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/DestDir=/c\DestDir=$G_FP_DIETPI_USERDATA/$FOLDER_DOWNLOADS/complete" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf

			sed -i "/LogFile=/c\LogFile=/var/log/nzbget.log" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf

			sed -i "/ControlUsername=/c\ControlUsername=admin" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/ControlPassword=/c\ControlPassword=$GLOBAL_PW" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf

			# - Umask: https://github.com/MichaIng/DietPi/issues/1999
			sed -i "/UMask=/c\UMask=0002" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf

			# - Optimizations
			sed -i "/Server1.Cipher=/c\Server1.Cipher=RC4-MD5" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/CrcCheck=/c\CrcCheck=no" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/ParScan=/c\ParScan=limited" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/ParThreads=/c\ParThreads=$G_HW_CPU_CORES" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf

			sed -i "/DebugTarget=/c\DebugTarget=none" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/CrashTrace=/c\CrashTrace=no" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/DetailTarget=/c\DetailTarget=none" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf

			sed -i "/ParBuffer=/c\ParBuffer=$(Optimise_BitTorrent 0)" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/ArticleCache=/c\ArticleCache=$(Optimise_BitTorrent 0)" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf
			sed -i "/WriteBuffer=/c\WriteBuffer=$(Optimise_BitTorrent 0)" $G_FP_DIETPI_USERDATA/nzbget/nzbget.conf

			cat << _EOF_ > /etc/systemd/system/nzbget.service
[Unit]
Description=NZBget (DietPi)

[Service]
Type=forking
User=nzbget
Group=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/nzbget
ExecStart=$G_FP_DIETPI_USERDATA/nzbget/nzbget -D

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R nzbget:dietpi $G_FP_DIETPI_USERDATA/nzbget

		fi

		software_id=155 # HTPC Manager
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			cat << _EOF_ > /etc/systemd/system/htpc-manager.service
[Unit]
Description=HTPC Manager (DietPi)
After=network.target

[Service]
ExecStart=/usr/bin/python $G_FP_DIETPI_USERDATA/htpc-manager/Htpc.py

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=153 # OctoPrint
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			cat << _EOF_ > /etc/systemd/system/octoprint.service
[Unit]
Description=OctoPrint (DietPi)

[Service]
ExecStart=$(command -v octoprint) serve --iknowwhatimdoing

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=154 # Roon Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			cat << _EOF_ > /etc/systemd/system/roonserver.service
[Unit]
Description=Roon Server (DietPi)
After=network.target

[Service]
Environment=ROON_DATAROOT=$G_FP_DIETPI_USERDATA/roonserver
ExecStart=$G_FP_DIETPI_USERDATA/roonserver/start.sh

[Install]
WantedBy=multi-user.target
_EOF_

			# Permissions
			chown -R roon:dietpi $G_FP_DIETPI_USERDATA/roonserver

		fi

		software_id=156 # Steam
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			mkdir -p $G_FP_DIETPI_USERDATA/steam
			mv /root/.steam/* $G_FP_DIETPI_USERDATA/steam/
			rm -R /root/.steam

			ln -sf $G_FP_DIETPI_USERDATA/steam /root/.steam

		fi

		software_id=157 # Home Assistant
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

            cat << _EOF_ > /etc/systemd/system/home-assistant.service
[Unit]
Description=Home Assistant (DietPi)
After=network.target

[Service]
User=homeassistant
ExecStart=/srv/homeassistant/homeassistant-start.sh

[Install]
WantedBy=multi-user.target

_EOF_

			# Link to the default ha location for the homeassistant user, this makes
			# the configuration avaliable for the user to edit. Configuration generated
			# when service is started at /home/homeassistant/.homeassistant
			mkdir $G_FP_DIETPI_USERDATA/homeassistant
			ln -sf $G_FP_DIETPI_USERDATA/homeassistant /home/homeassistant/.homeassistant

		fi

		software_id=158 # Minio
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Create simple mandatory default configuration file, if not already existent:
			[[ -f '/etc/default/minio' ]] || cat << _EOF_ > /etc/default/minio
# Default file path
MINIO_VOLUMES="$G_FP_DIETPI_USERDATA/minio-data"
# Use if you want to run Minio on a custom port.
# MINIO_OPTS="--address :9199"
# Access Key of the server.
# MINIO_ACCESS_KEY=Server-Access-Key
# Secret key of the server.
# MINIO_SECRET_KEY=Server-Secret-Key
_EOF_

			# Enable startup on boot by default
			systemctl enable minio.service

		fi

		software_id=162 # Docker
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Set docker service to 'simple': https://github.com/MichaIng/DietPi/issues/2238#issuecomment-439474766
			mkdir -p /lib/systemd/system/docker.service.d
			echo -e '[Service]\nType=simple' > /lib/systemd/system/docker.service.d/dietpi-simple.conf

			# Move docker containers to dietpi_userdata
			mkdir -p $G_FP_DIETPI_USERDATA/docker-data
			if [[ -f '/etc/docker/daemon.json' ]]; then

				GCI_PRESERVE=1 G_CONFIG_INJECT '"data-root":' "    \"data-root\": \"$G_FP_DIETPI_USERDATA/docker-data\"," /etc/docker/daemon.json '^\{([[:space:]]\|$)'

			else

				mkdir -p /etc/docker
				echo -e "{\n    \"data-root\": \"$G_FP_DIETPI_USERDATA/docker-data\"\n}" > /etc/docker/daemon.json

			fi

		fi

		software_id=161 # FuguHub
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Setup Filestore DietPi appropriate
			# IF already present just create symlink
			if [[ ! -d $G_FP_DIETPI_USERDATA/fuguhub-data/ ]]; then

				# Move installed filestore to dietpi userdata
				mkdir $G_FP_DIETPI_USERDATA/fuguhub-data
				mv /home/bd/disk/* $G_FP_DIETPI_USERDATA/fuguhub-data/
				# Set permissions
				chown -R bd:bd $G_FP_DIETPI_USERDATA/fuguhub-data/
				#setfacl -R -m u:bd:rwx $G_FP_DIETPI_USERDATA/fuguhub-data/

			fi

			# Removed 'actual' folder to make way for symlink
			rm -Rf /home/bd/disk
			# Create symlink
			ln -s $G_FP_DIETPI_USERDATA/fuguhub-data /home/bd/disk

		fi

		software_id=164 # Nukkit
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Conig file to autostart -- english default
			wget -O /usr/local/bin/nukkit/nukkit.yml https://github.com/Nukkit/Languages/raw/master/eng/nukkit.yml
			# create systemd file
			cat << _EOF_ > /etc/systemd/system/nukkit.service
[Unit]
Description=nukkit (DietPi)

[Service]
WorkingDirectory=/usr/local/bin/nukkit
ExecStart=/bin/bash -c 'java -jar /usr/local/bin/nukkit/nukkit.jar'

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=165	# Gitea
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Service
			cat << _EOF_ > /etc/systemd/system/gitea.service

[Unit]
Description=Gitea (DietPi)

[Service]
User=dietpi
WorkingDirectory=$G_FP_DIETPI_USERDATA/gitea/gitea-repositories
ExecStart=$G_FP_DIETPI_USERDATA/gitea/gitea web
Environment=USER=dietpi HOME=$G_FP_DIETPI_USERDATA/gitea

[Install]
WantedBy=multi-user.target
_EOF_

			# Logs
			mkdir -p /var/log/gitea
			chown -R dietpi:dietpi /var/log/gitea

			# Database
			/DietPi/dietpi/func/create_mysql_db gitea gitea "$GLOBAL_PW"

		fi

		software_id=159 # Allo: 160 for quick reinstall/update
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[160]} == 1 )); then

			Banner_Configuration

			# Create allo user for GUI
			local usercmd='useradd -mU'
			getent passwd allo &> /dev/null && usercmd='usermod -a'
			$usercmd -G www-data -p 'allo' -s /bin/bash allo
			# - Grant sudo permissions
			echo 'allo ALL=NOPASSWD: ALL' > /etc/sudoers.d/allo

			# Always Drop DB, and, recreate it, due to error issue with reinstall over the top.
			mysqladmin drop allo_db -f &> /dev/null
			mysql -e 'drop user allo_db@localhost' &> /dev/null

			/DietPi/dietpi/func/create_mysql_db allo_db allo_db "$GLOBAL_PW"
			mysql allo_db < /var/www/allo_db.sql
			[[ -f '/var/www/allo_db.sql' ]] && rm /var/www/allo_db.sql

			# Redirect to web interface by default:
			rm -f /var/www/index.htm*
			cat << _EOF_ > /var/www/index.php
<?php
/* Redirect to allo web interface */
\$host  = \$_SERVER['HTTP_HOST'];
\$uri   = rtrim(dirname(\$_SERVER['PHP_SELF']), '/\\\\');
\$extra = 'index.php';
header("Location: http://\$host\$uri/allo/public/\$extra");
exit;
?>
_EOF_

			# HW specific changes
			# - SPARKY ONLY - Auto detect eth adapter
			if (( $G_HW_MODEL == 70 )); then

				# - Disable onboard ETH if adapter found
				cat << _EOF_ > /etc/systemd/system/sparky_eth_controller.service
[Unit]
Description=Sparky auto detect and set onboard ETH/USB ETH (DietPi)
After=network.target networking.service

[Service]
RemainAfterExit=yes
ExecStart=/usr/local/bin/sparky_eth_controller.sh

[Install]
WantedBy=multi-user.target
_EOF_
				systemctl daemon-reload
				systemctl enable sparky_eth_controller

				cat << _EOF_ > /usr/local/bin/sparky_eth_controller.sh
#!/bin/bash
# We need to wait until USB eth is established on USB bus. This takes much longer than onboard init and network.target network-pre.target
sleep 20
# - Set USB ETH if found
if ip a s eth1 &> /dev/null; then

	echo 'blacklist ethernet' > /etc/modprobe.d/disable_sparkysbc_ethernet.conf
	rm -f /etc/udev/rules.d/70-persist{e,a}nt-net.rules
	reboot

# - Enable onboard ETH if no adapter found
elif ! ip a s eth0 &> /dev/null; then

	[[ -f '/etc/modprobe.d/disable_sparkysbc_ethernet.conf' ]] && rm /etc/modprobe.d/disable_sparkysbc_ethernet.conf
	rm -f /etc/udev/rules.d/70-persist{e,a}nt-net.rules
	reboot

fi
_EOF_
				chmod +x /usr/local/bin/sparky_eth_controller.sh

			fi

			# - Allow for quick updates with 160 reinstall
			aSOFTWARE_INSTALL_STATE[160]=2

		fi

		software_id=163 # GMediaRender
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Create/Edit user
			local usercmd='useradd -rMU'
			getent passwd gmrender &> /dev/null && usercmd='usermod -a'
			$usercmd -G dietpi,audio -s $(command -v nologin) gmrender
			# - Add to new "render" group on Buster
			(( $G_DISTRO > 4 )) && usermod -aG render gmrender

			# Home dir (failsafe)
			mkdir -p /home/gmrender

			# Log file
			>> /var/log/gmrender.log

			# Permissions
			chown -R gmrender:dietpi /home/gmrender /var/log/gmrender.log

			# Service
			cat << _EOF_ > /etc/systemd/system/gmrender.service
[Unit]
Description=GMediaRender (DietPi)
After=network.target dietpi-boot.service

[Service]
User=gmrender
Group=dietpi
ExecStartPre=+$(command -v touch) /var/log/gmrender.log
ExecStartPre=+$(command -v chown) gmrender:dietpi /var/log/gmrender.log
ExecStart=/bin/dash -c 'gmediarender -u "$(sed -n 5p /DietPi/dietpi/.hw_model)" -f "$(</etc/hostname)" --gstout-audiodevice=sysdefault --gstout-initial-volume-db=-1 --logfile=/var/log/gmrender.log -I "\$(sed -n 4p /DietPi/dietpi/.network)"'

[Install]
WantedBy=multi-user.target
_EOF_

		fi

		software_id=166 # AudioPhonics Pi-SPC
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			mkdir -p /var/lib/dietpi/dietpi-software/installed/pi-spc

			cat << _EOF_ > /var/lib/dietpi/dietpi-software/installed/pi-spc/sds.sh
#!/bin/bash
# DietPi version
PATH+=':$HOME/wiringPi/gpio'

TICKRATE=0.25

echo 'Audiophonics Shutdown script starting...
Asserting pins :
ShutDown : GPIO17=in, Low
BootOK   : GPIO22=out, High
SoftSD   : GPIO04=out, Low'

gpio -g mode 04 out
gpio -g write 04 0
gpio -g mode 17 in
gpio -g write 17 0
gpio -g mode 22 out
gpio -g write 22 1

while :
do

	if (( \$(gpio -g read 17) == 1 )); then

		G_DIETPI-NOTIFY 0 'AudioPhonics Pi-SPC: Power off requested. Shutting down system.'
		sudo poweroff
		#sudo shutdown -h -P now
		break

	fi

	sleep \$TICKRATE

done

exit 0
_EOF_
			chmod +x /var/lib/dietpi/dietpi-software/installed/pi-spc/sds.sh

			cat << _EOF_ > /etc/systemd/system/pi-spc.service
[Unit]
Description=AudioPhonics Pi-SPC (DietPi)

[Service]
StandardOutput=tty
ExecStart=/var/lib/dietpi/dietpi-software/installed/pi-spc/sds.sh

[Install]
WantedBy=multi-user.target
_EOF_

			#G_CONFIG_INJECT 'dtoverlay=gpio-shutdown' 'dtoverlay=gpio-shutdown,gpio_pin=22,active_low=0' /DietPi/config.txt
			#G_CONFIG_INJECT 'dtoverlay=gpio-poweroff' 'dtoverlay=gpio-poweroff,gpio_pin=17' /DietPi/config.txt

		fi

		software_id=169 # Google AIY
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Symlink userdata location for assistant.json
			ln -sf $G_FP_DIETPI_USERDATA/voice-recognizer-raspi/assistant.json /home/dietpi/assistant.json

			# Generate cache dir
			mkdir -p /home/dietpi/.cache/voice-recognizer

			# Setup soundcard
			/DietPi/dietpi/func/dietpi-set_hardware soundcard googlevoicehat-soundcard

		fi

		software_id=176 # Mycroft AI
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# Service
			cat << _EOF_ > /etc/systemd/system/mycroft.service
[Unit]
Description=Mycroft AI (DietPi)

[Service]
Type=forking
User=mycroft
WorkingDirectory=$G_FP_DIETPI_USERDATA/mycroft-data
ExecStart=$G_FP_DIETPI_USERDATA/mycroft-core/start-mycroft.sh all
ExecStop=$G_FP_DIETPI_USERDATA/mycroft-core/stop-mycroft.sh

[Install]
WantedBy=multi-user.target
_EOF_
			# Add Mycroft binaries to $PATH
			cat << _EOF_ > /etc/bashrc.d/mycroft.sh
#!/bin/dash
export PATH=\$PATH:$G_FP_DIETPI_USERDATA/mycroft-core/bin
_EOF_

		fi

		software_id=100 # PiJuice
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == 1 )); then

			Banner_Configuration

			# RPi enable i2c required for GUI
			(( $G_HW_MODEL < 10 )) && /DietPi/dietpi/func/dietpi-set_hardware i2c enable

			mkdir -p /var/lib/dietpi/dietpi-software/installed/pijuice
			cat << _EOF_ > /var/lib/dietpi/dietpi-software/installed/pijuice/pijuice_func1.sh
#!/bin/bash
poweroff
_EOF_
			chmod +x /var/lib/dietpi/dietpi-software/installed/pijuice/pijuice_func1.sh

			cat << _EOF_ > /var/lib/pijuice/pijuice_config.JSON
{
  "system_events": {
    "low_battery_voltage": {
      "function": "SYS_FUNC_HALT",
      "enabled": true
    },
    "low_charge": {
      "function": "NO_FUNC",
      "enabled": true
    },
    "button_power_off": {
      "function": "USER_FUNC1",
      "enabled": true
    },
    "forced_power_off": {
      "function": "USER_FUNC2",
      "enabled": false
    },
    "no_power": {
      "function": "SYS_FUNC_HALT_POW_OFF",
      "enabled": true
    },
    "forced_sys_power_off": {
      "function": "USER_FUNC3",
      "enabled": false
    },
    "watchdog_reset": {
      "function": "USER_EVENT",
      "enabled": true
    }
  },
  "user_functions": {
    "USER_FUNC1": "/var/lib/dietpi/dietpi-software/installed/pijuice/pijuice_func1.sh",
    "USER_FUNC2": "/var/lib/dietpi/dietpi-software/installed/pijuice/pijuice_func2.sh",
    "USER_FUNC3": "/var/lib/dietpi/dietpi-software/installed/pijuice/pijuice_func3.sh",
    "USER_FUNC4": "",
    "USER_FUNC5": "",
    "USER_FUNC6": "",
    "USER_FUNC7": "",
    "USER_FUNC8": ""
  },
  "system_task": {
    "watchdog": {
      "enabled": true,
      "period": "60"
    },
    "min_bat_voltage": {
      "threshold": "1",
      "enabled": true
    },
    "min_charge": {
      "threshold": "1",
      "enabled": true
    },
    "enabled": true,
    "wakeup_on_charge": {
      "enabled": true,
      "trigger_level": "1"
    }
  }
}
_EOF_

		fi

	}

	Install_Apply_GPU_Settings(){

		# Disable headless mode based on installed software
		local gpu_enabled=0

		# RPi: Define minimal memory split based on installed software
		local gpu_memory=0
		local hw_memory_size=0
		(( $G_HW_MODEL < 10 )) && hw_memory_size=$(grep -m1 'HW_MEMORY_SIZE=' /DietPi/dietpi/.hw_model | sed 's/^[^=]*=//')

		# - Kodi
		if (( ${aSOFTWARE_INSTALL_STATE[31]} == 1 )); then

			gpu_enabled=1
			gpu_memory=320
			(( $hw_memory_size <= 512 )) && gpu_memory=256

		# - Mode 4 (Descent)
		elif (( ${aSOFTWARE_INSTALL_STATE[112]} == 1 )); then

			gpu_enabled=1
			gpu_memory=192

		# - Mode 3 (DIETPICAM / UAE4ARM / Chromium)
		elif (( ${aSOFTWARE_INSTALL_STATE[59]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[108]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[113]} == 1 )); then

			gpu_enabled=1
			gpu_memory=128

		# - Mode 2 (Desktops / OpenTyrian)
		elif (( ${aSOFTWARE_INSTALL_STATE[23]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[24]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[25]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[26]} == 1 ||
			${aSOFTWARE_INSTALL_STATE[51]} == 1 )); then

			gpu_enabled=1
			gpu_memory=64

		# - Mode 1 - DIETPICLOUDSHELL (forces display output)
		elif (( ${aSOFTWARE_INSTALL_STATE[62]} == 1 )); then

			gpu_enabled=1

		fi

		# RPi: Apply memory split
		if (( $G_HW_MODEL < 10 && $gpu_memory > 0 )); then

			# - Never override a higher existing value
			local current_gpu_mem=$(grep -m1 '^[[:blank:]]*gpu_mem_1024' /DietPi/config.txt | sed 's/^[^=]*=//g')
			G_WHIP_DEFAULT_ITEM='Ok'
			if (( $current_gpu_mem < $gpu_memory )) &&
				G_WHIP_YESNO "[ INFO ] DietPi has detected an increased GPU memory is required for your installed software:\n - Current: $current_gpu_mem MB\n - Recommended: $gpu_memory MB\n\nWould you like DietPi to apply the recommended GPU memory split?\n\nIf unsure, select 'Ok'."; then

				/DietPi/dietpi/func/dietpi-set_hardware gpumemsplit $gpu_memory

			fi

		fi

		# Disable headless/enable GPU
		(( $gpu_enabled )) && /DietPi/dietpi/func/dietpi-set_hardware headless 0

	}

	Check_USB_Drive_Installed(){

		USBDRIVE=0

		FP_DIETPI_DEDICATED_USBDRIVE=$(df -P | mawk '/^\/dev\/sda1/ {print $6;exit}')

		# Only enable if mounted
		[[ $FP_DIETPI_DEDICATED_USBDRIVE ]] && df -P | grep -qi "$FP_DIETPI_DEDICATED_USBDRIVE" && USBDRIVE=1

	}

	Uninstall_Software(){

		# NB: systemctl daemon-reload is executed at the end of this function
		local software_id=-1

		software_id=23
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			apt-mark unhold pcmanfm # RPi

			Banner_Uninstalling
			apt-mark auto upower policykit-1 firefox-esr
			G_AGP lxde lxde-*
			rm -Rf /root/.config/{lxpanel,lxsession,lxterminal}

		fi

		software_id=173
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto qterminal firefox-esr xarchiver lxde-icon-theme upower xscreensaver leafpad featherpad speedcrunch
			G_AGP lxqt
			[[ -d '/root/.config/lxqt' ]] && rm -R /root/.config/lxqt

		fi

		software_id=174
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP gimp

		fi

		software_id=175
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP xfce4-power-manager

		fi

		software_id=24
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto upower policykit-1 firefox-esr
			G_AGP mate-desktop-environment-extras

		fi

		software_id=26
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto upower policykit-1 firefox-esr
			G_AGP x-window-system-core wmaker gnustep gnustep-devel gnustep-games

		fi

		software_id=25
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto gnome-icon-theme tango-icon-theme firefox-esr
			G_AGP xfce4

		fi

		software_id=22
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP quiterss

		fi

		software_id=30
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP nomachine

		fi

		software_id=29
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP xrdp
			[[ -f '/etc/apt/preferences.d/dietpi-xrdp' ]] && rm /etc/apt/preferences.d/dietpi-xrdp

		fi

		software_id=44 # Transmission
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP transmission-daemon
			[[ -f '/etc/systemd/system/transmission-daemon.service' ]] && rm /etc/systemd/system/transmission-daemon.service # pre v6.17
			[[ -d '/etc/systemd/system/transmission-daemon.service.d' ]] && rm -R /etc/systemd/system/transmission-daemon.service.d # post v6.17

		fi

		software_id=47 # ownCloud
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			# Remove background cron job
			crontab -u www-data -l | grep -v '/var/www/owncloud/cron.php'  | crontab -u www-data -
			# Disable and remove PHP modules
			phpdismod dietpi-owncloud &> /dev/null
			rm -f /etc/php/*/mods-available/dietpi-owncloud.ini
			# Disable and remove webserver configs
			a2dissite dietpi-owncloud 2> /dev/null
			rm /etc/apache2/sites-available/dietpi-owncloud.conf 2> /dev/null
			rm /etc/nginx/sites-dietpi/dietpi-owncloud.conf 2> /dev/null
			G_WHIP_MSG "DietPi will perform an automated backup of your ownCloud database and installation directory, which will be stored inside your ownCloud data directory.\n\nThe data directory won't be removed. So you can recover your whole ownCloud instance any time later.\n\nRemove the data directory manually, if you don't need it anymore."
			# Drop MariaDB users and database
			local dbuser=$(grep -m1 "^[[:blank:]]*'dbuser'" /var/www/owncloud/config/config.php | mawk '{print $3}' | sed 's/,//')
			local dbhost=$(grep -m1 "^[[:blank:]]*'dbhost'" /var/www/owncloud/config/config.php | mawk '{print $3}' | sed 's/,//')
			# - Find datadir for backups
			local datadir=$(grep -m1 "^[[:blank:]]*'datadirectory'" /var/www/owncloud/config/config.php | mawk '{print $3}' | sed "s/[',]//g")
			[[ $datadir ]] || datadir=$G_FP_DIETPI_USERDATA/owncloud_data
			systemctl start mariadb
			mysql -e "drop user $dbuser@$dbhost"
			mysql -e "drop user $dbuser" 2> /dev/null
			# - Perform database backup if existent, otherwise skip to not overwrite existing one
			[[ -d $G_FP_DIETPI_USERDATA/mysql/owncloud ]] && mysqldump owncloud > $datadir/dietpi-owncloud-database-backup.sql
			mysqladmin drop owncloud -f
			# Backup ownCloud installation folder
			cp -a /var/www/owncloud/. $datadir/dietpi-owncloud-installation-backup/
			# Remove ownCloud installation folder
			rm -R /var/www/owncloud
			# Remove redirect configs
			if grep -q 'owncloud' /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf &> /dev/null; then

				lighttpd-disable-mod dietpi-dav_redirect
				rm /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf

			fi
			if grep -q 'owncloud' /etc/apache2/conf-available/dietpi-dav_redirect.conf &> /dev/null; then

				a2disconf dietpi-dav_redirect
				rm /etc/apache2/conf-available/dietpi-dav_redirect.conf

			fi
			grep -q 'owncloud' /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf &> /dev/null && rm /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf
			# PHP7.3 block removal
			[[ -f '/etc/apt/preferences.d/dietpi-owncloud' ]] && rm /etc/apt/preferences.d/dietpi-owncloud

		fi

		software_id=168 # Nextcloud Talk + coTURN server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP coturn
			[[ -f '/etc/turnserver.conf' ]] && rm /etc/turnserver.conf
			[[ -d '/etc/systemd/system/coturn.service.d' ]] && rm -R /etc/systemd/system/coturn.service.d
			systemctl start mariadb
			systemctl start redis-server
			ncc maintenance:mode --off
			ncc app:disable spreed
			G_DIETPI-NOTIFY 2 'Disabled Nextcloud Talk app, but you need to remove it manually from Nextcloud web UI, if desired.'

		fi

		software_id=114 # Nextcloud
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			crontab -u www-data -l | grep -v '/var/www/nextcloud/cron.php'  | crontab -u www-data -
			# Disable and remove PHP modules
			phpdismod dietpi-nextcloud &> /dev/null
			rm -f /etc/php/*/mods-available/dietpi-nextcloud.ini
			# Disable and remove webserver configs
			a2dissite dietpi-nextcloud 2> /dev/null
			rm /etc/apache2/sites-available/dietpi-nextcloud.conf 2> /dev/null
			rm /etc/nginx/sites-dietpi/dietpi-nextcloud.conf 2> /dev/null
			lighttpd-disable-mod dietpi-nextcloud 2> /dev/null
			rm /etc/lighttpd/conf-available/99-dietpi-nextcloud.conf 2> /dev/null
			G_WHIP_MSG "DietPi will perform an automated backup of your Nextcloud database and installation directory, which will be stored inside your Nextcloud data directory.\n\nThe data directory won't be removed. So you can recover your whole Nextcloud instance any time later.\n\nRemove the data directory manually, if you don't need it anymore."
			# Drop MariaDB users and database
			local dbuser=$(grep -m1 "^[[:blank:]]*'dbuser'" /var/www/nextcloud/config/config.php | mawk '{print $3}' | sed 's/,//')
			local dbhost=$(grep -m1 "^[[:blank:]]*'dbhost'" /var/www/nextcloud/config/config.php | mawk '{print $3}' | sed 's/,//')
			# - Find datadir for backups
			local datadir=$(grep -m1 "^[[:blank:]]*'datadirectory'" /var/www/nextcloud/config/config.php | mawk '{print $3}' | sed "s/[',]//g")
			[[ $datadir ]] || datadir=$G_FP_DIETPI_USERDATA/nextcloud_data
			systemctl start mariadb
			mysql -e "drop user $dbuser@$dbhost"
			mysql -e "drop user $dbuser" 2> /dev/null
			# - Perform database backup if existent, otherwise skip to not overwrite existing one
			[[ -d $G_FP_DIETPI_USERDATA/mysql/nextcloud ]] && mysqldump nextcloud > $datadir/dietpi-nextcloud-database-backup.sql
			mysqladmin drop nextcloud -f
			# Backup Nextcloud installation folder
			cp -a /var/www/nextcloud/. $datadir/dietpi-nextcloud-installation-backup/
			# Remove Nextcloud installation folder
			rm -R /var/www/nextcloud
			# Remove redirect configs
			if grep -q 'nextcloud' /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf &> /dev/null; then

				lighttpd-disable-mod dietpi-dav_redirect
				rm /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf

			fi
			if grep -q 'nextcloud' /etc/apache2/conf-available/dietpi-dav_redirect.conf &> /dev/null; then

				a2disconf dietpi-dav_redirect
				rm /etc/apache2/conf-available/dietpi-dav_redirect.conf

			fi
			grep -q 'nextcloud' /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf  &> /dev/null && rm /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf

		fi

		software_id=83
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP apache2

		fi

		software_id=85
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP nginx nginx-*

		fi

		software_id=84
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP lighttpd

			# Remove certbot renewal hook
			[[ -f 'etc/systemd/system/certbot.service.d/dietpi-lighttpd.conf' ]] && rm /etc/systemd/system/certbot.service.d/dietpi-lighttpd.conf
			# Remove hook directory if empty
			rmdir --ignore-fail-on-non-empty /etc/systemd/system/certbot.service.d

		fi

		software_id=87
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP sqlite3 php*-sqlite3

		fi

		software_id=91
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP redis-server redis-tools php*-redis
			[[ -d '/etc/systemd/system/redis-server.service.d' ]] && rm -R /etc/systemd/system/redis-server.service.d # Jessie permissions fix

		fi

		software_id=89 # PHP
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP php*-* libapache2-mod-php*
			[[ -d '/etc/php' ]] && rm -R /etc/php
			[[ -f '/var/www/phpinfo.php' ]] && rm /var/www/phpinfo.php
			[[ -f '/var/www/apc.php' ]] && rm /var/www/apc.php
			[[ -f '/var/www/opcache.php' ]] && rm /var/www/opcache.php
			# temp php uploads, if it was created
			[[ -d '/var/tmp/php_upload_tmp' ]] && rm -R /var/tmp/php_upload_tmp

			## Leave PHP repo in place to avoid issues with remaining dependency packages that were pulled from this repo
			# APT repo
			#[[ -f '/etc/apt/sources.list.d/dietpi-php.list' ]] && rm /etc/apt/sources.list.d/dietpi-php.list
			# APT preferences
			#[[ -f '/etc/apt/preferences.d/dietpi-openssl' ]] && rm /etc/apt/preferences.d/dietpi-openssl
			#[[ -f '/etc/apt/preferences.d/dietpi-php' ]] && rm /etc/apt/preferences.d/dietpi-php

		fi

		software_id=90
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			systemctl start mariadb
			mysqladmin drop phpmyadmin -f
			mysql -e "drop user 'phpmyadmin'@'localhost'"
			G_AGP phpmyadmin

		fi

		software_id=54 # phpBB Forum
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			systemctl start mariadb
			mysqladmin drop phpbb3 -f
			mysql -e "drop user 'phpbb3'@'localhost'"
			[[ -d '/var/www/phpBB3' ]] && rm -R /var/www/phpBB3
			[[ -f '/etc/apt/preferences.d/dietpi-phpbb' ]] && rm /etc/apt/preferences.d/dietpi-phpbb

		fi

		software_id=115 # Webmin
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			if [[ -f '/etc/systemd/system/webmin.service' ]]; then

				systemctl disable --now webmin
				rm /etc/systemd/system/webmin.service

			fi
			G_AGP webmin
			[[ -f '/etc/apt/sources.list.d/webmin.list' ]] && rm /etc/apt/sources.list.d/webmin.list

		fi

		software_id=32 # ympd
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			if [[ -f '/etc/systemd/system/ympd.service' ]]; then

				systemctl unmask ympd
				systemctl disable ympd
				rm /etc/systemd/system/ympd.service

			fi
			getent passwd ympd &> /dev/null && userdel -rf ympd
			[[ -f '/usr/bin/ympd' ]] && rm /usr/bin/ympd

		fi

		software_id=148 # myMPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			#apt-mark auto libmpdclient2 cmake cppcheck pkg-config libmpdclient-dev libssl-dev libmediainfo-dev
			if [[ -f '/lib/systemd/system/mympd.service' ]]; then

				systemctl unmask mympd
				systemctl disable --now mympd
				rm /lib/systemd/system/mympd.service

			fi
			getent passwd mympd &> /dev/null && userdel -rf mympd
			command -v mympd &> /dev/null && rm $(command -v mympd)
			rm -Rf /{etc,var/lib,usr/share}/mympd
			rm -f /usr/share/man/man1/mympd.*

		fi

		software_id=128
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto libavformat57 libupnp6 libao-common libao4 libasound2 libasound2-data libasyncns0 libaudiofile1 libavahi-client3 libavahi-common-data libavahi-common3 libavcodec56 libavformat56 libavresample2 libavutil54 libbinio1ldbl libcaca0 libcdio-cdda1 libcdio-paranoia1 libcdio13 libcups2 libcurl3-gnutls libdirectfb-1.2-9 libdnet libfaad2 libflac8 libfluidsynth1 libgme0 libgomp1 libgsm1 libice6 libid3tag0 libiso9660-8 libjack-jackd2-0 libjson-c2 libldb1 libmad0 libmikmod3 libmms0 libmodplug1 libmp3lame0 libmpcdec6 libmpg123-0 libnfs4 libntdb1 libogg0 libopenal-data libopenal1 libopenjpeg5 libopus0 liborc-0.4-0 libpulse0 libresid-builder0c2a libroar2 libsamplerate0 libschroedinger-1.0-0 libsdl1.2debian libshout3 libsidplay2 libsidutils0 libslp1 libsm6 libsmbclient libsndfile1 libsoxr0 libspeex1 libspeexdsp1 libsqlite3-0 libtalloc2 libtdb1 libtevent0 libtheora0 libva1 libvorbis0a libvorbisenc2 libvorbisfile3 libvpx1 libwavpack1 libwbclient0 libwildmidi-config libwildmidi1 libx11-6 libx11-data libx11-xcb1 libx264-142 libxau6 libxcb1 libxdmcp6 libxext6 libxi6 libxtst6 libxvidcore4 libyajl2 libzzip-0-13 mime-support python python-talloc python2.7 samba-libs x11-common file &> /dev/null
			apt-mark unhold mpd 1> /dev/null
			G_AGP mpd libmpdclient2
			getent passwd mpd &> /dev/null && userdel -rf mpd
			[[ -f '/lib/systemd/system/mpd.service' ]] && rm /lib/systemd/system/mpd.service
			[[ -d $G_FP_DIETPI_USERDATA/.mpd_cache ]] && rm -R $G_FP_DIETPI_USERDATA/.mpd_cache
			[[ -f '/usr/local/etc/mpd.conf' ]] && rm /usr/local/etc/mpd.conf && rmdir --ignore-fail-on-non-empty /usr/local/etc
			[[ -f '/etc/mpd.conf' ]] && rm /etc/mpd.conf
			[[ -f '/etc/default/mpd' ]] && rm /etc/default/mpd # pre-v6.20

		fi

		software_id=122 # Node-RED
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			npm r -g node-red
			getent passwd nodered &> /dev/null && userdel -rf nodered
			[[ -f '/etc/sudoers.d/nodered' ]] && rm /etc/sudoers.d/nodered
			if [[ -f '/etc/systemd/system/node-red.service' ]]; then

				systemctl disable node-red
				rm /etc/systemd/system/node-red.service

			fi
			[[ -d $G_FP_DIETPI_USERDATA/node-red ]] && rm -R $G_FP_DIETPI_USERDATA/node-red
			[[ -f '/usr/local/bin/node-red' ]] && rm /usr/local/bin/node-red
			[[ -f '/usr/local/bin/node-red-pi' ]] && rm /usr/local/bin/node-red-pi
			rm -Rf /root/.node-red # Pre-v6.25

		fi

		software_id=123
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP mosquitto

			if [[ -f '/etc/systemd/system/mosquitto.service' ]]; then

				systemctl disable mosquitto
				rm /etc/systemd/system/mosquitto.service

			fi

		fi

		software_id=124 # NAA Daemon
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto gcc-6-base libstdc++6 &> /dev/null
			G_AGP networkaudiod

		fi

		software_id=125 # Tomcat8
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP tomcat8

		fi

		software_id=126
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto libssl1.0.0

		fi

		software_id=129 # O!MPD
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			[[ -d '/var/www/ompd' ]] && rm -R /var/www/ompd
			if [[ -f '/etc/lighttpd/conf-available/99-dietpi-ompd.conf' ]]; then

				lighttpd-disable-mod dietpi-ompd
				rm /etc/lighttpd/conf-available/99-dietpi-ompd.conf

			fi
			systemctl start mariadb
			mysqladmin drop ompd -f
			mysql -e 'drop user ompd@localhost'

		fi

		software_id=130
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP python-pip python3-pip

		fi

		software_id=131 # Blynk Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			if [[ -f '/etc/systemd/system/blynkserver.service' ]]; then

				systemctl disable blynkserver
				rm /etc/systemd/system/blynkserver.service

			fi
			getent passwd blynk &> /dev/null && userdel -rf blynk
			[[ -d $G_FP_DIETPI_USERDATA/blynk ]] && rm -R $G_FP_DIETPI_USERDATA/blynk
			[[ -d '/etc/blynkserver' ]] && rm -R /etc/blynkserver # Pre-v6.19

		fi

		software_id=132
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			[[ -d '/var/www/aria2' ]] && rm -R /var/www/aria2
			if [[ -f '/etc/systemd/system/aria2.service' ]]; then

				systemctl disable --now aria2
				rm /etc/systemd/system/aria2.service

			fi
			G_AGP aria2
			getent passwd aria2 &> /dev/null && userdel -rf aria2
			[[ -d $G_FP_DIETPI_USERDATA/aria2 ]] && rm -R $G_FP_DIETPI_USERDATA/aria2
			[[ -f $G_FP_DIETPI_USERDATA/downloads/aria2.session ]] && rm $G_FP_DIETPI_USERDATA/downloads/aria2.session
			[[ -f '/usr/local/bin/aria2c' ]] && rm /usr/local/bin/aria2c # Previous

		fi

		software_id=133
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm /etc/systemd/system/yacy.service
			rm -R /etc/yacy

		fi

		software_id=2
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP fahclient

			rm -R $G_FP_DIETPI_USERDATA/fahclient
			rm /lib/systemd/system/fahclient.service
			rm /var/log/fahclient.log

		fi

		software_id=134
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto libjpeg8 libpng12-0 libfontconfig1 libssl1.0.0 &> /dev/null

			if [[ -f '/etc/systemd/system/tonido.service' ]]; then

				systemctl disable --now tonido
				rm /etc/systemd/system/tonido.service

			fi
			getent passwd tonido &> /dev/null && userdel -rf tonido
			[[ -d $G_FP_DIETPI_USERDATA/tonido ]] && rm -R $G_FP_DIETPI_USERDATA/tonido
			[[ -d '/home/tonido' ]] && rm -R /home/tonido

		fi

		software_id=135
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP darkice icecast2
			rm /etc/systemd/system/darkice.service

		fi

		software_id=136
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto v4l-utils python python-dev libssl-dev libcurl4-openssl-dev libjpeg-dev zlib1g-dev libx264-142 libavcodec56 libavformat56 libmysqlclient18 libswscale3 libpq5 &> /dev/null
			G_AGP motion
			rm -R /etc/motioneye
			rm /etc/systemd/system/motioneye.service
			pip uninstall -y motioneye

		fi

		software_id=137
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP cloudprint-service

		fi

		software_id=138
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /etc/vhusbd
			rm /etc/systemd/system/virtualhere.service

		fi

		software_id=139 # SABnzbd
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			getent passwd sabnzbd &> /dev/null && userdel -rf sabnzbd
			[[ -d '/etc/sabnzbd' ]] && rm -R /etc/sabnzbd
			if [[ -f '/etc/systemd/system/sabnzbd.service' ]]; then

				systemctl disable sabnzbd
				rm /etc/systemd/system/sabnzbd.service

			fi

		fi

		software_id=141
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R $G_FP_DIETPI_USERDATA/spotify-connect-web
			rm /etc/systemd/system/spotify-connect-web.service

		fi

		software_id=142
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /etc/couchpotato
			rm -R $G_FP_DIETPI_USERDATA/couchpotato
			rm /etc/init.d/couchpotato
			#userdel -rf couchpotato

		fi

		software_id=143
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			if [[ -f '/etc/systemd/system/koel.service' ]]; then

				systemctl disable --now koel
				rm /etc/systemd/system/koel.service

			fi

			getent passwd koel &> /dev/null && userdel -rf koel

			systemctl start mariadb
			mysqladmin drop koel -f
			mysql -e 'drop user koel@localhost'

			[[ -d $G_FP_DIETPI_USERDATA/koel ]] && rm -R $G_FP_DIETPI_USERDATA/koel

		fi

		software_id=144
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			G_AGP nzbdrone

			rm /etc/systemd/system/sonarr.service
			rm -R /opt/NzbDrone 2>/dev/null

			rm -R $G_FP_DIETPI_USERDATA/sonarr
			rm -R /var/log/sonarr

			userdel -rf sonarr

			rm /etc/apt/sources.list.d/sonarr.list 2>/dev/null
			G_AGUP

		fi

		software_id=145
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			rm -R /opt/radarr
			rm /etc/systemd/system/radarr.service

			rm -R $G_FP_DIETPI_USERDATA/radarr
			rm -R /var/log/radarr

			userdel -rf radarr

		fi

		software_id=106
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			rm -R /opt/Lidarr
			rm /etc/systemd/system/lidarr.service

			rm -R $G_FP_DIETPI_USERDATA/lidarr
			rm -R /var/log/lidarr

			userdel -rf lidarr

		fi

		software_id=146
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /opt/plexpy
			rm -R $G_FP_DIETPI_USERDATA/plexpy
			rm /etc/systemd/system/plexpy.service

			userdel -rf plexpy

		fi

		software_id=147 # Jackett
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			getent passwd jackett &> /dev/null && userdel -rf jackett
			[[ -d '/opt/jackett' ]] && rm -R /opt/jackett
			if [[ -f '/etc/systemd/system/jackett.service' ]]; then

				systemctl disable jackett
				rm /etc/systemd/system/jackett.service

			fi

		fi

		software_id=149
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R $G_FP_DIETPI_USERDATA/nzbget
			rm /etc/systemd/system/nzbget.service

			userdel -rf nzbget

		fi

		software_id=155
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R $G_FP_DIETPI_USERDATA/htpc-manager
			rm /etc/systemd/system/htpc-manager.service

		fi

		software_id=150
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto mono-complete mono-devel mono-runtime libmono-cil-dev 2>/dev/null
			rm /etc/apt/sources.list.d/mono-xamarin.list

		fi

		software_id=151
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP nvidia-driver nvidia-xconfig libgl1-nvidia-glx:i386

		fi

		software_id=152
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP avahi-daemon

		fi

		software_id=153
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R $G_FP_DIETPI_USERDATA/octoprint
			rm $(command -v octoprint)
			rm -R /root/.octoprint
			rm /etc/systemd/system/octoprint.service

		fi

		software_id=121
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm /etc/systemd/system/roonbridge.service
			rm -R /etc/roonbridge
			userdel -rf roon

		fi

		software_id=154
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			[[ -d $G_FP_DIETPI_USERDATA/roonserver ]] && rm -R $G_FP_DIETPI_USERDATA/roonserver
			if [[ -f '/etc/systemd/system/roonserver.service' ]]; then

				systemctl disable --now roonserver
				rm /etc/systemd/system/roonserver.service

			fi

		fi

		software_id=156
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP steam
			rm -R /root/.steam
			rm -R $G_FP_DIETPI_USERDATA/steam

		fi

		software_id=119
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP cava
			rm /root/.config/cava/config
			rm /root/cava.psf

		fi

		software_id=118
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP mopidy
			[[ -f '/etc/apt/sources.list.d/mopidy.list' ]] && rm /etc/apt/sources.list.d/mopidy.list

			command -v pip &> /dev/null && pip uninstall -y Mopidy-MusicBox-Webclient Mopidy-Local-Images

			getent passwd mopidy &> /dev/null && userdel -rf mopidy
			[[ -d $G_FP_DIETPI_USERDATA/mopidy ]] && rm -R $G_FP_DIETPI_USERDATA/mopidy

		fi

		software_id=31
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto libcec4 libcurl3-gnutls libnfs*
			G_AGP kodi kodi-odroid
			[[ -f '/usr/share/applications/kodi.desktop' ]] && rm /usr/share/applications/kodi.desktop
			rm -f /{root,home/*}/Desktop/kodi.desktop
			[[ -f '/etc/udev/rules.d/99-dietpi-kodi.rules' ]] && rm /etc/udev/rules.d/99-dietpi-kodi.rules

		fi

		software_id=39
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP minidlna

			rm -R $G_FP_DIETPI_USERDATA/.MiniDLNA_Cache

			rm /etc/systemd/system/minidlna.service
			userdel -rf minidlna

		fi

		software_id=51
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			if (( $G_HW_MODEL >= 10 )); then

				G_AGP opentyrian

			else

				G_AGP ibsdl1.2debian libsdl-net1.2

			fi

			rm /usr/share/applications/opentyrian.desktop
			rm /root/Desktop/opentyrian.desktop
			rm -R /usr/games/opentyrian

		fi

		software_id=59
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP gpac
			rm -R /var/www/rpicam
			rm /opt/vc/bin/raspimjpeg
			rm /usr/bin/raspimjpeg
			rm /var/lib/dietpi/dietpi-software/installed/raspimjpeg.sh
			rm /etc/systemd/system/raspimjpeg.service
			rm /etc/raspimjpeg

		fi

		software_id=45
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP deluged deluge-web deluge-console
			userdel -rf debian-deluged
			[[ -f '/etc/systemd/system/deluged.service' ]] && rm /etc/systemd/system/deluged.service
			[[ -f '/etc/systemd/system/deluge-web.service' ]] && rm /etc/systemd/system/deluge-web.service
			[[ -d $G_FP_DIETPI_USERDATA/deluge ]] && rm -R $G_FP_DIETPI_USERDATA/deluge

		fi

		software_id=94
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP proftpd-basic

		fi

		software_id=96
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP samba samba-common-bin
			[[ -f '/etc/tmpfiles.d/dietpi-samba_cache.conf' ]] && rm /etc/tmpfiles.d/dietpi-samba_cache.conf
			[[ -d '/run/samba-cache' ]] && rm -R /run/samba-cache

		fi

		software_id=95
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP vsftpd

		fi

		software_id=109
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP nfs-kernel-server

		fi

		software_id=67
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			[[ -f '/usr/local/bin/noip2' ]] && rm /usr/local/bin/noip2
			[[ -f '/usr/local/etc/no-ip2.conf' ]] && rm /usr/local/etc/no-ip2.conf
			[[ -f '/etc/systemd/system/noip2.service' ]] && rm /etc/systemd/system/noip2.service

		fi

		software_id=63
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			[[ -d '/var/www/linuxdash' ]] && rm -R /var/www/linuxdash

		fi

		software_id=93
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			pihole uninstall

			# pihole-FTL service+binary
			if [[ -f '/etc/init.d/pihole-FTL' ]]; then

				systemctl unmask pihole-FTL
				systemctl disable --now pihole-FTL
				rm /etc/init.d/pihole-FTL

			fi
			[[ -f '/usr/bin/pihole-FTL' ]] && rm /usr/bin/pihole-FTL

			# Dirs
			[[ -d '/etc/pihole' ]] && rm -R /etc/pihole
			[[ -d '/etc/.pihole' ]] && rm -R /etc/.pihole
			[[ -d '/opt/pihole' ]] && rm -R /opt/pihole
			[[ -d '/var/www/html/admin' ]] && rm -R /var/www/html/admin
			[[ -d '/var/www/html/pihole' ]] && rm -R /var/www/html/pihole

			# Symlinks
			[[ -L '/var/www/pihole' ]] && rm /var/www/pihole
			[[ -L '/var/www/admin' ]] && rm /var/www/admin

			# Pre Pi-hole v4
			G_AGP dnsmasq
			rm -Rf /etc/dnsmasq*

			# Disable and remove webserver configs
			# - Apache
			if [[ -d '/etc/apache2/sites-available' ]]; then

				a2dissite dietpi-pihole* 2> /dev/null
				rm -f /etc/apache2/sites-available/dietpi-pihole*

			fi
			# - Lighttpd
			if [[ -d '/etc/lighttpd/mods-available' ]]; then

				lighttpd-disable-mod dietpi-pihole* 2> /dev/null
				rm -f /etc/lighttpd/mods-available/dietpi-pihole*

			fi
			# - Nginx
			[[ -d '/etc/nginx/sites-dietpi' ]] && rm -f /etc/nginx/sites-dietpi/dietpi-pihole*

		fi

		software_id=33 # Airsonic
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			getent passwd airsonic &> /dev/null && userdel -rf airsonic
			[[ -d $G_FP_DIETPI_USERDATA/airsonic ]] && rm -R $G_FP_DIETPI_USERDATA/airsonic
			[[ -f '/etc/systemd/system/airsonic.service' ]] && rm /etc/systemd/system/airsonic.service

		fi

		software_id=34 # Subsonic
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP subsonic
			getent passwd subsonic &> /dev/null && userdel -rf subsonic
			[[ -d '/var/subsonic' ]] && rm -R /var/subsonic

		fi

		software_id=71
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			update-rc.d webiopi remove
			rm -R /etc/webiopi
			rm -R /usr/share/webiopi
			rm /usr/bin/webiopi
			rm /etc/init.d/webiopi

		fi

		software_id=68
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP connectd weavedconnectd # pre-v6.22

		fi

		software_id=62
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			# Kill
			systemctl stop dietpi-cloudshell
			rm /etc/systemd/system/dietpi-cloudshell.service

			# - For old version of dietpi-cloudshell, without service.
			killall -w dietpi-cloudshell

			#Disable auto login, revert boot index to console
			/DietPi/dietpi/dietpi-autostart 0

		fi

		software_id=98
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			update-rc.d haproxy remove
			rm /etc/init.d/haproxy

			rm -r /etc/haproxy

			# Shared dev libraries. Leave these installed
			#apt-mark auto libpcre3-dev libssl-dev &> /dev/null

		fi

		software_id=35 # Logitech Media Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP logitechmediaserver
			getent passwd squeezeboxserver &> /dev/null && userdel -rf squeezeboxserver
			[[ -f '/etc/systemd/system/logitechmediaserver.service' ]] && rm /etc/systemd/system/logitechmediaserver.service
			[[ -d '/var/lib/squeezeboxserver' ]] && rm -R /var/lib/squeezeboxserver
			[[ -d '/usr/share/squeezeboxserver' ]] && rm -R /usr/share/squeezeboxserver

		fi

		software_id=55
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			systemctl start mariadb
			mysqladmin drop wordpress -f
			mysql -e "drop user 'wordpress'@'localhost'"

			rm -R /var/www/wordpress

		fi

		software_id=38
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			crontab -u www-data -l | grep -v '/opt/FreshRSS/app/actualize_script.php'  | crontab -u www-data -

			a2disconf dietpi-freshrss &> /dev/null
			rm /etc/apache2/conf-available/dietpi-freshrss.conf &> /dev/null

			systemctl start mariadb
			mysqladmin drop freshrss -f
			mysql -e "drop user 'freshrss'@'localhost'"

			rm -R /var/www/freshrss
			rm -R /opt/FreshRSS
			rm /var/log/freshrss.log

		fi

		# TigerVNC/RealVNC
		if (( ${aSOFTWARE_INSTALL_STATE[28]} == -1 || ${aSOFTWARE_INSTALL_STATE[120]} == -1 )); then

			(( ${aSOFTWARE_INSTALL_STATE[28]} == -1 )) && software_id=28 || software_id=120
			Banner_Uninstalling
			G_AGP tigervnc-* x11vnc realvnc-vnc-server

			if [[ -f '/etc/systemd/system/vncserver.service' ]]; then

				systemctl disable --now vncserver
				rm -R /etc/systemd/system/vncserver.service*

			fi
			[[ -f '/etc/init.d/vncserver' ]] && rm /etc/init.d/vncserver
			[[ -f '/usr/local/bin/vncserver' ]] && rm /usr/local/bin/vncserver
			[[ -d '/root/.vnc' ]] && rm -R /root/.vnc

			# + RealVNC services
			systemctl disable vncserver-x11-serviced.service 2> /dev/null
			systemctl disable vncserver-virtuald.service 2> /dev/null

		fi

		software_id=73 # Fail2Ban
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP fail2ban
			apt-mark auto python3-systemd
			[[ -d '/etc/fail2ban' ]] && rm -R /etc/fail2ban

		fi

		software_id=64
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /var/www/phpsysinfo

		fi

		software_id=56
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm /var/www/gallery/index.php
			rm -R /var/www/gallery/_sfpg_data

		fi

		software_id=40
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			[[ -d '/var/www/ampache' ]] && rm -R /var/www/ampache

			# Drop database
			systemctl start mariadb
			mysqladmin drop ampache -f
			mysql -e 'drop user ampache@localhost'

		fi

		software_id=117
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm /etc/apt/sources.list.d/swupdate.openvpn.net.list
			pivpn -u
			userdel -rf pivpn

		fi

		software_id=97 # OpenVPN Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP openvpn
			[[ -d '/etc/openvpn' ]] && rm -R /etc/openvpn
			[[ -f '/etc/sysctl.d/dietpi-openvpn.conf' ]] && rm /etc/sysctl.d/dietpi-openvpn.conf

		fi

		software_id=172 # WireGuard
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP wireguard*
			[[ -d '/etc/wireguard' ]] && rm -R /etc/wireguard
			[[ -f '/etc/apt/sources.list.d/dietpi-wireguard.list' ]] && rm /etc/apt/sources.list.d/dietpi-wireguard.list
			[[ -f '/etc/apt/preferences.d/dietpi-wireguard' ]] && rm /etc/apt/preferences.d/dietpi-wireguard
			[[ -f '/etc/kernel/postinst.d/dietpi-wireguard' ]] && rm /etc/kernel/postinst.d/dietpi-wireguard

		fi

		software_id=171 # DietPi-NordVPN
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /etc/openvpn/ovpn_tcp/*nordvpn* /etc/openvpn/ovpn_udp/*nordvpn*
			rm -R /var/lib/dietpi/dietpi-software/installed/dietpi-nordvpn /lib/systemd/system/dietpi-nordvpn.service &> /dev/null

		fi

		software_id=92
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP python3-certbot-apache python3-certbot-nginx certbot
			[[ -f '/etc/systemd/system/certbot.service' ]] && rm /etc/systemd/system/certbot.service
			[[ -d '/etc/systemd/system/certbot.service.d' ]] && rm -R /etc/systemd/system/certbot.service.d

		fi

		software_id=69
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP python-rpi.gpio python3-rpi.gpio

		fi

		software_id=72
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP i2c-tools
			/DietPi/dietpi/func/dietpi-set_hardware i2c disable

		fi

		software_id=70
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /root/wiringPi* &> /dev/null

		fi

		software_id=61
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP tor

			# - uninstall WIFIHOTSPOT ALSO. Due to IPtables needing reset.
			aSOFTWARE_INSTALL_STATE[60]=-1

		fi

		software_id=60 # WiFi Hotspot
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto libnl-3-200 libssl1.0.0 &> /dev/null
			G_AGP hostapd isc-dhcp-server

			[[ -f '/etc/dhcp/dhcpd.conf' ]] && rm /etc/dhcp/dhcpd.conf
			[[ -f '/etc/hostapd/hostapd.conf' ]] && rm /etc/hostapd/hostapd.conf
			[[ -f '/etc/default/isc-dhcp-server' ]] && rm /etc/default/isc-dhcp-server
			[[ -f '/etc/etc/default/hostapd' ]] && rm /etc/default/hostapd
			[[ -f '/etc/iptables.ipv4.nat' ]] && rm /etc/iptables.ipv4.nat
			# Remove binary (used a -f trigger to detect wifi hotspot mode in dietpi-config).
			[[ -f '/usr/sbin/hostapd' ]] && rm /usr/sbin/hostapd
			[[ -f '/usr/sbin/hostapd_cli' ]] && rm /usr/sbin/hostapd_cli

			# IP forwarding
			[[ -f '/etc/sysctl.d/dietpi-wifihotspot.conf' ]] && rm /etc/sysctl.d/dietpi-wifihotspot.conf

			# Set WiFi interface back to inactive and ready for use with dietpi-config.
			local wifi_index=$(mawk 'NR==2 {print}' /DietPi/dietpi/.network)
			# - Remove all entries below wlan, so we can recreate them
			sed -i '/allow-hotplug wlan/q0' /etc/network/interfaces
			# - Disable
			sed -i "/allow-hotplug wlan/c\#allow-hotplug wlan$wifi_index" /etc/network/interfaces
			# - Add default WiFi settings to network interfaces config
			cat << _EOF_ >> /etc/network/interfaces
iface wlan$wifi_index inet dhcp
address 192.168.0.101
netmask 255.255.255.0
gateway 192.168.0.1
wireless-power off
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
#dns-nameservers 8.8.8.8 8.8.4.4
_EOF_
			# - Flush IP tables
			iptables -F
			iptables -t nat -F

		fi

		software_id=37
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto libssl1.0.0 openssl libsoxr0 libavahi-client3 libtool libconfig9 libpopt0 libdaemon0 &> /dev/null
			# No package is installed any more, files are directly extracted into places, need to remove them manually?
			# https://github.com/MichaIng/DietPi/blob/testing/dietpi/dietpi-software#L5968
			#G_AGP shairport-sync
			rm -f /lib/systemd/system/shairport-sync.service /usr/local/bin/shairport-sync /usr/local/etc/shairport-sync.conf* /usr/local/share/man/man7/shairport-sync.7.gz
			userdel -rf shairport-sync

		fi

		software_id=48
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /var/www/pydio

			# Remove webserver configs
			command -v a2dissite &> /dev/null && a2dissite dietpi-pydio
			[[ -f '/etc/apache2/conf-available/dietpi-pydio.conf' ]] && rm /etc/apache2/conf-available/dietpi-pydio.conf
			[[ -f '/etc/nginx/sites-dietpi/dietpi-pydio.conf' ]] && rm /etc/nginx/sites-dietpi/dietpi-pydio.conf
			command -v lighttpd-disable-mod &> /dev/null && lighttpd-disable-mod dietpi-pydio
			[[ -f '/etc/lighttpd/conf-available/99-dietpi-pydio.conf' ]] && rm /etc/lighttpd/conf-available/99-dietpi-pydio.conf

			# Drop database
			systemctl start mariadb
			mysqladmin drop pydio -f
			mysql -e "drop user pydio@localhost"

		fi

		software_id=36
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP squeezelite

			rm -Rf /usr/bin/squeezelite*
			rm /etc/systemd/system/squeezelite.service

		fi

		software_id=99
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /etc/emonhub
			rm /etc/init.d/emonhub
			rm /etc/default/emonhub

		fi

		software_id=66
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP rpimonitor

		fi

		software_id=57
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R /var/www/baikal

			#drop database
			systemctl start mariadb
			mysqladmin drop baikal -f
			mysql -e "drop user 'baikal'@'localhost'"

			# Remove redirect configs
			lighttpd-disable-mod dietpi-dav_redirect &> /dev/null
			rm /etc/lighttpd/conf-available/99-dietpi-dav_redirect.conf &> /dev/null

			a2disconf dietpi-dav_redirect &> /dev/null
			rm /etc/apache2/conf-available/dietpi-dav_redirect.conf &> /dev/null

			rm /etc/nginx/sites-dietpi/dietpi-dav_redirect.conf &> /dev/null

		fi

		software_id=65 # Netdata
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto zlib1g-dev &> /dev/null

			# 1.2.0+
			G_AGP netdata

			# Pre-v6.22 Raspbian Stretch + Pre-v6.26 Raspbian Stretch ARMv6 only
			[[ -f '/etc/systemd/system/netdata.service' ]] && rm /etc/systemd/system/netdata.service
			getent passwd netdata &> /dev/null && userdel netdata

			# 1.0.0
			[[ -f '/usr/sbin/netdata' ]] && rm /usr/sbin/netdata
			[[ -d '/etc/netdata' ]] && rm -R /etc/netdata
			[[ -d '/usr/lib/netdata' ]] && rm -R /usr/lib/netdata
			[[ -d '/usr/share/netdata' ]] && rm -R /usr/share/netdata
			[[ -d '/usr/libexec/netdata' ]] && rm -R /usr/libexec/netdata
			[[ -d '/var/cache/netdata' ]] && rm -R /var/cache/netdata
			[[ -d '/var/log/netdata' ]] && rm -R /var/log/netdata
			[[ -d '/var/lib/netdata' ]] && rm -R /var/lib/netdata

		fi

		software_id=43
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP mumble-server

		fi

		software_id=41
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP emby-server embymagick

			# Pre v6.15
			[[ -f '/etc/apt/sources.list.d/emby-server.list' ]] && rm /etc/apt/sources.list.d/emby-server.list

		fi

		software_id=58 # OpenBazaar
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			[[ -f '/etc/systemd/system/openbazaar.service' ]] && rm /etc/systemd/system/openbazaar.service
			[[ -d $G_FP_DIETPI_USERDATA/go/src/github.com/OpenBazaar ]] && rm -R $G_FP_DIETPI_USERDATA/go/src/github.com/OpenBazaar
			[[ -d '/etc/openbazaar-server' ]] && rm -R /etc/openbazaar-server # Pre v6.15 OB1.0

		fi

		software_id=42 # Plex Media Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP plexmediaserver
			[[ -d '/var/lib/plexmediaserver' ]] && rm -R /var/lib/plexmediaserver # Left over from purging package, still...
			[[ -d '/etc/systemd/system/plexmediaserver.service.d' ]] && rm -R /etc/systemd/system/plexmediaserver.service.d

		fi

		software_id=52
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			if [[ -f '/etc/systemd/system/cuberite.service' ]]; then

				systemctl disable --now cuberite
				rm /etc/systemd/system/cuberite.service

			fi
			getent passwd cuberite &> /dev/null && userdel -rf cuberite
			[[ -f '/etc/cuberite' ]] && rm -R /etc/cuberite # pre v6.11
			[[ -d $G_FP_DIETPI_USERDATA/cubrite ]] && rm -R $G_FP_DIETPI_USERDATA/cubrite

		fi

		software_id=53
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R $G_FP_DIETPI_USERDATA/mineos
			rm -R /var/games/minecraft

			rm /etc/supervisor/conf.d/mineos.conf
			supervisorctl reload

			rm /usr/local/bin/mineos

			userdel -rf mineos

		fi

		software_id=49
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			if [[ -f '/etc/systemd/system/gogs.service' ]]; then

				systemctl disable --now gogs
				rm -R /etc/systemd/system/gogs.service*

			fi

			getent passwd gogs &> /dev/null && userdel -rf gogs

			[[ -d '/etc/gogs' ]] && rm -R /etc/gogs
			[[ -d '/var/log/gogs' ]] && rm -R /var/log/gogs

			systemctl start mariadb
			mysqladmin drop gogs -f
			mysql -e 'drop user gogs@localhost'

		fi

		software_id=46
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP qbittorrent-nox

			userdel -rf qbittorrent

			[[ -f '/etc/systemd/system/qbittorrent.service' ]] && rm /etc/systemd/system/qbittorrent.service
			[[ -d '/home/qbittorrent' ]] && rm -R /home/qbittorrent

		fi

		software_id=50
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			if [[ -f '/etc/systemd/system/syncthing.service' ]]; then

				systemctl disable syncthing
				rm /etc/systemd/system/syncthing.service

			fi
			[[ -d $G_FP_DIETPI_USERDATA/syncthing ]] && rm -R $G_FP_DIETPI_USERDATA/syncthing
			[[ -f '/etc/sysctl.d/dietpi-syncthing.conf' ]] && rm /etc/sysctl.d/dietpi-syncthing.conf # DietPi post-v6.18

			[[ -f '/usr/bin/syncthing' ]] && rm /usr/bin/syncthing # DietPi pre-v158
			[[ -d '/etc/syncthing' ]] && rm -R /etc/syncthing

		fi

		software_id=116
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			if [[ -f '/etc/systemd/system/medusa.service' ]]; then

				systemctl disable medusa
				rm /etc/systemd/system/medusa.service

			fi
			[[ -d $G_FP_DIETPI_USERDATA/medusa ]] && rm -R $G_FP_DIETPI_USERDATA/medusa
			getent passwd medusa &> /dev/null && userdel -rf medusa
			#apt-mark auto python python3 mediainfo libssl-dev

		fi

		software_id=107 # rTorrent
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP rtorrent
			[[ -d '/var/www/rutorrent' ]] && rm -R /var/www/rutorrent
			[[ -d $G_FP_DIETPI_USERDATA/rtorrent ]] && rm -R $G_FP_DIETPI_USERDATA/rtorrent
			if [[ -f '/etc/systemd/system/rtorrent.service' ]]; then

				systemctl disable rtorrent
				rm /etc/systemd/system/rtorrent.service

			fi

			# Webserver rutorrent user/pw settings
			[[ -f '/etc/.rutorrent-htaccess' ]] && rm /etc/.rutorrent-htaccess
			# - Lighttpd
			#Remove from
			#RUTORRENT_DIETPI to #RUTORRENT_DIETPI in /etc/lighttpd/lighttpd.conf
			# - Nginx
			[[ -f '/etc/nginx/sites-dietpi/dietpi-rutorrent.conf' ]] && rm /etc/nginx/sites-dietpi/dietpi-rutorrent.conf
			# - Apache2
			command -v a2dissite &> /dev/null && a2dissite dietpi-rutorrent
			[[ -f '/etc/apache2/sites-available/dietpi-rutorrent.conf' ]] && rm /etc/apache2/sites-available/dietpi-rutorrent.conf

		fi

		software_id=108 # Amiberry
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			# Service
			if [[ -f '/etc/systemd/system/amiberry.service' ]]; then

				systemctl disable --now amiberry
				rm /etc/systemd/system/amiberry.service

			fi
			# Files
			[[ -d $G_FP_DIETPI_USERDATA/amiberry ]] && rm -R $G_FP_DIETPI_USERDATA/amiberry
			# Autostart index: If currently Amiberry, revert to console login
			[[ -f '/DietPi/dietpi/.dietpi-autostart_index' && $(</DietPi/dietpi/.dietpi-autostart_index) == [68] ]] && /DietPi/dietpi/dietpi-autostart 0
			# libSDL2
			rm -f /usr/local/lib/libSDL2*

		fi

		software_id=112
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm $G_FP_DIETPI_USERDATA/dxx-rebirth/*
			rm -R $G_FP_DIETPI_USERDATA/dxx-rebirth/descent_1_game
			rm -R $G_FP_DIETPI_USERDATA/dxx-rebirth/descent_2_game

			# Remove symlinks
			rm /root/.d1x-rebirth
			rm /root/.d2x-rebirth
			rm /root/Desktop/dxx-rebirth.desktop
			rm /usr/share/applications/dxx-rebirth.desktop

		fi

		software_id=113
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto libgnome-keyring0 libnspr4 libnss3 libnss3-1d libspeechd2 libxslt1.1 libxss1 xdg-utils libgnome-keyring-common libltdl7 &> /dev/null
			apt-mark unhold chromium chromedriver

			rm /etc/chromium.d/custom_flags
			rm /var/lib/dietpi/dietpi-software/installed/chromium-autostart.sh
			rm /root/.chromium-browser.init

			G_AGP chromium* chromedriver # chromedriver: Jessie only

		fi

		software_id=157
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto cmake daemon gcc nmap net-tools swig uuid-dev libc-ares-dev libgnutls28-dev libgnutlsxx28 libglib2.0-dev libudev-dev libusb-1.0-0 libssl-dev libffi-dev libbz2-dev zlib1g-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev

			# Remove installation of HA.
			[[ -d '/srv/homeassistant' ]] && rm -R /srv/homeassistant

			# Remove the user and all files. This removed pyenv for this user as well.
			getent passwd homeassistant &> /dev/null && userdel -rf homeassistant
			getent group homeassistant &> /dev/null && groupdel homeassistant

			# Remove the service.
			[[ -f '/etc/systemd/system/home-assistant.service' ]] && rm /etc/systemd/system/home-assistant.service

		fi

		software_id=165 # Gitea
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			# Remove systemd unit
			[[ -f '/etc/systemd/system/gitea.service' ]] && rm /etc/systemd/system/gitea.service

			# Delete data
			[[ -d $G_FP_DIETPI_USERDATA/gitea ]] && rm -R $G_FP_DIETPI_USERDATA/gitea
			[[ -d '/var/log/gitea' ]] && rm -R /var/log/gitea

			# Drop/delete database
			systemctl start mariadb
			mysqladmin drop gitea -f
			mysql -e 'drop user gitea@localhost'

		fi

		software_id=166
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm /etc/systemd/system/pi-spc.service
			rm -R /var/lib/dietpi/dietpi-software/installed/pi-spc

			sed -i '/^dtoverlay=gpio-shutdown/d' /DietPi/config.txt
			sed -i '/^dtoverlay=gpio-poweroff/d' /DietPi/config.txt

		fi

		software_id=167
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP raspotify
			[[ -f '/etc/apt/sources.list.d/raspotify.list' ]] && rm /etc/apt/sources.list.d/raspotify.list

		fi

		software_id=169
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			rm -R $G_FP_DIETPI_USERDATA/voice-recognizer-raspi
			rm /etc/systemd/system/voice-recognizer.service
			rm /etc/systemd/system/alsa-init.service
			rm -R /home/dietpi/assistant.json

		fi

		software_id=176 # Mycroft AI
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			# Service
			if [[ -f '/etc/systemd/system/mycroft.service' ]]; then

				systemctl disable mycroft
				rm /etc/systemd/system/mycroft.service

			fi
			[[ -d '/etc/systemd/system/mycroft.service.d' ]] && rm -R /etc/systemd/system/mycroft.service.d

			# User
			getent passwd mycroft &> /dev/null userdel -rf mycroft

			# Files/dirs
			[[ -d $G_FP_DIETPI_USERDATA/mycroft-core ]] && rm -R $G_FP_DIETPI_USERDATA/mycroft-core
			[[ -d $G_FP_DIETPI_USERDATA/mycroft-data ]] && rm -R $G_FP_DIETPI_USERDATA/mycroft-data
			[[ -d '/etc/mycroft' ]] && rm -R /etc/mycroft
			rm -Rf /opt/mycroft
			[[ -f '/etc/bashrc.d/mycroft.sh' ]] && rm /etc/bashrc.d/mycroft.sh

		fi

		software_id=100
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP pijuice-base
			rm -R /var/lib/dietpi/dietpi-software/installed/pijuice

		fi

		software_id=158
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			# Remove service
			systemctl stop minio.service
			systemctl disable minio.service

			# Remove files
			rm /usr/local/bin/minio
			rm /etc/systemd/system/minio.service
			rm /etc/default/minio

			# Remove userdel
			userdel -rf minio-user

			# Remove certbot renewal hook:
			rm /etc/systemd/system/certbot.service.d/dietpi-minio.conf &> /dev/null
			# Remove hook directory only, if empty:
			rmdir /etc/systemd/system/certbot.service.d &> /dev/null

		fi

		software_id=161
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			/etc/init.d/bdd stop
			sleep 2
			killall --user bd
			sleep 2
			rm /etc/rc3.d/S99bdd
			rm /etc/rc4.d/S99bdd
			rm /etc/rc2.d/S99bdd
			rm /etc/rc5.d/S99bdd
			rm /etc/init.d/bdd

			userdel -rf bd

		fi

		software_id=162
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			# Remove docker, all its unused dependencies and custom repository
			G_AGP docker-ce docker-ce-cli docker-engine
			[[ -f '/etc/apt/sources.list.d/docker.list' ]] && rm /etc/apt/sources.list.d/docker.list

			# Remove service adjustments
			[[ -d '/lib/systemd/system/docker.service.d' ]] && rm -R /lib/systemd/system/docker.service.d
			# Delete data files - dietpi
			[[ -d $G_FP_DIETPI_USERDATA/docker-data ]] && rm -R $G_FP_DIETPI_USERDATA/docker-data
			# Remove default unused folder
			[[ -d '/var/lib/docker' ]] && rm -R /var/lib/docker

		fi

		software_id=164
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			# Remove Service file
			[[ -f '/etc/systemd/system/nukkit.service' ]] && rm /etc/systemd/system/nukkit.service

			# Remove nukkit java file/folder
			[[ -e '/usr/local/bin/nukkit' ]] && rm -R /usr/local/bin/nukkit

		fi

		software_id=163
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			#apt-mark auto libupnp6 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-alsa &> /dev/null
			G_AGP gmrender gmediarender
			[[ -f '/etc/systemd/system/gmrender.service' ]] && rm /etc/systemd/system/gmrender.service

			getent passwd gmrender &> /dev/null && userdel -rf gmrender

		fi

		software_id=159
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )) ||
			(( ${aSOFTWARE_INSTALL_STATE[160]} == -1 )); then

			Banner_Uninstalling
			rm -R /var/www/allo
			userdel -rf allo
			rm /etc/sudoers.d/allo
			systemctl start mariadb
			mysqladmin drop allo_db -f
			mysql -e 'drop user allo_db@localhost'

		fi

		software_id=88
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_WHIP_MSG "Creating MariaDB database backup before uninstallation:\n\nIn case of accident, we create a database backup for you. You can remove it manually, if you are sure, that you don't need it any more.\n\n$G_FP_DIETPI_USERDATA/mariadb-database-backup.sql"
			G_RUN_CMD systemctl start mariadb
			mysqldump --all-databases > $G_FP_DIETPI_USERDATA/mariadb-database-backup.sql
			systemctl stop mariadb
			G_AGP mariadb-server php*-mysql

			# - config folder
			rm -R /etc/mysql 2> /dev/null
			rm -R /root/.mysql_history 2> /dev/null

			# - SQL store
			rm -R /var/lib/mysql 2> /dev/null
			rm -R $G_FP_DIETPI_USERDATA/mysql 2> /dev/null

		fi

		software_id=74
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			G_AGP influxdb

			if [[ -f '/lib/systemd/system/influxdb.service' ]]; then

				systemctl unmask influxdb
				systemctl disable --now influxdb
				rm /lib/systemd/system/influxdb.service

			fi

			[[ -f '/etc/apt/sources.list.d/influxdb.list' ]] && rm /etc/apt/sources.list.d/influxdb.list
			rm -Rf /var/lib/influxdb # Symlink
			[[ -d $G_FP_DIETPI_USERDATA/influxdb ]] && rm -R $G_FP_DIETPI_USERDATA/influxdb

		fi

		software_id=77 # Grafana
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			G_AGP grafana
			[[ -f '/etc/apt/sources.list.d/grafana.list' ]] && rm /etc/apt/sources.list.d/grafana.list

			[[ -e '/var/lib/grafana' ]] && rm -R /var/lib/grafana
			[[ -d $G_FP_DIETPI_USERDATA/grafana ]] && rm -R $G_FP_DIETPI_USERDATA/grafana

		fi

		software_id=80
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			if [[ -f '/etc/systemd/system/ubooquity.service' ]]; then

				systemctl disable --now ubooquity
				rm /etc/systemd/system/ubooquity.service

			fi
			userdel -rf ubooquity
			[[ -d $G_FP_DIETPI_USERDATA/ubooquity ]] && rm -R $G_FP_DIETPI_USERDATA/ubooquity

		fi

		software_id=86
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			UNINSTALL_URL_ADDRESS='https://github.com/TheAppgineer/roon-extension-manager-packaging/raw/master/linux/setup.sh'
			G_CHECK_URL "$UNINSTALL_URL_ADDRESS"

			wget -O setup.sh "$UNINSTALL_URL_ADDRESS"
			chmod +x setup.sh
			./setup.sh --uninstall
			rm setup.sh

		fi

		#----------------------------------------------------------------------
		#LINUX SOFTWARE

		software_id=15
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP tcpdump

		fi

		software_id=14
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP nload

		fi

		software_id=13
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP mtr-tiny

		fi

		software_id=11
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP iptraf

		fi

		software_id=10
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP iftop

		fi

		software_id=19
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP jed

		fi

		software_id=3
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP mc

		fi

		software_id=18
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP emacs

		fi

		software_id=20
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )) ||
			(( ${aSOFTWARE_INSTALL_STATE[21]} == -1 )); then

			Banner_Uninstalling
			G_AGP vim vim-tiny

		fi

		software_id=127
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP neovim

		fi

		software_id=0
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			# This also removes OpenSSH server. So lets check OpenSSH server isn't installed before hand.
			dpkg-query -s 'openssh-server' &> /dev/null || G_AGP openssh-client

		fi

		software_id=1
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			umount -f /mnt/samba
			G_AGP smbclient
			# Disable in fstab
			sed -i '/\/mnt\/samba/c\#\/mnt\/samba . Please use dietpi-drive_manager to setup this mount' /etc/fstab
			# Add info file for installation method.
			echo -e 'Samba client can be installed and setup by DietPi-Drive_Manager.\nSimply run: dietpi-drive_manager and select the "Add network drive" option.' > /mnt/samba/readme.txt

		fi

		software_id=111 # UrBackup Server
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP urbackup-server

			# ARMv8 source build
			if [[ -f '/etc/systemd/system/urbackupsrv.service' ]]; then

				systemctl disable urbackupsrv
				rm /etc/systemd/system/urbackupsrv.service

			fi
			[[ -d '/mnt/dietpi_userdata/urbackup' ]] && rm -R /mnt/dietpi_userdata/urbackup
			[[ -d '/usr/share/urbackup' ]] && rm -R /usr/share/urbackup
			[[ -d '/usr/local/share/urbackup' ]] && rm -R /usr/local/share/urbackup
			[[ -f '/etc/default/urbackupsrv' ]] && rm /etc/default/urbackupsrv
			[[ -f '/etc/logrotate.d/urbackupsrv' ]] && rm /etc/logrotate.d/urbackupsrv
			command -v urbackupsrv &> /dev/null && rm $(which -a urbackupsrv)
			command -v urbackup_snapshot_helper &> /dev/null && rm $(which -a urbackup_snapshot_helper)
			command -v urbackup_snapshot_helper &> /dev/null && rm $(which -a urbackup_snapshot_helper)

		fi

		software_id=110
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			umount -f /mnt/nfs_client

			#nfs-kernel-server depends on nfs-common
			if (( ${aSOFTWARE_INSTALL_STATE[109]} == 0 )); then

				G_AGP nfs-common
				#apt-mark auto netbase

			fi

			# Disable in fstab
			sed -i '/\/mnt\/nfs_client/c\#\/mnt\/nfs_client . Please use DietPi-Drive_Manager to setup this mount' /etc/fstab

			# Add info file for installation method.
			echo -e 'NFS client can be installed and setup by DietPi-Drive_Manager.\nSimply run: dietpi-drive_manager and select the "Add network drive" option.' > /mnt/nfs_client/readme.txt

		fi

		software_id=16
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP build-essential

		fi

		software_id=17
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP git

		fi

		software_id=5
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP alsa-utils

		fi

		software_id=6
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto dbus-x11 libgl1-mesa-dri mesa-* libdrm-rockchip1 libmali-rk-utgard-450-r7p0 xf86-video-* malit628-odroid mali450-odroid aml-libs-odroid libump* firmware-samsung &> /dev/null
			G_AGP xorg* xserver-xorg* x11-* xinit xcompmgr xterm xfonts-base
			rm /etc/xdg/autostart/xcompmgr.desktop /etc/X11/xorg.conf /etc/X11/xorg.conf.d/99-dietpi-dpms_off.conf &> /dev/null

		fi

		software_id=7 # FFmpeg
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP ffmpeg

		fi

		software_id=8
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			apt-mark auto $(dpkg --get-selections default-jre* default-jdk* openjdk-* | mawk '{print $1}') ca-certificates-java

		fi

		software_id=104
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP dropbear*

		fi

		software_id=105
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP openssh-*

			# This also clears OpenSSH client
			aSOFTWARE_INSTALL_STATE[0]=0

		fi

		software_id=103 # DietPi-RAMlog
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling

			sed -i '/[[:blank:]]\/var\/log[[:blank:]]/d' /etc/fstab

			cat << _EOF_ > /etc/systemd/system/dietpi-ramlog_disable.service
[Unit]
Description=DietPi-RAMlog_disable | Disables DietPi-RAMlog after it has restored log metadata back to /var/log
After=dietpi-ramlog.service dietpi-ramdisk.service
Requires=dietpi-ramdisk.service
Before=dietpi-preboot.service rsyslog.service syslog.service

[Service]
Type=oneshot
StandardOutput=tty
ExecStart=/bin/dash -c '/var/lib/dietpi/dietpi-ramlog/disable.sh 2>&1 > /var/tmp/dietpi/logs/dietpi-ramlog_disable_debug.log'

[Install]
WantedBy=local-fs.target
_EOF_
			systemctl daemon-reload
			systemctl enable dietpi-ramlog_disable

			mkdir -p /var/lib/dietpi/dietpi-ramlog
			cat << _EOF_ > /var/lib/dietpi/dietpi-ramlog/disable.sh
#!/bin/dash
{
	systemctl stop dietpi-ramlog
	systemctl disable dietpi-ramlog
	rm -R /var/tmp/dietpi/logs/dietpi-ramlog_store
	systemctl disable dietpi-ramlog_disable
	rm /etc/systemd/system/dietpi-ramlog_disable.service
	rm /var/lib/dietpi/dietpi-ramlog/disable.sh
}
_EOF_
			chmod +x /var/lib/dietpi/dietpi-ramlog/disable.sh

		fi

		software_id=101
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP logrotate

		fi

		software_id=102
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP rsyslog

		fi

		software_id=9
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			npm r -g n yarn npm
			G_AGP nodejs

			# Old install via repo
			[[ -f '/etc/apt/sources.list.d/nodesource_nodejs.list' ]] && rm /etc/apt/sources.list.d/nodesource_nodejs.list

			[[ -f '/usr/local/bin/node' ]] && rm /usr/local/bin/node
			[[ -d '/usr/local/n' ]] && rm -R /usr/local/n
			[[ -d '/usr/local/yarn' ]] && rm -R /usr/local/yarn
			[[ -d '/usr/local/include/node' ]] && rm -R /usr/local/include/node
			[[ -d '/usr/local/lib/node_modules' ]] && rm -R /usr/local/lib/node_modules
			[[ -d '/usr/local/share/doc/node' ]] && rm -R /usr/local/share/doc/node
			[[ -f '/usr/local/man/man1/node.1' ]] && rm /usr/local/man/man1/node.1
			[[ -f '/usr/local/share/man/man1/node.1' ]] && rm /usr/local/share/man/man1/node.1
			[[ -f '/usr/local/README.md' ]] && rm /usr/local/README.md
			[[ -f '/usr/local/CHANGELOG.md' ]] && rm /usr/local/CHANGELOG.md
			[[ -f '/usr/local/LICENSE' ]] && rm /usr/local/LICENSE
			[[ -f '/usr/local/share/systemtap/tapset/node.stp' ]] && rm /usr/local/share/systemtap/tapset/node.stp
			[[ -d '/root/.npm' ]] && rm -R /root/.npm
			[[ -f '/root/.config/configstore/update-notifier-npm.json' ]] && rm /root/.config/configstore/update-notifier-npm.json

		fi

		software_id=4
		if (( ${aSOFTWARE_INSTALL_STATE[$software_id]} == -1 )); then

			Banner_Uninstalling
			G_AGP vifm

		fi

		software_id=170 # UnRAR
		if (( aSOFTWARE_INSTALL_STATE[$software_id] == -1 )); then

			Banner_Uninstalling
			G_AGP unrar

		fi

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Finalise uninstall'

		# Uninstall finished, set all uninstalled software to state 0 (not installed)
		for i in ${!aSOFTWARE_INSTALL_STATE[@]}
		do

			(( ${aSOFTWARE_INSTALL_STATE[$i]} == -1 )) && aSOFTWARE_INSTALL_STATE[$i]=0

		done

		# apt-get autoremove
		G_AGA

		# Check if we need to clear DietPi choices
		local fp_temp='.dietpi-uninstall_dpkg'
		dpkg --get-selections | mawk '{print $1}' > $fp_temp
		if ! grep -qE '^(openssh-server|dropbear)' $fp_temp; then

			INDEX_SSHSERVER_CURRENT=0
			INDEX_SSHSERVER_TARGET=0

		fi

		if ! grep -qE '^(samba$|proftpd-basic)' $fp_temp; then

			INDEX_FILESERVER_CURRENT=0
			INDEX_FILESERVER_TARGET=0

		fi

		if ! grep -q '[[:blank:]]/var/log[[:blank:]]' /etc/fstab && ! grep -q '^rsyslog' $fp_temp; then

			INDEX_LOGGING_CURRENT=0
			INDEX_LOGGING_TARGET=0

		fi

		rm $fp_temp

		systemctl daemon-reload

		#----------------------------------------------------------------------
		# Done, reset uninstall flag
		UNINSTALL_REQUIRED=0
		#----------------------------------------------------------------------
		# Reset error handler (eg: for usermsg clear)
		G_ERROR_HANDLER_RESET
		#----------------------------------------------------------------------

	}

	Run_Installations(){

		#------------------------------------------------------------
		# Prevent continue if Network or NTPD is not completed: https://github.com/MichaIng/DietPi/issues/786
		Check_Internet_and_NTPD
		#------------------------------------------------------------
		# Disable powersaving on main screen during installation
		setterm -blank 0 -powersave off 2> /dev/null
		#------------------------------------------------------------
		# Unmask all services: https://github.com/MichaIng/DietPi/issues/1320
		/DietPi/dietpi/dietpi-services unmask
		# Stop services
		[[ $G_SERVICE_CONTROL == 0 ]] || /DietPi/dietpi/dietpi-services stop
		#------------------------------------------------------------
		# Generate userdata folders
		Create_UserContent_Folders
		#------------------------------------------------------------
		# Update & upgrade APT
		Banner_Apt_Update
		# - Update APT lists
		G_AGUP
		# - Simulated APT installation to check for failures related to apt-cache.
		G_DIETPI-NOTIFY 2 'Running apt simulation to check for errors, please wait...'
		local package_to_test='bash-doc'
		G_AGI $package_to_test -s
		# - Upgrade APT packages
		G_AGUG
		# - Full upgrade on first run installs: https://github.com/MichaIng/DietPi/issues/3098
		(( $G_DIETPI_INSTALL_STAGE == 1 )) && G_AGDUG

		# Generate dir for dietpi-software installed "non-service" based control scripts
		mkdir -p /var/lib/dietpi/dietpi-software/services
		chmod -R +x /var/lib/dietpi/dietpi-software/services

		# Disable software installation for automated installs, if user input is required
		Install_Disable_Requires_UserInput

		# Apply DietPi choice systems
		Apply_FileServer_Choices
		Apply_SSHServer_Choices
		Apply_Logging_Choices

		# Apply DietPi preference systems
		Apply_Webserver_Preference

		# Update required software that needs to be installed
		Install_Flag_Prereq_Software

		# Install Linux Software
		Install_Linux_Software

		# Install DietPi Optimised Software
		/DietPi/dietpi/dietpi-services stop
		Install_Dietpi_Software

		# Apply Uninstall script, if required by e.g. DietPi choice system
		(( $UNINSTALL_REQUIRED )) && Uninstall_Software

		# Apply DietPi configurations and optimizations
		/DietPi/dietpi/dietpi-services stop
		Banner_Configs
		Install_Apply_Configs

		# Apply autostart index
		local autostart_current=0
		[[ -f '/DietPi/dietpi/.dietpi-autostart_index' ]] && autostart_current=$(</DietPi/dietpi/.dietpi-autostart_index)
		/DietPi/dietpi/dietpi-autostart $autostart_current

		# Disable services so DietPi-services can take control (DietPi will start all services from dietpi-postboot.service)
		/DietPi/dietpi/dietpi-services dietpi_controlled

		# Apply GPU Memory Splits: NB, this only checks for installed state '=2'
		Install_Apply_GPU_Settings

		# Install finished, set all installed software to state 2 (installed)
		for i in ${!aSOFTWARE_NAME[@]}
		do

			(( ${aSOFTWARE_INSTALL_STATE[$i]} == 1 )) && aSOFTWARE_INSTALL_STATE[$i]=2

		done

		# Write to .install File
		Write_InstallFileList

		# DietPi-Automation
		if (( $G_DIETPI_INSTALL_STAGE == 1 )); then

			# Remove fake-hwclock, if real hwclock is available
			# REMOVED: Needs further work as SBCs without RTC (XU4/Sparky SBC) are being flagged for this removal
			#hwclock &> /dev/null && G_AGP fake-hwclock

			# x86_64 microcode installation
			if (( $G_HW_ARCH == 10 )); then

				grep -qi 'vendor_id.*intel' /proc/cpuinfo && G_AGI intel-microcode
				grep -qi 'vendor_id.*amd' /proc/cpuinfo && G_AGI amd64-microcode

			fi

			# Custom 1st run Script (Local file)
			local run_custom_script=0
			if [[ -f '/boot/Automation_Custom_Script.sh' ]]; then

				cp /boot/Automation_Custom_Script.sh /root/AUTO_CustomScript.sh
				run_custom_script=1

			# Custom 1st run Script (Online file)
			elif [[ ${AUTOINSTALL_CUSTOMSCRIPTURL:-0} != '0' ]]; then

				INSTALL_URL_ADDRESS=$AUTOINSTALL_CUSTOMSCRIPTURL
				G_CHECK_URL "$INSTALL_URL_ADDRESS"

				# Get script and execute
				wget "$INSTALL_URL_ADDRESS" -O /root/AUTO_CustomScript.sh
				run_custom_script=1

			fi

			if (( $run_custom_script )); then

				local fp_dietpiautomation_custom_script_log='/var/tmp/dietpi/logs/dietpi-automation_custom_script.log'

				G_DIETPI-NOTIFY 2 'Running custom script, please wait...'
				chmod +x /root/AUTO_CustomScript.sh
				if /root/AUTO_CustomScript.sh | tee $fp_dietpiautomation_custom_script_log; then

					G_DIETPI-NOTIFY 0 'Custom script'

				else

					G_DIETPI-NOTIFY 1 "Custom script: Please see the log file for more information $fp_dietpiautomation_custom_script_log"

				fi

				rm /root/AUTO_CustomScript.sh

			fi

			# Apply AutoStart
			/DietPi/dietpi/dietpi-autostart $AUTOINSTALL_AUTOSTARTTARGET

			# Set Install Stage to Finished
			export G_DIETPI_INSTALL_STAGE=2
			echo $G_DIETPI_INSTALL_STAGE > /DietPi/dietpi/.install_stage

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# First Run / Automation functions Vars (eg: on a fresh install)
	#/////////////////////////////////////////////////////////////////////////////////////
	FirstRun_Automation_Init(){

		# Get settings
		AUTOINSTALL_ENABLED=$(sed -n '/^[[:blank:]]*AUTO_SETUP_AUTOMATED=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		AUTOINSTALL_AUTOSTARTTARGET=$(sed -n '/^[[:blank:]]*AUTO_SETUP_AUTOSTART_TARGET_INDEX=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		AUTOINSTALL_SSHINDEX=$(sed -n '/^[[:blank:]]*AUTO_SETUP_SSH_SERVER_INDEX=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		AUTOINSTALL_FILESERVERINDEX=$(sed -n '/^[[:blank:]]*AUTO_SETUP_FILE_SERVER_INDEX=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		AUTOINSTALL_LOGGINGINDEX=$(sed -n '/^[[:blank:]]*AUTO_SETUP_LOGGING_INDEX=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		AUTOINSTALL_WEBSERVERINDEX=$(sed -n '/^[[:blank:]]*AUTO_SETUP_WEB_SERVER_INDEX=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		AUTOINSTALL_CUSTOMSCRIPTURL=$(sed -n '/^[[:blank:]]*AUTO_SETUP_CUSTOM_SCRIPT_EXEC=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		AUTOINSTALL_TIMESYNCMODE=$(sed -n '/^[[:blank:]]*CONFIG_NTP_MODE=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
		# Else set defaults
		[[ $AUTOINSTALL_ENABLED ]] || AUTOINSTALL_ENABLED=0
		[[ $AUTOINSTALL_AUTOSTARTTARGET ]] || AUTOINSTALL_AUTOSTARTTARGET=0
		[[ $AUTOINSTALL_SSHINDEX ]] || AUTOINSTALL_SSHINDEX=0
		[[ $AUTOINSTALL_FILESERVERINDEX ]] || AUTOINSTALL_FILESERVERINDEX=0
		[[ $AUTOINSTALL_LOGGINGINDEX ]] || AUTOINSTALL_LOGGINGINDEX=0
		[[ $AUTOINSTALL_WEBSERVERINDEX ]] || AUTOINSTALL_WEBSERVERINDEX=0
		[[ $AUTOINSTALL_TIMESYNCMODE ]] || AUTOINSTALL_TIMESYNCMODE=2

	}

	FirstRun_Automation_Set(){

		# Automated install
		if (( $AUTOINSTALL_ENABLED > 0 )); then

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Running automated installation'

			TARGETMENUID=-1 # Skip menu loop
			GOSTARTINSTALL=1 # Set install start flag

			# Find all software entries of AUTO_SETUP_INSTALL_SOFTWARE_ID= in dietpi.txt. Then set to state 1 for installation.
			while read -r software_id
			do

				# Flag for installation
				if [[ ${aSOFTWARE_NAME[$software_id]} ]]; then

					aSOFTWARE_INSTALL_STATE[$software_id]=1
					G_DIETPI-NOTIFY 2 "Automation: ${aSOFTWARE_NAME[$software_id]}. Flagged for installation."

				fi

			done <<< "$(grep '^[[:blank:]]*AUTO_SETUP_INSTALL_SOFTWARE_ID=' /DietPi/dietpi.txt | mawk '{print $1}' | sed 's/[^0-9]*//g')"

		fi

		# Further Automated options. (Applied regardless of AUTOINSTALL_ENABLED)
		INDEX_SSHSERVER_TARGET=$AUTOINSTALL_SSHINDEX
		INDEX_FILESERVER_TARGET=$AUTOINSTALL_FILESERVERINDEX
		INDEX_LOGGING_TARGET=$AUTOINSTALL_LOGGINGINDEX
		INDEX_WEBSERVER_TARGET=$AUTOINSTALL_WEBSERVERINDEX

		# Re-flag RAMlog for install, if enabled, ensures AUTO_SETUP_RAMLOG_MAXSIZE gets applied
		[[ $INDEX_LOGGING_TARGET == -[12] ]] && aSOFTWARE_INSTALL_STATE[103]=1

		# Set time sync mode
		/DietPi/dietpi/func/dietpi-set_software ntpd-mode $AUTOINSTALL_TIMESYNCMODE

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	Input_Modes(){

		local input=$@
		input=${input#*[[:blank:]]}

		# Process software and exit
		if [[ $1 == 'install' || $1 == 'reinstall' || $1 == 'uninstall' ]]; then

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "Automated $1"

			# - Make sure we have at least one entry
			if [[ -z $input ]]; then

				G_DIETPI-NOTIFY 1 'Please enter at least one software index ID or choice system INDEX_*_TARGET=-?'

			else

				# - Uninstall | Stop services prior
				[[ $1 == 'uninstall' && $G_SERVICE_CONTROL != 0 ]] && /DietPi/dietpi/dietpi-services stop

				# - Process inputs
				for i in $input
				do

					# - Check if input software ID exists, install state was defined
					if disable_error=1 G_CHECK_VALIDINT "$i" 0 && 
						disable_error=1 G_CHECK_VALIDINT "${aSOFTWARE_INSTALL_STATE[$i]}"; then

						if [[ $1 == 'uninstall' ]]; then

							if (( ${aSOFTWARE_INSTALL_STATE[$i]} == 2 )); then

								aSOFTWARE_INSTALL_STATE[$i]=-1
								G_DIETPI-NOTIFY 0 "Uninstalling ${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}"

							else

								G_DIETPI-NOTIFY 2 "$i: ${aSOFTWARE_NAME[$i]} is not currently installed"
								G_DIETPI-NOTIFY 0 "No changes applied for: ${aSOFTWARE_NAME[$i]}"

							fi

						elif [[ $1 == 'reinstall' ]]; then

							if (( ! ${aSOFTWARE_AVAIL_G_HW_ARCH[$i,$G_HW_ARCH]:=1} )); then

								G_DIETPI-NOTIFY 1 "Software title (${aSOFTWARE_NAME[$i]}) is not supported on $G_HW_ARCH_DESCRIPTION systems."

							elif (( ! ${aSOFTWARE_AVAIL_G_HW_MODEL[$i,$G_HW_MODEL]:=1} )); then

								G_DIETPI-NOTIFY 1 "Software title (${aSOFTWARE_NAME[$i]}) is not supported for $G_HW_MODEL_DESCRIPTION."

							elif (( ! ${aSOFTWARE_AVAIL_G_DISTRO[$i,$G_DISTRO]:=1} )); then

								G_DIETPI-NOTIFY 1 "Software title (${aSOFTWARE_NAME[$i]}) is not supported on Debian ${G_DISTRO_NAME^}."

							elif (( ${aSOFTWARE_INSTALL_STATE[$i]} == 2 )); then

								aSOFTWARE_INSTALL_STATE[$i]=1
								GOSTARTINSTALL=1 # Set install start flag

								G_DIETPI-NOTIFY 0 "Reinstalling ${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}"
								sleep 0.5

							else

								G_DIETPI-NOTIFY 2 "$i: ${aSOFTWARE_NAME[$i]} is not currently installed"
								G_DIETPI-NOTIFY 2 'The program must be installed, before reinstall can be used'
								G_DIETPI-NOTIFY 0 "No changes applied for: ${aSOFTWARE_NAME[$i]}"

							fi

						elif [[ $1 == 'install' ]]; then

							if (( ! ${aSOFTWARE_AVAIL_G_HW_ARCH[$i,$G_HW_ARCH]:=1} )); then

								G_DIETPI-NOTIFY 1 "Software title (${aSOFTWARE_NAME[$i]}) is not supported on $G_HW_ARCH_DESCRIPTION systems."

							elif (( ! ${aSOFTWARE_AVAIL_G_HW_MODEL[$i,$G_HW_MODEL]:=1} )); then

								G_DIETPI-NOTIFY 1 "Software title (${aSOFTWARE_NAME[$i]}) is not supported for $G_HW_MODEL_DESCRIPTION."

							elif (( ! ${aSOFTWARE_AVAIL_G_DISTRO[$i,$G_DISTRO]:=1} )); then

								G_DIETPI-NOTIFY 1 "Software title (${aSOFTWARE_NAME[$i]}) is not supported on Debian ${G_DISTRO_NAME^}."

							elif (( ${aSOFTWARE_INSTALL_STATE[$i]} != 2 )); then

								aSOFTWARE_INSTALL_STATE[$i]=1
								GOSTARTINSTALL=1 # Set install start flag

								G_DIETPI-NOTIFY 0 "Installing ${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}"
								sleep 0.5

							else

								G_DIETPI-NOTIFY 2 "$i: ${aSOFTWARE_NAME[$i]} is already installed"
								G_DIETPI-NOTIFY 2 "Use \"dietpi-software reinstall $i\", to force rerun of installation and configuration scripts for ${aSOFTWARE_NAME[$i]}."
								G_DIETPI-NOTIFY 0 "No changes applied for: ${aSOFTWARE_NAME[$i]}"

							fi

						fi

					fi

				done

				# - Reinstall, prompt for backup
				if [[ $1 == 'reinstall' ]]; then

					(( $GOSTARTINSTALL )) && G_PROMPT_BACKUP

				# - Uninstall | Finish up and clear non-required packages
				elif [[ $1 == 'uninstall' ]]; then

					Uninstall_Software
					Write_InstallFileList
					[[ $G_SERVICE_CONTROL == 0 ]] || /DietPi/dietpi/dietpi-services start

				fi

			fi

		# List software IDs, names and additional info
		elif [[ $1 == 'list' ]]; then

			for i in ${!aSOFTWARE_NAME[@]}
			do

				local string="\e[0mID $i | "
				(( ${aSOFTWARE_INSTALL_STATE[$i]} == 2 )) && string="\e[32mID $i | "

				string+="=${aSOFTWARE_INSTALL_STATE[$i]} | ${aSOFTWARE_NAME[$i]}:\e[0m \e[90m${aSOFTWARE_DESC[$i]}\e[0m |"

				(( ${aSOFTWARE_REQUIRES_ALSA[$i]:=0} == 1 )) && string+=' +ALSA'
				(( ${aSOFTWARE_REQUIRES_XSERVERXORG[$i]:=0} == 1 )) && string+=' +XSERVER'
				(( ${aSOFTWARE_REQUIRES_DESKTOP[$i]:=0} == 1 )) && string+=' +DESKTOP'
				(( ${aSOFTWARE_REQUIRES_RSYSLOG[$i]:=0} == 1 )) && string+=' +RSYSLOG'
				(( ${aSOFTWARE_REQUIRES_FFMPEG[$i]:=0} == 1 )) && string+=' +FFMPEG'
				(( ${aSOFTWARE_REQUIRES_JAVA_JRE_JDK[$i]:=0} == 1 )) && string+=' +JAVA'
				(( ${aSOFTWARE_REQUIRES_NODEJS[$i]:=0} == 1 )) && string+=' +NODEJS'
				(( ${aSOFTWARE_REQUIRES_BUILDESSENTIAL[$i]:=0} == 1 )) && string+=' +BUILDESSENTIAL'
				(( ${aSOFTWARE_REQUIRES_GIT[$i]:=0} == 1 )) && string+=' +GIT'
				(( ${aSOFTWARE_REQUIRES_WEBSERVER[$i]:=0} == 1 )) && string+=' +WEBSERVER'
				(( ${aSOFTWARE_REQUIRES_PHP[$i]:=0} == 1 )) && string+=' +PHP'
				(( ${aSOFTWARE_REQUIRES_MYSQL[$i]:=0} == 1 )) && string+=' +MARIADB'
				(( ${aSOFTWARE_REQUIRES_SQLITE[$i]:=0} == 1 )) && string+=' +SQLITE'

				# - Available for G_HW_ARCH?
				if (( ! ${aSOFTWARE_AVAIL_G_HW_ARCH[$i,$G_HW_ARCH]:=1} )); then

					string+=" \e[31mDISABLED for $G_HW_ARCH_DESCRIPTION\e[0m"

				# - Available for G_HW_MODEL?
				elif (( ! ${aSOFTWARE_AVAIL_G_HW_MODEL[$i,$G_HW_MODEL]:=1} )); then

					string+=" \e[31mDISABLED for $G_HW_MODEL_DESCRIPTION\e[0m"

				# - Available for G_DISTRO?
				elif (( ! ${aSOFTWARE_AVAIL_G_DISTRO[$i,$G_DISTRO]:=1} )); then

					string+=" \e[31mDISABLED for Debian $G_DISTRO_NAME\e[0m"

				fi

				# - Online docs
				[[ ${aSOFTWARE_ONLINEDOC_URL[$i]} ]] && string+=" | \e[90m$FP_ONLINEDOC_URL${aSOFTWARE_ONLINEDOC_URL[$i]}\e[0m"

				# - Convert string to lowercase
				echo -e "${string,,}"

			done

		elif [[ $1 == 'free' ]]; then

			# Get highest software array index
			local max=0
			for max in ${!aSOFTWARE_NAME[@]}; do :; done

			# Check for unused indices
			local free=''
			for (( i=0; i<=$max; i++ )); do	[[ ${aSOFTWARE_NAME[$i]} ]] || free+=" $i"; done

			echo "Free software ID(s):${free:- None, so use $(($max+1))!}"

		else

			G_DIETPI-NOTIFY 2 "Unknown command $1"

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Whip menus
	#/////////////////////////////////////////////////////////////////////////////////////
	MENU_MAIN_LASTITEM='Help!'
	TARGETMENUID=0

	Menu_CreateSoftwareList(){

		# Software type for this menu
		local input_mode=$1 #-1=search all mode #0=dietpi 1=linux
		local display_software_menu=1 #only used to disable display of CHECKLIST when search finds no results

		# Search Mode
		if (( $input_mode == -1 )); then

			local search_string='' #show all
			display_software_menu=0 #prevent display of CHECKLIST if no results found
			if G_WHIP_INPUTBOX 'Please enter a software title/index to search (eg: desktop/cloud/media/torrent)'; then

				G_WHIP_CHECKLIST_ARRAY=()
				search_string=$G_WHIP_RETURNED_VALUE
				for i in ${!aSOFTWARE_NAME[@]}
				do

					if (( ${aSOFTWARE_AVAIL_G_HW_MODEL[$i,$G_HW_MODEL]:=1} && ${aSOFTWARE_AVAIL_G_HW_ARCH[$i,$G_HW_ARCH]:=1} && ${aSOFTWARE_AVAIL_G_DISTRO[$i,$G_DISTRO]:=1} )) &&
						[[ $search_string == $i || ${aSOFTWARE_NAME[$i],,} == *${search_string,,}* || ${aSOFTWARE_DESC[$i],,} == *${search_string,,}* ]]; then

						local selected='off'
						if (( ${aSOFTWARE_INSTALL_STATE[$i]} > 0 )); then

							selected='on'

							if (( ${aSOFTWARE_INSTALL_STATE[$i]} == 1 )); then

								# Reset to 0. Menu checklists will apply back to 1
								aSOFTWARE_INSTALL_STATE[$i]=0

							fi

						fi

						G_WHIP_CHECKLIST_ARRAY+=($i "${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}" "$selected")
						display_software_menu=1

					fi

				done

				(( $display_software_menu )) || G_WHIP_MSG "Search was unable to find any items for '$search_string'"

			fi

		# Generate Whiptail menu list, of all items in specific software type, based on category
		else

			# Prewarnings - Linux
			if (( $input_mode == 1 )); then

				# Inform User that DietPi software will automatically install additional linux software when required.
				if (( ! $USER_LINUX_AUTOINSTALL_PROMPT_DISPLAYED )); then

					G_WHIP_MSG 'DietPi will automatically install additional Linux software on the next screen, when required (eg: Desktop LXDE will install ALSA + Xserver).\n\nThis means you only need to select the software you actually require.'
					USER_LINUX_AUTOINSTALL_PROMPT_DISPLAYED=1

				fi

			fi

			G_WHIP_CHECKLIST_ARRAY=()

			local max_categories=${#aSOFTWARE_CATEGORIES_DIETPI[@]}
			(( $input_mode == 1 )) && max_categories=${#aSOFTWARE_CATEGORIES_LINUX[@]}

			for ((i=0; i<$max_categories; i++))
			do

				# Only add the category if we have software for it.
				local category_enabled=0

				# Now run through all available software
				for j in ${!aSOFTWARE_CATEGORY_INDEX[@]}
				do

					# Check if this software matches the current category and software type for this menu.
					if (( ${aSOFTWARE_CATEGORY_INDEX[$j]} == $i && ${aSOFTWARE_TYPE[$j]} == $input_mode )); then

						# + is available for hardware?
						# + is available for distro?
						if (( ${aSOFTWARE_AVAIL_G_HW_MODEL[$j,$G_HW_MODEL]:=1} &&
							${aSOFTWARE_AVAIL_G_HW_ARCH[$j,$G_HW_ARCH]:=1} &&
							${aSOFTWARE_AVAIL_G_DISTRO[$j,$G_DISTRO]:=1} )); then

							local selected='off'

							if (( ${aSOFTWARE_INSTALL_STATE[$j]} > 0 )); then

								selected='on'

								if (( ${aSOFTWARE_INSTALL_STATE[$j]} == 1 )); then

									#Reset to 0. Menu checklists will apply back to 1
									aSOFTWARE_INSTALL_STATE[$j]=0

								fi

							fi

							# - Add category
							if (( $category_enabled == 0 )); then

								# - dietpi
								if (( $input_mode == 0 )); then

									G_WHIP_CHECKLIST_ARRAY+=('' "${aSOFTWARE_CATEGORIES_DIETPI[$i]}" 'off')

								# - linux
								elif (( $input_mode == 1 )); then

									G_WHIP_CHECKLIST_ARRAY+=('' "${aSOFTWARE_CATEGORIES_LINUX[$i]}" 'off')

								fi

								category_enabled=1

							fi

							# Add this option to whiptail list
							G_WHIP_CHECKLIST_ARRAY+=($j "${aSOFTWARE_NAME[$j]}: ${aSOFTWARE_DESC[$j]}" $selected)

						fi

					fi

				done

			done

		fi

		if (( $display_software_menu )); then

			G_WHIP_SIZE_X_MAX=90
			G_WHIP_BUTTON_CANCEL_TEXT='Back'
			G_WHIP_CHECKLIST "Please use the spacebar to select the software you wish to install.\n - Software and usage details: https://dietpi.com/software
 - NB: Pressing 'ESC' or selecting 'Back' will clear all changed selections"

			# Reset Choices made flag
			INSTALL_SOFTWARE_CHOICESMADE=0

			# Check for matching results (selected items)
			for i in $G_WHIP_RETURNED_VALUE
			do

				# Enable
				if disable_error=1 G_CHECK_VALIDINT "$i" && (( ${aSOFTWARE_INSTALL_STATE[$i]} == 0 )); then

					INSTALL_SOFTWARE_CHOICESMADE=1
					aSOFTWARE_INSTALL_STATE[$i]=1

				fi

			done

			#-----------------------------------------------------------------------------
			# Install Info/Warnings

			# DietPi-Drive_Manager can be used to setup Samba/NFS shares with ease!
			if (( ${aSOFTWARE_INSTALL_STATE[1]} == 1 || ${aSOFTWARE_INSTALL_STATE[110]} == 1 )); then

				G_WHIP_MSG "NFS/Samba client info:\n\nDietPi-Drive_Manager is a powerful tool which vastly simplifies the mounting of NFS and Samba shares.\n
Once $G_PROGRAM_NAME has finished installation, simply run 'dietpi-drive_manager' to setup required network mounts."

			fi

			# Gogs: Requires OpenSSH for ssh-keygen binary: https://github.com/MichaIng/DietPi/issues/442
			if (( ${aSOFTWARE_INSTALL_STATE[49]} == 1 && $INDEX_SSHSERVER_TARGET != -2 )); then

				if G_WHIP_YESNO "Gogs requires OpenSSH server to function.\n\nIf you continue, OpenSSH will be selected for install on your system. OpenSSH will also replace Dropbear (if currently installed).\n
Would you like to continue with the Gogs installation?"; then

					# - Use SSH target index to ensure Dropbear gets removed if installed.
					INDEX_SSHSERVER_TARGET=-2

				else

					aSOFTWARE_INSTALL_STATE[49]=0

				fi

			fi

			# Webserver stacks
			for i in 75 76 78 79 81 82
			do

				# Please let DietPi install them for you...
				if (( ${aSOFTWARE_INSTALL_STATE[$i]} == 1 )); then

					G_WHIP_MSG 'DietPi will automatically install a webserver stack (based on your Webserver Preference) when any software that requires a webserver is selected for installation (eg: ownCloud, Pi-hole etc).\n
It is highly recommended that you allow DietPi to do this for you, ensuring compatibility and stability across DietPi installed programs.\n\nPlease only select a webserver stack if you specifically require it, and, no other webserver stack is installed.\n
TLDR: You do NOT need to select a webserver stack for installation with DietPi. Its all automatic.'
					break

				fi

			done

			# RPiCamInterface - warn user of locking out camera: https://github.com/MichaIng/DietPi/issues/249
			if (( ${aSOFTWARE_INSTALL_STATE[59]} == 1 )); then

				G_WHIP_MSG 'RPi Cam Control Interface will automatically start and activate the camera during boot. This will prevent other programs (eg: raspistill) from using the camera.\n
You can free up the camera by selecting "Stop Camera" from the web interface:\n - http://myip/rpicam'

			fi

			# EmonHUB/EmonPi
			if (( ${aSOFTWARE_INSTALL_STATE[99]} == 1 )); then

				# - Enter API KEY
				# - Grab key from dietpi.txt
				USER_EMONHUB_APIKEY_CURRENT=$(grep -m1 '^[[:blank:]]*SOFTWARE_EMONHUB_APIKEY=' /DietPi/dietpi.txt | sed 's/^.*=//')

				while (( $USER_EMONHUB_APIKEY_COMPLETED == 0 )); do

					G_WHIP_INPUTBOX "EmonHUB/EmonPi:\n\nPlease enter the \"Write API KEY\":\n - Visit https://emoncms.org to register an account and login.
 - Select \"Setup\" from the top right of screen, then select \"My Account\"\n - Enter the \"Write API Key\" into the box below."
					if (( $? == 0 )); then

						USER_EMONHUB_APIKEY_CURRENT=$G_WHIP_RETURNED_VALUE

						G_WHIP_YESNO "The following \"Write API KEY\" will be applied during installation:\n$USER_EMONHUB_APIKEY_CURRENT\n\nIs this key correct?"
						if (( $? == 0 )); then

							# - update dietpi.txt so the value will be applied during installation.
							sed -i "/^[[:blank:]]*SOFTWARE_EMONHUB_APIKEY=/c\SOFTWARE_EMONHUB_APIKEY=$USER_EMONHUB_APIKEY_CURRENT" /DietPi/dietpi.txt

							USER_EMONHUB_APIKEY_COMPLETED=1

						fi

					fi

				done

			fi

			# Pi-hole
			if (( ${aSOFTWARE_INSTALL_STATE[93]} == 1 )); then

				# - prompt for static ip.
				if G_WHIP_YESNO 'A static IP address is essential for Pi-hole installations. DietPi-Config can be used to quickly setup your static IP address.\n
If you have already setup your static IP, please ignore this message.\n\nWould you like to setup your static IP address now?'; then

					G_WHIP_MSG 'DietPi-Config will now be launched. Simply select your Ethernet or Wifi connection from the menu to access the IP address settings.\n
The "copy current address to STATIC" menu option can be used to quickly setup your static IP. Please ensure you change the mode "DHCP" to "STATIC".\n
Once completed, select "Apply Save Changes", then exit DietPi-Config to resume setup.'
					/DietPi/dietpi/dietpi-config 8 1

				fi

			fi

			# WiFi Hotspot Criteria
			if (( ${aSOFTWARE_INSTALL_STATE[60]} == 1 || ${aSOFTWARE_INSTALL_STATE[61]} == 1 )); then

				# Enable WiFi modules
				/DietPi/dietpi/func/dietpi-set_hardware wifimodules enable

				while :; do

					local criteria_passed=1
					local output_string='The following criteria must be met, for the installation of WiFi Hotspot to succeed:'

					if ip r | grep -qi "eth$(sed -n 1p /DietPi/dietpi/.network)"; then

						output_string+='\n\n - Ethernet online: PASSED'

					else

						criteria_passed=0
						output_string+='\n\n - Ethernet online: FAILED.\nUse dietpi-config to connect and configure ethernet.'

					fi

					if [[ -d /sys/class/net/wlan$(sed -n 2p /DietPi/dietpi/.network) ]]; then

						output_string+='\n\n - Wifi adapter detected: PASSED'

					else

						criteria_passed=0
						output_string+='\n\n - Wifi adapter detected: FAILED.\nPlease connect a WiFi adapter and try again.'

					fi

					# Passed
					if (( $criteria_passed )); then

						output_string+='\n\nPASSED: Criteria met. Good to go.'
						G_WHIP_MSG "$output_string"
						break

					# Failed, retry?
					else

						output_string+='\n\nFAILED: Criteria not met. Would you like to check again?'
						if ! G_WHIP_YESNO "$output_string"; then

							aSOFTWARE_INSTALL_STATE[60]=0
							aSOFTWARE_INSTALL_STATE[61]=0
							G_WHIP_MSG 'WiFi Hotspot criteria was not met. The software will not be installed.'
							break

						fi

					fi

				done

			fi

			# Weaved/Remot3.it
			if (( ${aSOFTWARE_INSTALL_STATE[68]} == 1 )); then

				G_WHIP_MSG 'Remot3.it requires you to create an online account, and, link it this device.\n
Once DietPi has completed your software installations, and rebooted, please follow the First Run tutorial link below:\nhttps://dietpi.com/phpbb/viewtopic.php?f=8&t=5&p=188#p188'

			fi

			# Let's Encrypt
			if (( ${aSOFTWARE_INSTALL_STATE[92]} == 1 )); then

				G_WHIP_MSG 'The DietPi installation of CertBot supports all offered web servers.\n\nOnce the installation has finished, you can setup your free SSL cert with:
 - DietPi-LetsEncrypt\n\nThis is a easy to use frontend for CertBot and allows integration into DietPi systems.\n\nMore information:\n - https://dietpi.com/phpbb/viewtopic.php?f=8&t=5&p=1061#p1062'

			fi

			# dietpi-config can be used to install/configure the following software. Ask user.
			# - NoIp
			if (( ${aSOFTWARE_INSTALL_STATE[67]} == 1 )); then

				if G_WHIP_YESNO 'NoIp can be setup and configured by using DietPi-Config. Would you like to complete this now? \n\n- Once finished, exit DietPi-Config to resume setup.\n
 - More information:\nhttps://dietpi.com/phpbb/viewtopic.php?p=58#p58'; then

					# Write installed states to temp
					Write_InstallFileList temp

					# Launch DietPi-config
					/DietPi/dietpi/dietpi-config 16 1

					# Read installed states from temp
					Read_InstallFileList temp

				fi

			fi

			# phpMyAdmin is currently not compatible with ownCloud and phpBB: https://github.com/MichaIng/DietPi/issues/2808#issuecomment-493220292
			if (( ${aSOFTWARE_INSTALL_STATE[90]} == 1 && ( ${aSOFTWARE_INSTALL_STATE[47]} > 0 || ${aSOFTWARE_INSTALL_STATE[54]} > 0 ) )); then

				G_WHIP_MSG '[WARNING] Incompatible selection\n
phpMyAdmin is currently not compatible with ownCloud and phpBB. This will be possible with ownCloud 10.3 and phpBB 3.3. Check out the changelogs of future DietPi updates to get informed.\n
phpMyAdmin will be deselected!'
				aSOFTWARE_INSTALL_STATE[90]=0

			fi

			# Boot Choices
			if (( ${aSOFTWARE_INSTALL_STATE[23]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[24]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[25]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[26]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[31]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[51]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[108]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[112]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[119]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[155]} == 1 ||
				${aSOFTWARE_INSTALL_STATE[173]} == 1 )); then

				# Set Boot Order
				G_WHIP_YESNO 'Would you like to configure the auto boot options for DietPi?\n
This will allow you to choose which program loads automatically, after the system has booted up, eg:
 - Console\n - Desktop\n - Kodi' && /DietPi/dietpi/dietpi-autostart

			fi

		fi

	}

	Menu_Main(){

		# Data for storing SSH server index info
		local index_sshserver_text='None'
		if (( $INDEX_SSHSERVER_TARGET == -1 )); then

			index_sshserver_text='Dropbear'

		elif (( $INDEX_SSHSERVER_TARGET == -2 )); then

			index_sshserver_text='OpenSSH'

		fi

		# Data for storing Fileserver index info
		local index_fileserver_text='None'
		if (( $INDEX_FILESERVER_TARGET == -1 )); then

			index_fileserver_text='ProFTP'

		elif (( $INDEX_FILESERVER_TARGET == -2 )); then

			index_fileserver_text='Samba'

		fi

		# Data for storing Logging index info
		local index_logging_text='None'
		if (( $INDEX_LOGGING_TARGET == -1 )); then

			index_logging_text='DietPi-Ramlog #1'

		elif (( $INDEX_LOGGING_TARGET == -2 )); then

			index_logging_text='DietPi-Ramlog #2'

		elif (( $INDEX_LOGGING_TARGET == -3 )); then

			index_logging_text='Full'

		fi

		# Hold our string that tells the user what software will be removed when using Index based choice systems
		local toberemoved_text=''

		# Check status of USB drive
		Check_USB_Drive_Installed

		# Where is userdata stored?
		local user_data_location_current=$(readlink -f $G_FP_DIETPI_USERDATA)

		local user_data_location_description=''
		if [[ $user_data_location_current == $FP_DIETPI_DEDICATED_USBDRIVE ]]; then

			user_data_location_description="USB Drive | $user_data_location_current"

		elif [[ $user_data_location_current == $G_FP_DIETPI_USERDATA ]]; then

			user_data_location_description="SD/EMMC | $user_data_location_current"

		else

			user_data_location_description="Custom | $user_data_location_current"

		fi

		# - Webserver preference system
		local index_webserver_text='Apache2'
		if (( $INDEX_WEBSERVER_TARGET == -1 )); then

			index_webserver_text='Nginx'

		elif (( $INDEX_WEBSERVER_TARGET == -2 )); then

			index_webserver_text='Lighttpd'

		fi

		G_WHIP_MENU_ARRAY=(

			'Help!' ': Links to online guides, docs and information'
			'DietPi-Config' ': Feature-rich configuration tool for your device'
			'' '●─ Select Software '
			'Search' ': Find a software title for installation'
			'Software Optimised' ': Select DietPi optimised software for installation'
			'Software Additional' ': Select additional Linux software for installation'
			'SSH Server' ": [$index_sshserver_text]"
			'File Server' ": [$index_fileserver_text]"
			'Log System' ": [$index_logging_text]"
			'Webserver Preference' ": [$index_webserver_text]"
			'User Data Location' ": [$user_data_location_description]"
			'' '●─ Install or Remove Software '
			'Uninstall' ': Select installed software for removal'
			'Install' ': Go >> Start installation for selected software'

		)

		G_WHIP_DEFAULT_ITEM=$MENU_MAIN_LASTITEM
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		G_WHIP_SIZE_X_MAX=80

		if G_WHIP_MENU; then

			MENU_MAIN_LASTITEM=$G_WHIP_RETURNED_VALUE

			case "$G_WHIP_RETURNED_VALUE" in

				'Uninstall')

					Menu_Uninstall_Software

				;;

				'Search')

					Menu_CreateSoftwareList -1

				;;

				'Software Optimised')

					Menu_CreateSoftwareList 0

				;;

				'Software Additional'*)

					Menu_CreateSoftwareList 1

				;;

				'SSH Server')

					G_WHIP_MENU_ARRAY=(

						'None' ': Not required / manual setup.'
						'Dropbear' ': Lightweight SSH Server (Recommended).'
						'OpenSSH' ': Feature Rich SSH Server with SFTP/SCP support.'

					)

					G_WHIP_DEFAULT_ITEM=$index_sshserver_text
					G_WHIP_BUTTON_CANCEL_TEXT='Back'
					if G_WHIP_MENU 'Please select desired SSH server:\n
- None: Selecting this option will uninstall all SSH servers. This reduces system resources and improves performance. Useful for users who do NOT require networked/remote terminal access.\n
- Dropbear (Recommended): Lightweight SSH server, installed by default on DietPi systems.\n
- OpenSSH: A feature rich SSH server with SFTP/SCP support, at the cost of increased resource usage.'; then

						# - Assign target index
						if [[ $G_WHIP_RETURNED_VALUE == 'None' ]]; then

							INDEX_SSHSERVER_TARGET=0
							toberemoved_text='Dropbear and OpenSSH Server'

						elif [[ $G_WHIP_RETURNED_VALUE == 'Dropbear' ]]; then

							INDEX_SSHSERVER_TARGET=-1
							toberemoved_text='OpenSSH Server'

						elif [[ $G_WHIP_RETURNED_VALUE == 'OpenSSH' ]]; then

							INDEX_SSHSERVER_TARGET=-2
							toberemoved_text='Dropbear'

						# - Reset to current
						else

							INDEX_SSHSERVER_TARGET=$INDEX_SSHSERVER_CURRENT

						fi

					fi

					# Check for changes
					INSTALL_SSHSERVER_CHOICESMADE=0
					if (( $INDEX_SSHSERVER_TARGET != $INDEX_SSHSERVER_CURRENT )); then

						INSTALL_SSHSERVER_CHOICESMADE=1
						G_WHIP_MSG "$G_WHIP_RETURNED_VALUE has been selected:\n- Your choice will be applied when 'Install Go >> Start installation' is selected.\n- $toberemoved_text installations will be automatically uninstalled."

					fi

				;;

				'File Server')

					G_WHIP_MENU_ARRAY=(

						'None' ': Not required / manual setup.'
						'ProFTP' ': Efficient, lightweight fileserver (recommended).'
						'Samba' ': Feature-rich fileserver.'

					)

					G_WHIP_DEFAULT_ITEM=$index_fileserver_text
					G_WHIP_BUTTON_CANCEL_TEXT='Back'
					G_WHIP_MENU 'Please select desired fileserver:\n
- None: Select this option if you do NOT require a method of accessing files and folders on this device, over a network.\n
- ProFTP (Recommended for RPi v1): Allows you to access/share files on this device efficiently with minimal cpu usage. Uses FTP protocol.\n
- Samba (Recommended for RPi v2): Allows you to easily access/share files on this device, at the cost of higher cpu usage.\n\nMore info: https://dietpi.com/phpbb/viewtopic.php?f=8&t=15#p19'
					if (( $? == 0 )); then

						# - Assign target index
						if [[ $G_WHIP_RETURNED_VALUE == 'None' ]]; then

							INDEX_FILESERVER_TARGET=0
							toberemoved_text='ProFTP and Samba Server'

						elif [[ $G_WHIP_RETURNED_VALUE == 'ProFTP' ]]; then

							INDEX_FILESERVER_TARGET=-1
							toberemoved_text='Samba Server'

						elif [[ $G_WHIP_RETURNED_VALUE == 'Samba' ]]; then

							INDEX_FILESERVER_TARGET=-2
							toberemoved_text='ProFTP'

						# - Reset to current
						else

							INDEX_FILESERVER_TARGET=$INDEX_FILESERVER_CURRENT

						fi

					fi

					# Check for changes
					INSTALL_FILESERVER_CHOICESMADE=0
					if (( $INDEX_FILESERVER_TARGET != $INDEX_FILESERVER_CURRENT )); then

						INSTALL_FILESERVER_CHOICESMADE=1
						G_WHIP_MSG "$G_WHIP_RETURNED_VALUE has been selected:\n- Your choice will be applied when 'Install Go >> Start installation' is selected.\n- $toberemoved_text installations will be automatically uninstalled."

					fi

				;;

				'Log System')

					G_WHIP_MENU_ARRAY=(

						'None' ': Not required / manual setup.'
						'DietPi-Ramlog #1' ': Hourly clear (recommended).'
						'DietPi-Ramlog #2' ': Hourly save, then clear.'
						'Full' ': Logrotate and Rsyslog.'

					)

					G_WHIP_DEFAULT_ITEM=$index_logging_text
					G_WHIP_BUTTON_CANCEL_TEXT='Back'
					G_WHIP_MENU 'Please select desired logging system:\n
- None: Selecting this option will uninstall DietPi-Ramlog, Logrotate, Rsyslog.\n
- DietPi-Ramlog #1 (Max performance): Mounts /var/log to RAM, reducing filesystem IO. Logfiles are cleared every hour. Does NOT save logfiles to disk.\n
- DietPi-Ramlog #2: Same as #1, with the added feature of saving logfile contents to disk (/root/logfile_storage/*), before being cleared.\n
- Full (Reduces performance): Mounts /var/log to DISK, reduces SDcard lifespan. Full logging system with Logrotate and Rsyslog.'
					if (( $? == 0 )); then

						# - Assign target index
						if [[ $G_WHIP_RETURNED_VALUE == 'None' ]]; then

							INDEX_LOGGING_TARGET=0
							toberemoved_text='DietPi-Ramlog, Logrotate, Rsyslog'

						elif [[ $G_WHIP_RETURNED_VALUE == 'DietPi-Ramlog #1' ]]; then

							INDEX_LOGGING_TARGET=-1
							toberemoved_text='Logrotate, Rsyslog'

						elif [[ $G_WHIP_RETURNED_VALUE == 'DietPi-Ramlog #2' ]]; then

							INDEX_LOGGING_TARGET=-2
							toberemoved_text='Logrotate, Rsyslog'

						elif [[ $G_WHIP_RETURNED_VALUE == 'Full' ]]; then

							INDEX_LOGGING_TARGET=-3
							toberemoved_text='DietPi-Ramlog'

						# - Reset to current
						else

							INDEX_LOGGING_TARGET=$INDEX_LOGGING_CURRENT

						fi

					fi

					# Check for changes
					INSTALL_LOGGING_CHOICESMADE=0
					if (( $INDEX_LOGGING_TARGET != $INDEX_LOGGING_CURRENT )); then

						INSTALL_LOGGING_CHOICESMADE=1
						G_WHIP_MSG "$G_WHIP_RETURNED_VALUE has been selected:\n - Your choice will be applied when 'Install Go >> Start installation' is selected.\n - $toberemoved_text installations will be automatically uninstalled."

					fi

				;;

				'User Data Location')

					# - Vars if we need to move data.
					local move_data_target=$user_data_location_current

					G_WHIP_MENU_ARRAY=(

						'List' ': Select from a list of available drives to move user data.'
						'Custom' ': Manually enter a location location to move user data.'
						'Drive' ': Launch DietPi-Drive_Manager.'

					)

					G_WHIP_BUTTON_CANCEL_TEXT='Back'
					G_WHIP_MENU 'Choose where to store your user data. User data includes software such as ownCloud data store, BitTorrent downloads etc.\n
More information on user data in DietPi:\n- https://dietpi.com/phpbb/viewtopic.php?p=2087\n\n- DietPi-Drive_Manager: Launch DietPi-Drive_Manager to setup external drives, and, move user data to different locations.'
					if (( $? == 0 )); then

						# - DriveMan
						if [[ $G_WHIP_RETURNED_VALUE == 'Drive' ]]; then

							/DietPi/dietpi/dietpi-drive_manager

						# - List
						elif [[ $G_WHIP_RETURNED_VALUE == 'List' ]]; then

							/DietPi/dietpi/dietpi-drive_manager 1

							local return_value=$(</tmp/dietpi-drive_manager_selmnt)
							if [[ $return_value ]]; then

								[[ $return_value == '/' ]] && return_value='/mnt'

								move_data_target=$return_value
								move_data_target+='/dietpi_userdata'

							fi

						# - Manual filepath entry
						elif [[ $G_WHIP_RETURNED_VALUE == 'Custom' ]]; then

							if G_WHIP_INPUTBOX 'Please input a location. Your user data will be stored inside this location.\n - eg: /mnt/MyDrive/MyData'; then

								move_data_target=$G_WHIP_RETURNED_VALUE

							fi

						fi

						# - Move data if the new entry has changed
						if [[ $user_data_location_current != $move_data_target ]]; then

							# - Ask before we begin
							if G_WHIP_YESNO "DietPi will now attempt to transfer your existing user data to the new location:
\n- From: $user_data_location_current\n- To: $move_data_target\n\nWould you like to begin?"; then

								# - Move data, setup symlinks
								if /DietPi/dietpi/func/dietpi-set_userdata "$user_data_location_current" "$move_data_target"; then

									G_WHIP_MSG "User data transfer: Completed\n\nYour user data has been successfully moved:\n\n- From: $user_data_location_current\n- To: $move_data_target"

								else

									G_WHIP_MSG "User data transfer: Failed\n\n$(</var/log/dietpi-move_userdata.log)\n\nNo changes have been applied."

								fi

							fi

						fi

					fi

				;;

				'Webserver Preference')

					G_WHIP_MENU_ARRAY=(

						'Apache2' ': Popular webserver.'
						'Nginx' ': Lightweight webserver.'
						'Lighttpd' ': Extremely lightweight webserver.'

					)

					G_WHIP_DEFAULT_ITEM=$index_webserver_text
					G_WHIP_BUTTON_CANCEL_TEXT='Back'
					if G_WHIP_MENU 'Please select a Webserver preference, more info https://dietpi.com/phpbb/viewtopic.php?f=8&t=5&p=1549#p1549:\n
- Apache2: Feature-rich and popular. Recommended for beginners and users who are looking to follow Apache2 based guides.\n
- Nginx: Lightweight alternative to Apache2. Nginx claims faster webserver performance compared to Apache2.\n
- Lighttpd: Extremely lightweight and is generally considered to offer the \"best\" webserver performance for SBCs. Recommended for users who expect low webserver traffic.'; then

						# Assign target index
						if [[ $G_WHIP_RETURNED_VALUE == 'Apache2' ]]; then

							INDEX_WEBSERVER_TARGET=0

						elif [[ $G_WHIP_RETURNED_VALUE == 'Nginx' ]]; then

							INDEX_WEBSERVER_TARGET=-1

						elif [[ $G_WHIP_RETURNED_VALUE == 'Lighttpd' ]]; then

							INDEX_WEBSERVER_TARGET=-2

						# Reset to current
						else

							INDEX_WEBSERVER_TARGET=$INDEX_WEBSERVER_CURRENT

						fi

						# Check for changes
						if (( $INDEX_WEBSERVER_TARGET != $INDEX_WEBSERVER_CURRENT )); then

							# - Check for existing and compatible installed stacks before allowing the change
							local incompatible_webserver_preference=0
							local info_currently_installed_webserver='None'

							if dpkg-query -s 'apache2' &> /dev/null; then

								INDEX_WEBSERVER_CURRENT=0
								info_currently_installed_webserver='Apache2'
								(( $INDEX_WEBSERVER_TARGET != 0 )) && incompatible_webserver_preference=1

							elif dpkg-query -s 'nginx' &> /dev/null; then

								INDEX_WEBSERVER_CURRENT=-1
								info_currently_installed_webserver='Nginx'
								(( $INDEX_WEBSERVER_TARGET != -1 )) && incompatible_webserver_preference=1

							elif dpkg-query -s 'lighttpd' &> /dev/null; then

								INDEX_WEBSERVER_CURRENT=-2
								info_currently_installed_webserver='Lighttpd'
								(( $INDEX_WEBSERVER_TARGET != -2 )) && incompatible_webserver_preference=1

							fi

							# - Reset preference selection
							if (( $incompatible_webserver_preference == 1 )); then

								INDEX_WEBSERVER_TARGET=$INDEX_WEBSERVER_CURRENT

								# - inform user
								G_WHIP_MSG "Error: Incompatible Webserver Preference:\n\nUnable to change your webserver preference to $G_WHIP_RETURNED_VALUE.\n
This is due to an existing and incompatible webserver installation on your system ($info_currently_installed_webserver). Please remove all webserver based software (using dietpi-software > uninstall), before trying again."

							# - Apply preference selection
							else

								# - Inform user
								G_WHIP_MSG "Webserver Preference Changed:\n\n$G_WHIP_RETURNED_VALUE has been selected as your webserver preference.\n
When you select any software for install that requires a webserver, DietPi will automatically install your prefered choice ($G_WHIP_RETURNED_VALUE)."
								# - NB: INDEX_WEBSERVER_CURRENT=$INDEX_WEBSERVER_TARGET | is applied during installation with func Apply_Webserver_Preference().

							fi

						fi

					fi

				;;

				'DietPi-Config')

					/DietPi/dietpi/dietpi-config

				;;

				'Help!')

					# Populate help to text file so we can read it back to whiptail, as a scrollbox.
					local string='───────────────────────────────────────────────────────────────
Welcome to DietPi:
───────────────────────────────────────────────────────────────
Use PageUp/Down or Arrow Up/Down to scroll this help screen.
Press ESC, or TAB then enter to exit this help screen.\n
Easy to follow, step by step guides for installing DietPi:
https://dietpi.com/phpbb/viewtopic.php?f=8&t=9\n
For a list of all installation options and their details:
https://dietpi.com/software\n
───────────────────────────────────────────────────────────────
List of installed software and their URL links for online docs:
───────────────────────────────────────────────────────────────\n'

					# - Installed software
					for i in ${!aSOFTWARE_INSTALL_STATE[@]}
					do

						if (( ${aSOFTWARE_INSTALL_STATE[i]} > 0 )) && [[ ${aSOFTWARE_ONLINEDOC_URL[$i]} ]]; then

							string+="\n${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}"
							string+="\n$FP_ONLINEDOC_URL${aSOFTWARE_ONLINEDOC_URL[$i]}\n"

						fi

					done

					G_WHIP_SIZE_X_MAX=70
					G_WHIP_SCROLLBOX "$string"
					unset string

				;;

				'Install')

					Menu_StartInstall

				;;

			esac

		# Exit/Abort Setup
		else

			Menu_Exit

		fi

	}

	Menu_Exit(){

		TARGETMENUID=0 # Return to Main Menu

		# 1st run install
		if (( $G_DIETPI_INSTALL_STAGE == 1 )); then

			G_WHIP_MSG 'DietPi has not fully been installed.\nThis must be completed prior to using DietPi by selecting:\n - Go Start Install.'

		# Standard exit
		elif (( $G_DIETPI_INSTALL_STAGE == 2 )); then

			if G_WHIP_YESNO 'Do you wish to exit DietPi-Software?\n\nAll changes to software selections will be cleared.'; then

				Banner_Aborted
				exit 0

			fi

		fi

	}

	Menu_ConfirmInstall(){

		# Obtain list of pending software installation:
		local string_output
		for i in ${!aSOFTWARE_INSTALL_STATE[@]}
		do

			if (( ${aSOFTWARE_INSTALL_STATE[$i]} == 1 )); then

				string_output+="\n - ${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}"

			fi

		done
		[[ $G_SERVICE_CONTROL == 0 ]] || string_output+='\nNB: Software services will be temporarily controlled (stopped) by DietPi during this process. Please inform connected users, before continuing. SSH is not affected.'

		# Confirm Software install
		if G_WHIP_YESNO "DietPi is now ready to install your software choices: $string_output\n
Software details, usernames, passwords etc:\n - https://dietpi.com/software\n\nWould you like to begin?"; then

			TARGETMENUID=-1 # Exit menu loop
			GOSTARTINSTALL=1 # Set install start flag

		fi

	}

	Menu_StartInstall(){

		# Check if user made/changed software selections
		if (( $INSTALL_SOFTWARE_CHOICESMADE ||
			$INSTALL_SSHSERVER_CHOICESMADE ||
			$INSTALL_FILESERVER_CHOICESMADE ||
			$INSTALL_LOGGING_CHOICESMADE )); then

			# List selections and ask for confirmation
			Menu_ConfirmInstall

		# Allow to finish first run setup without any selections
		elif (( $G_DIETPI_INSTALL_STAGE == 1 )); then

			if G_WHIP_YESNO 'DietPi was unable to detect any additional software selections for install.\n
NB: You can use dietpi-software at a later date, to install optimised software from our catalogue as required.\n
Do you wish to continue with DietPi as a pure minimal image?'; then

				TARGETMENUID=-1 # Exit menu loop
				DISABLE_REBOOT=1 # Skip reboot as no software will be installed
				GOSTARTINSTALL=1 # Set install start flag

			fi

		# After first run setup has finished, abort install without any selections
		elif (( $G_DIETPI_INSTALL_STAGE == 2 )); then

			G_WHIP_MSG 'No changes have been detected. Unable to start installation.'

		fi

	}

	Menu_Uninstall_Software(){

		# Array which will hold all software IDs to be removed.
		G_WHIP_CHECKLIST_ARRAY=()

		# Obtain list of installed software
		local software_available_for_uninstall=0
		local i
		for i in ${!aSOFTWARE_INSTALL_STATE[@]}
		do

			if (( ${aSOFTWARE_INSTALL_STATE[$i]} == 2 &&
				${aSOFTWARE_TYPE[$i]:=-2} > -2 )); then

				G_WHIP_CHECKLIST_ARRAY+=($i "${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}" 'off')
				software_available_for_uninstall=1

			fi

		done

		# No software installed
		if (( ! $software_available_for_uninstall )); then

			G_WHIP_MSG 'No software is currently installed, or, available for removal.'

		# Run menu
		else

			G_WHIP_BUTTON_CANCEL_TEXT='Back'
			if G_WHIP_CHECKLIST 'Use the spacebar to select the software you would like to remove:'; then

				# - Create list for user to review before removal
				local output_string='The following software will be REMOVED from your system:\n'
				for i in $G_WHIP_RETURNED_VALUE
				do

					output_string+=" - ${aSOFTWARE_NAME[$i]}: ${aSOFTWARE_DESC[$i]}\n"
					UNINSTALL_REQUIRED=1

				done
				[[ $G_SERVICE_CONTROL == 0 ]] || output_string+='\nNB: Software services will be temporarily controlled (stopped) by DietPi during this process. Please inform connected users, before continuing. SSH is not affected.'

				if (( $UNINSTALL_REQUIRED )); then

					if G_WHIP_YESNO "$output_string\n\nDo you wish to continue?"; then

						# - Stop services
						[[ $G_SERVICE_CONTROL == 0 ]] || /DietPi/dietpi/dietpi-services stop

						# - Mark for uninstall
						for i in $G_WHIP_RETURNED_VALUE
						do

							aSOFTWARE_INSTALL_STATE[$i]=-1

						done

						# - Run uninstall
						Uninstall_Software

						# - Save
						Write_InstallFileList

						# - Start services
						[[ $G_SERVICE_CONTROL == 0 ]] || /DietPi/dietpi/dietpi-services start

						G_WHIP_MSG 'Uninstall completed'

					else

						UNINSTALL_REQUIRED=0

					fi

				fi

			fi

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Banner Print
	#/////////////////////////////////////////////////////////////////////////////////////

	Banner_Installing(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "Installing ${aSOFTWARE_NAME[$software_id]}: ${aSOFTWARE_DESC[$software_id]}"

	}

	Banner_Configuration(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "Configuring ${aSOFTWARE_NAME[$software_id]}: ${aSOFTWARE_DESC[$software_id]}"

	}

	Banner_Uninstalling(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "Uninstalling ${aSOFTWARE_NAME[$software_id]}: ${aSOFTWARE_DESC[$software_id]}"

	}

	Banner_Apt_Update(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Update & upgrade APT'

	}

	Banner_Reboot(){

		local delay=3
		G_WHIP_MSG 'DietPi-Software installation is complete, however a reboot is required to finalise the installation.\n\nPlease select "Ok" to continue and reboot the system.'
		G_DIETPI-NOTIFY 0 "System rebooting in $delay seconds to finalise DietPi-Software installations. Please wait..."
		sleep $delay

	}

	Banner_Configs(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Optimise and configure software'
		G_DIETPI-NOTIFY 2 "Applying DietPi optimisations and configurations for $G_HW_MODEL_DESCRIPTION, please wait...\n"

	}

	Banner_Aborted(){

		# 1st run abort
		if (( $G_DIETPI_INSTALL_STAGE == 1 )); then

			/DietPi/dietpi/func/dietpi-banner 0
			G_DIETPI-NOTIFY 1 '\n Installation aborted by user.\n Installation must be completed prior to using DietPi.\n Please run dietpi-software to restart the installation.\n'

		# Standard abort
		else

			/DietPi/dietpi/func/dietpi-banner 1

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#--------------------------------------------------------------------------------------
	# Init software arrays
	Software_Arrays_Init
	#--------------------------------------------------------------------------------------
	# Load .installed file, update vars, if it exists
	Read_InstallFileList
	#--------------------------------------------------------------------------------------
	# Update GLOBAL_PW
	Update_Global_Pw
	#--------------------------------------------------------------------------------------
	# CLI input mode
	if [[ $1 ]]; then

		Input_Modes "$@"
		DISABLE_REBOOT=1 # Skip reboot on automated (re)installs

	#--------------------------------------------------------------------------------------
	# Standard launch
	else

		# 1st run dietpi-software
		if (( $G_DIETPI_INSTALL_STAGE == 1 )); then

			# Load all automation vars
			FirstRun_Automation_Init

			# Global PW
			# - Automation, apply as per dietpi.txt
			if (( $AUTOINSTALL_ENABLED )); then

				/DietPi/dietpi/func/dietpi-set_software passwords "$GLOBAL_PW"

			# - Prompt change global password and login passwords for root and dietpi users
			else

				/DietPi/dietpi/func/dietpi-set_software passwords
				Update_Global_Pw

			fi

			# Disable serial? Must stay enabled for the following:
			# - XU4: HC1/HC2 fail to boot into kernel without: https://github.com/MichaIng/DietPi/issues/2038#issuecomment-416089875
			# - RockPro64: Fails to boot into kernel without
			# - NanoPi Neo Air: Required for end users/debugging/setting up WiFi without automation
			keep_serial0=1
			if grep -q '^[[:blank:]]*CONFIG_SERIAL_CONSOLE_ENABLE=1' /DietPi/dietpi.txt &&
				(( $G_HW_MODEL != 11 && $G_HW_MODEL != 42 && $G_HW_MODEL != 64 )) &&
				G_WHIP_YESNO 'Serial console is currently enabled, would you like to disable it?\n - Disabling serial console will reduce memory consumption slightly\n - If you are unsure on what serial console is, it is safe to disable it'; then

				/DietPi/dietpi/func/dietpi-set_hardware serialconsole disable
				keep_serial0=0

			fi

			# RPi: Convert "serial0" to its actual symlink target
			if (( $G_HW_MODEL < 10 )); then

				if [[ $keep_serial0 == 1 && -L '/dev/serial0' ]]; then

					tty=$(readlink -f /dev/serial0); tty={tty#\/dev\/}
					if [[ $(</boot/cmdline.txt) =~ 'serial0' ]]; then

						[[ $(</boot/cmdline.txt) =~ $tty ]] && sed -i "s/[[:blank:]]*console=$tty[^\"[:blank:]]*//" /boot/cmdline.txt || sed -i "s/serial0/$tty" /boot/cmdline.txt

					fi
					if [[ -f '/etc/systemd/system/getty.target.wants/serial-getty@serial0.service' ]]; then

						systemctl disable serial-getty@serial0
						systemctl enable serial-getty@$tty

					fi

				else

					/DietPi/dietpi/func/dietpi-set_hardware serialconsole disable serial0

				fi

			fi
			unset keep_serial0 tty

		fi

		# Prevent continue if no network or time sync is not completed: https://github.com/MichaIng/DietPi/issues/786
		Check_Internet_and_NTPD

		# Apply 1st run automation
		(( $G_DIETPI_INSTALL_STAGE == 1 )) && FirstRun_Automation_Set

		# Start DietPi Menu
		while (( $TARGETMENUID > -1 )); do

			printf '\ec' # clear current terminal screen
			Menu_Main

		done

	fi

	#--------------------------------------------------------------------------------------
	# Start DietPi-Software installs
	if (( $GOSTARTINSTALL )); then

		# Check for sufficient free space, 500 MiB should be enough for most software selections
		if ! G_CHECK_FREESPACE / 500; then

			G_DIETPI-NOTIFY 1 'Install aborted due to insufficient free space'
			exit 1

		fi

		# Userdata location verify
		G_CHECK_USERDATA

		# Start installations for software
		Run_Installations

		# Unmask systemd-logind if set in dietpi.txt / libpam-systemd was installed / Kodi
		if [[ $(readlink /etc/systemd/system/systemd-logind.service) == '/dev/null' ]] &&
			{ grep -q '^[[:blank:]]*AUTO_UNMASK_LOGIND=1' /DietPi/dietpi.txt ||
			dpkg-query -s 'libpam-systemd' &> /dev/null ||
			(( ${aSOFTWARE_INSTALL_STATE[31]} > 0 )); }; then

			G_RUN_CMD systemctl unmask systemd-logind
			# systemd-logind is currently a static unit, but to be failsafe:
			systemctl enable --now systemd-logind &> /dev/null

		fi

		# Upload DietPi-Survey Data, if opted in, prompt user choice, if no settings file exists
		# - Skip, if G_SERVICE_CONTROL == 0, which is exported by patch_file (DietPi-Update) which sends survey already
		[[ $G_SERVICE_CONTROL == 0 ]] || /DietPi/dietpi/dietpi-survey 1

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Installation completed'

		if (( $DISABLE_REBOOT )); then

			# - Start services (restart to reload configs of possible running services)
			[[ $G_SERVICE_CONTROL == 0 ]] || /DietPi/dietpi/dietpi-services restart

		else

			# - Reboot
			sync
			Banner_Reboot
			reboot

		fi

	fi

}
