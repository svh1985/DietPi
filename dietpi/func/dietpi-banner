#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Banner Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - filename /DietPi/dietpi/func/dietpi-banner
	# - Checks /DietPi/dietpi/.update_available
	#
	# Usage:
	# - dietpi-banner 0 = top section + LAN IP
	# - dietpi-banner 1 = top section + chosen entries + credits + clear
	# - dietpi-banner 2 = banner customisation menu
	#////////////////////////////////////

	[[ $1 == [12] ]] && INPUT=$1 || INPUT=0

	#/////////////////////////////////////////////////////////////////////////////////////
	# Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	FP_SAVEFILE='/DietPi/dietpi/.dietpi-banner'
	FP_CUSTOM='/DietPi/dietpi/.dietpi-banner_custom'

	aDESCRIPTION=(

		'Device model'
		'Uptime'
		'CPU temp'
		'FQDN/hostname'
		'NIS domainname'
		'LAN IP'
		'WAN IP'
		'Freespace (RootFS)'
		'Freespace (userdata)'
		'Weather (wttr.in)'
		'Custom banner entry'
		'Display DietPi useful commands?'
		'MOTD'
		'NordVPN status'

	)
	# Set defaults
	aENABLED=(1 0 1 0 0 1 0 0 0 0 0 1 1 0)

	COLOUR_RESET='\e[0m'
	aCOLOUR=(

		'\e[38;5;154m'	# DietPi green	| Lines, bullets and seperators
		'\e[1m'		# Bold white	| Main descriptions
		'\e[90m'	# Grey		| Credits
		'\e[91m'	# Red		| Update notifications

	)

	# Load settings here, to have chosen ${aCOLOUR[0]} applied to below strings
	[[ -f $FP_SAVEFILE ]] && . $FP_SAVEFILE

	GREEN_LINE=" ${aCOLOUR[0]}─────────────────────────────────────────────────────$COLOUR_RESET"
	GREEN_BULLET=" ${aCOLOUR[0]}-$COLOUR_RESET"
	GREEN_SEPARATOR="${aCOLOUR[0]}:$COLOUR_RESET"

	. /DietPi/dietpi/.version
	DIETPI_VERSION="$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC"
	[[ $G_GITBRANCH != 'master' ]] && DIETPI_VERSION+=" ($G_GITBRANCH)"

	# Update available?
	UPDATE_AVAILABLE=0
	UPDATE_AVAILABLE_VERSION='' # -1 = image required, other value = latest version
	Obtain_Update_Available(){

		if [[ -f '/DietPi/dietpi/.update_available' ]]; then

			UPDATE_AVAILABLE=1
			UPDATE_AVAILABLE_VERSION=$(</DietPi/dietpi/.update_available)

		fi

	}

	Save(){

		# Custom entry description
		echo "aDESCRIPTION[10]='${aDESCRIPTION[10]}'" > $FP_SAVEFILE

		for i in ${!aDESCRIPTION[@]}
		do

			echo "aENABLED[$i]=${aENABLED[$i]}" >> $FP_SAVEFILE

		done

		for i in ${!aCOLOUR[@]}
		do

			echo "aCOLOUR[$i]='${aCOLOUR[$i]}'" >> $FP_SAVEFILE

		done

	}

	Print_Header(){

		# Update Available?
		Obtain_Update_Available
		local text_update_available_date
		if (( $UPDATE_AVAILABLE )); then

			if [[ $UPDATE_AVAILABLE_VERSION == '-1' ]]; then

				text_update_available_date="${aCOLOUR[3]}Image available"

			else

				text_update_available_date="${aCOLOUR[3]}Update available"

			fi

		else

			local locale_current=$(sed -n '/^[[:blank:]]*AUTO_SETUP_LOCALE=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
			text_update_available_date=$(LC_ALL=${locale_current:-en_GB.UTF-8} date +"%R - %a %x")

		fi

		echo -e "$GREEN_LINE
 ${aCOLOUR[1]}DietPi v$DIETPI_VERSION$COLOUR_RESET $GREEN_SEPARATOR $text_update_available_date$COLOUR_RESET
$GREEN_LINE"

	}

	Print_Local_Ip(){

		[[ ${aENABLED[5]} == 1 ]] || return
		[[ -f '/DietPi/dietpi/.network' ]] && /DietPi/dietpi/func/obtain_network_details
		echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[5]} $GREEN_SEPARATOR $(mawk 'NR==3 {dev=$0} NR==4 {print $0" ("dev")"}' /DietPi/dietpi/.network 2>&1)"	# 5: LAN IP (adapter)

	}

	Print_Credits(){

		echo -e " ${aCOLOUR[2]}DietPi Team     : MichaIng (lead), Daniel Knight (founder)"

		[[ -f '/DietPi/dietpi/.prep_info' ]] && mawk 'NR==1 {sub(/^0$/,"DietPi Core Team");a=$0} NR==2 {print " Image           : "a" (pre-image: "$0")"}' /DietPi/dietpi/.prep_info

		echo ' Web             : https://DietPi.com | https://twitter.com/dietpi_
 Patreon Legends : PINE64 community | oct8l
 Donate          : https://DietPi.com/#donate'

		local image_additional_credits=$(mawk 'NR==8 {print}' /DietPi/dietpi/.hw_model 2>&1)
		[[ $image_additional_credits ]] && echo " Device image possible thanks to: $image_additional_credits"

		echo -e " DietPi Hosting  : Powered by https://MyVirtualServer.com$COLOUR_RESET\n"

		# Update available?
		if (( $UPDATE_AVAILABLE )); then

			if [[ $UPDATE_AVAILABLE_VERSION == '-1' ]]; then

				echo -e " ${aCOLOUR[3]}Updated DietPi image is available, please download it:$COLOUR_RESET\n https://dietpi.com/#download\n"

			else

				echo -e " ${aCOLOUR[1]}dietpi-update$COLOUR_RESET   $GREEN_SEPARATOR ${aCOLOUR[3]}Run now to update DietPi from v$DIETPI_VERSION to v$UPDATE_AVAILABLE_VERSION.$COLOUR_RESET\n"

			fi

		fi

	}

	Print_Useful_Commands(){

		echo -e "${aCOLOUR[1]} dietpi-launcher$COLOUR_RESET $GREEN_SEPARATOR All the DietPi programs in one place.
 ${aCOLOUR[1]}dietpi-config$COLOUR_RESET   $GREEN_SEPARATOR Feature rich configuration tool for your device.
 ${aCOLOUR[1]}dietpi-software$COLOUR_RESET $GREEN_SEPARATOR Select optimized software for installation.
 ${aCOLOUR[1]}htop$COLOUR_RESET            $GREEN_SEPARATOR Resource monitor.
 ${aCOLOUR[1]}cpu$COLOUR_RESET             $GREEN_SEPARATOR Shows CPU information and stats.\n"

	}

	Print_Banner(){

		# Source DietPi-Globals if not yet sourced from main menu and CPU temp chosen
		[[ ${aENABLED[2]} != 1 && ${aENABLED[12]} != 1 || $G_PROGRAM_NAME ]] || . /DietPi/dietpi/func/dietpi-globals

		printf '\ec' # clear current terminal screen
		Print_Header

		(( ${aENABLED[0]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[0]} $GREEN_SEPARATOR $(mawk 'NR==2 {print}' /DietPi/dietpi/.hw_model 2>&1)"				# 0: Device model
		(( ${aENABLED[1]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[1]} $GREEN_SEPARATOR $(uptime -p 2>&1)"									# 1: Uptime
		(( ${aENABLED[2]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[2]} $GREEN_SEPARATOR $(print_full_info=1 G_OBTAIN_CPU_TEMP 2>&1)"					# 2: CPU temp
		(( ${aENABLED[3]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[3]} $GREEN_SEPARATOR $(hostname -f 2>&1)"								# 3: Hostname
		(( ${aENABLED[4]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[4]} $GREEN_SEPARATOR $(hostname -y 2>&1)"								# 4: Domain name
		Print_Local_Ip																						# 5: LAN IP
		(( ${aENABLED[6]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[6]} $GREEN_SEPARATOR $(curl -sSfLm 2 https://dietpi.com/myip.php 2>&1)"					# 6: WAN IP # Move this to /DietPi/dietpi/.network?
		(( ${aENABLED[13]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[13]} $GREEN_SEPARATOR $(/DietPi/dietpi/misc/dietpi-nordvpn status 2>&1)"				# 13: DietPi-NordVPN connection status
		(( ${aENABLED[7]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[7]} $GREEN_SEPARATOR $(df -h --output=avail / | mawk 'NR==2 {print $1}' 2>&1)"				# 7: Freespace (RootFS)
		(( ${aENABLED[8]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[8]} $GREEN_SEPARATOR $(df -h --output=avail /mnt/dietpi_userdata | mawk 'NR==2 {print $1}' 2>&1)"	# 8: Freespace (DietPi userdata)
		(( ${aENABLED[9]} == 1 )) && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[9]} $GREEN_SEPARATOR $(curl -sSfLm 2 https://wttr.in/?format=4 2>&1)"					# 9: Weather
		(( ${aENABLED[10]} == 1 )) && [[ -x $FP_CUSTOM ]] && echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[10]} $GREEN_SEPARATOR $(bash $FP_CUSTOM 2>&1)"					# 10: Custom
		if (( ${aENABLED[12]} == 1 )); then

			local fp_motd='/tmp/.dietpi_motd'
			[[ -f $fp_motd ]] || curl -sSfLm 2 https://dietpi.com/motd > $fp_motd
			if [[ -f $fp_motd ]]; then

				if . $fp_motd &> /dev/null && [[ $motd ]]; then

					echo -e "$GREEN_BULLET ${aCOLOUR[1]}${aDESCRIPTION[12]} $GREEN_SEPARATOR $motd"											# 12: MOTD

				else

					rm $fp_motd

				fi

			fi

		fi
		echo -e "$GREEN_LINE\n"

		Print_Credits
		(( ${aENABLED[11]} == 1 )) && Print_Useful_Commands																	# 11: Useful commands

	}

	Menu_Main(){

		. /DietPi/dietpi/func/dietpi-globals
		G_PROGRAM_NAME='DietPi-Banner'
		G_INIT

		G_WHIP_CHECKLIST_ARRAY=()

		for i in ${!aDESCRIPTION[@]}
		do

			local state='off'
			(( ${aENABLED[$i]:=0} == 1 )) && state='on'
			G_WHIP_CHECKLIST_ARRAY+=($i "${aDESCRIPTION[$i]}" $state)

		done

		if G_WHIP_CHECKLIST "Please (de)select options via spacebar to be shown in the $G_PROGRAM_NAME:"; then

			for i in ${!aDESCRIPTION[@]}
			do

				aENABLED[$i]=0

			done

			for i in ${G_WHIP_RETURNED_VALUE[@]}
			do

				aENABLED[$i]=1
				# Custom entry
				if (( $i == 10 )); then

					[[ -f $FP_CUSTOM ]] && G_WHIP_DEFAULT_ITEM=$(<$FP_CUSTOM) || G_WHIP_DEFAULT_ITEM="echo 'Hello World!'"
					if G_WHIP_INPUTBOX 'You have chosen to show a custom entry in the banner.
Please enter/verify the desired command here.\n
NB: It is executed as bash script, so it needs to be in bash compatible syntax.
    For complex or non-bash scripts keep it separate and add its execution command here.'; then

						echo "$G_WHIP_RETURNED_VALUE" > $FP_CUSTOM
						chmod +x $FP_CUSTOM

						G_WHIP_DEFAULT_ITEM=${aDESCRIPTION[10]}
						G_WHIP_INPUTBOX 'Please enter a meaningful name/description to be shown in front of your custom command output:' && aDESCRIPTION[10]=$G_WHIP_RETURNED_VALUE

					fi

					# Disable custom entry if file was not created, e.g. cancelled by user
					[[ -f $FP_CUSTOM ]] || aENABLED[10]=0

				fi

			done

			Save

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	if (( $INPUT == 0 )); then

		Print_Header
		Print_Local_Ip

	elif (( $INPUT == 1 )); then

		Print_Banner

	elif (( $INPUT == 2 )); then

		Menu_Main
		Print_Banner

	fi

	#-----------------------------------------------------------------------------------
	exit 0
	#-----------------------------------------------------------------------------------
}
