#!/bin/bash
# Load the whole script into memory.
{
	#////////////////////////////////////
	# DietPi Update
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location: /{DietPi,boot}/dietpi/dietpi-update
	# - Updates DietPi from Git or dietpi.com repo
	# - Uses pre-patch_file for patches that need to be done prior to APT calls and DietPi code update
	# - Uses patch_file for incremental patching after APT calls and DietPi code update
	#
	# Usage:
	# - dietpi-update	= Check for updates and in case open interactive menu
	# - dietpi-update 1	= Check for updates and in case apply noninteractively
	# - dietpi-update 2	= Check for updates only and in case store result to /DietPi/dietpi/.update_available to be used by DietPi-Banner
	# - dietpi-update -1	= Like "1" but internally reduce subversion by 1 to reapply the last update, e.g. to apply latest dev branch changes
	#////////////////////////////////////

	# Import DietPi-Globals --------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Update'
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	G_INIT
	# Import DietPi-Globals --------------------------------------------------------------

	# Move tmp log to persistent location on exit
	G_EXIT_CUSTOM(){ [[ -f $FP_LOG_TMP ]] && mv $FP_LOG_TMP $FP_LOG; }

	# Grab input
	disable_error=1 G_CHECK_VALIDINT "$1" && INPUT=$1 || INPUT=0

	#/////////////////////////////////////////////////////////////////////////////////////
	# UPDATE Vars
	#/////////////////////////////////////////////////////////////////////////////////////
	FP_LOG='/var/tmp/dietpi/logs/dietpi-update.log'
	FP_LOG_TMP='dietpi-update.log'
	DIETPIUPDATE_VERSION_CORE=6 # Version of dietpi-update / set server_version-6 line one to value++ and obsolete previous dietpi-update scripts

	CHANGELOG_DOWNLOADED=0 # Prevent redownload of changelog if already done in this session

	SERVER_ONLINE=0
	UPDATE_AVAILABLE=0
	RUN_UPDATE=0

	GITOWNER_TARGET=$(sed -n '/^[[:blank:]]*DEV_GITOWNER=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
	GITOWNER_TARGET=${GITOWNER_TARGET:-MichaIng}
	GITBRANCH_TARGET=$(sed -n '/^[[:blank:]]*DEV_GITBRANCH=/{s/^[^=]*=//p;q}' /DietPi/dietpi.txt)
	GITBRANCH_TARGET=${GITBRANCH_TARGET:-master}

	COREVERSION_SERVER=0
	SUBVERSION_SERVER=0
	RCVERSION_SERVER=0

	INFO_CURRENT_VERSION=''
	INFO_SERVER_VERSION=''
	INFO_VERSIONS_UPDATE(){

		INFO_CURRENT_VERSION="Current version : v$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC"
		INFO_SERVER_VERSION="Latest version  : v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER"

		if [[ $G_GITBRANCH != $GITBRANCH_TARGET || $G_GITOWNER != $GITOWNER_TARGET ]]; then

			INFO_CURRENT_VERSION+=" (branch: $G_GITOWNER/$G_GITBRANCH)"
			INFO_SERVER_VERSION+=" (branch: $GITOWNER_TARGET/$GITBRANCH_TARGET)"

		fi

	}

	URL_MIRROR_INDEX=0
	aURL_MIRROR_SERVERVERSION=(

		"https://raw.githubusercontent.com/$GITOWNER_TARGET/DietPi/$GITBRANCH_TARGET/dietpi/server_version-6"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/server_version-6"

	)

	aURL_MIRROR_PREPATCH=(

		"https://raw.githubusercontent.com/$GITOWNER_TARGET/DietPi/$GITBRANCH_TARGET/dietpi/pre-patch_file"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/pre-patch_file"

	)

	aURL_MIRROR_ZIP=(

		"https://github.com/$GITOWNER_TARGET/DietPi/archive/$GITBRANCH_TARGET.zip"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/DietPi-$GITBRANCH_TARGET.zip"

	)

	aURL_MIRROR_CHANGELOG=(

		"https://raw.githubusercontent.com/$GITOWNER_TARGET/DietPi/$GITBRANCH_TARGET/CHANGELOG.txt"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/CHANGELOG.txt"

	)

	Get_Server_Version(){

		for i in ${!aURL_MIRROR_SERVERVERSION[@]}
		do

			G_DIETPI-NOTIFY 2 "Checking mirror: ${aURL_MIRROR_SERVERVERSION[$i]}"
			if curl -sSL "${aURL_MIRROR_SERVERVERSION[$i]}" > server_version; then

				# Get server version
				COREVERSION_SERVER=$(mawk 'NR==1' server_version)
				SUBVERSION_SERVER=$(mawk 'NR==2' server_version)
				RCVERSION_SERVER=$(mawk 'NR==3' server_version)

				# Check if server version contains valid intergers
				if disable_error=1 G_CHECK_VALIDINT "$COREVERSION_SERVER" &&
					disable_error=1 G_CHECK_VALIDINT "$SUBVERSION_SERVER" &&
					disable_error=1 G_CHECK_VALIDINT "$RCVERSION_SERVER"; then

					SERVER_ONLINE=1
					G_DIETPI-NOTIFY 0 "Using update server: ${aURL_MIRROR_SERVERVERSION[$i]}"
					URL_MIRROR_INDEX=$i
					INFO_VERSIONS_UPDATE
					break

				else

					G_DIETPI-NOTIFY 2 "Invalid server version string: ${COREVERSION_SERVER:-NULL}.${SUBVERSION_SERVER:-NULL}.${RCVERSION_SERVER:-NULL}"

				fi

			else

				G_DIETPI-NOTIFY 2 "No response from: ${aURL_MIRROR_SERVERVERSION[$i]} ($(<server_version))"

			fi

		done

		# No valid update server response
		if (( ! $SERVER_ONLINE )); then

			G_DIETPI-NOTIFY 1 'Unable to access any update server. Please check your network connection, then rerun dietpi-update.
If this error persists, please report at: https://github.com/MichaIng/DietPi/issues'
			exit 1

		fi

	}

	Apply_1st_Run_Update_Success(){ (( $G_DIETPI_INSTALL_STAGE < 2 )) && echo 1 > /DietPi/dietpi/.install_stage; }

	Check_Update_Available(){

		# Update requires new image
		if (( $DIETPIUPDATE_VERSION_CORE < $COREVERSION_SERVER )); then

			# Write "-1" to flag file for DietPi-Banner to show info about required new image
			echo '-1' > /DietPi/dietpi/.update_available

			G_DIETPI-NOTIFY 1 'The installed version of DietPi is now obsolete and cannot be updated.
Please download the latest DietPi image from: https://dietpi.com/#download'

		# Update available
		elif (( $G_DIETPI_VERSION_SUB < $SUBVERSION_SERVER ||
			( $G_DIETPI_VERSION_SUB == $SUBVERSION_SERVER && $G_DIETPI_VERSION_RC < $RCVERSION_SERVER ) )); then

			UPDATE_AVAILABLE=1

			# Write available update version to flag file
			echo "$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER" > /DietPi/dietpi/.update_available

			G_DIETPI-NOTIFY 0 'Update available:'

		# No update required
		else

			# Mark 1st run update as completed
			Apply_1st_Run_Update_Success

			# Remove .update_available flag file (from disk as well, to prevent update notification after reboot)
			rm -f /{DietPi,boot}/dietpi/.update_available

			G_DIETPI-NOTIFY 0 'No update required, your DietPi installation is already up to date:'

		fi

		G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
		G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Update DietPi
	#/////////////////////////////////////////////////////////////////////////////////////
	Run_Update(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying pre-patches'
		G_RUN_CMD wget "${aURL_MIRROR_PREPATCH[$URL_MIRROR_INDEX]}" -O pre-patch_file
		chmod +x pre-patch_file
		# Rerun last subversion pre-patch for RC-only updates
		local subversion=$G_DIETPI_VERSION_SUB
		(( $G_DIETPI_VERSION_SUB == $SUBVERSION_SERVER )) && subversion=$(( $G_DIETPI_VERSION_SUB - 1 ))
		if ! ./pre-patch_file $subversion; then

			G_DIETPI-NOTIFY 1 "An error occured during pre-patch $?. Please check the above log or $FP_LOG for errors, and rerun \"dietpi-update\" after the cause has been solved."
			exit 1

		fi
		G_DIETPI-NOTIFY 0 'Successfully applied pre-patches'

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Upgrading APT packages'
		G_AGUP
		G_AGUG

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Installing new DietPi code'
		if curl -L# "${aURL_MIRROR_ZIP[$URL_MIRROR_INDEX]}" > update.zip; then

			l_message='Unpacking update archive' G_RUN_CMD unzip update.zip
			rm update.zip

			# Remove files from Git archive that are not to be installed on client
			rm DietPi-"$GITBRANCH_TARGET"/dietpi/{pre-patch_file,server_version*}

			# Remove old code before updating, so we dont need to patch for removals
			# - https://github.com/MichaIng/DietPi/issues/905#issuecomment-298241622
			#rm -R /DietPi/dietpi/{func,misc,dietpi-*}

			l_message='Installing new DietPi scripts to RAMdisk' G_RUN_CMD cp -Rf DietPi-"$GITBRANCH_TARGET"/dietpi /DietPi/
			l_message='Installing new DietPi system files to disk' G_RUN_CMD cp -Rf DietPi-"$GITBRANCH_TARGET"/rootfs/. /
			l_message='Setting execute permissions for DietPi scripts' G_RUN_CMD chmod -R +x /DietPi/dietpi /var/lib/dietpi/services /etc/cron.*/dietpi

			# Update Git owner/branch now, to download from matching branch during dietpi.txt verification and incremental patches, e.g. on reinstalls
			G_GITOWNER=$GITOWNER_TARGET
			G_GITBRANCH=$GITBRANCH_TARGET
			G_VERSIONDB_SAVE

			# Verify/update dietpi.txt entries
			/DietPi/dietpi/func/dietpi-set_software verify_dietpi.txt || exit 1

			# Failsafe: Sync changes to disk
			sync
			systemctl daemon-reload

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying incremental patches'
			G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
			G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

			# Apply subversion patches incrementally
			while (( $G_DIETPI_VERSION_SUB < $SUBVERSION_SERVER )); do

				G_DIETPI-NOTIFY 2 "Patching $G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB to $COREVERSION_SERVER.$(( $G_DIETPI_VERSION_SUB + 1 ))"
				/DietPi/dietpi/patch_file $G_DIETPI_VERSION_SUB || exit 1
				G_DIETPI_VERSION_SUB=$(( $G_DIETPI_VERSION_SUB + 1 ))
				G_DIETPI_VERSION_RC=$RCVERSION_SERVER # Subversion patches include latest RC update

			done

			# RC-only update, rerun last subversion patch
			if (( $G_DIETPI_VERSION_RC < $RCVERSION_SERVER )); then

				G_DIETPI-NOTIFY 2 "Patching $G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC to $COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER"
				/DietPi/dietpi/patch_file $(( $G_DIETPI_VERSION_SUB - 1 )) || exit 1
				G_DIETPI_VERSION_RC=$RCVERSION_SERVER

			fi

			G_DIETPI-NOTIFY 0 "Incremental patching to v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER completed"

			# Remove patch_file
			rm /DietPi/dietpi/patch_file

			# Save current version and Git owner/branch
			G_VERSIONDB_SAVE

			# Update info strings
			INFO_VERSIONS_UPDATE

		# Unable to download file.
		else

			G_DIETPI-NOTIFY 1 'Download failed, unable to run update. Please try to rerun "dietpi-update".'
			exit 1

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	Get_View_Changelog(){

		local fp_changelog='CHANGELOG.txt'

		if (( ! $CHANGELOG_DOWNLOADED )); then

			for i in ${!aURL_MIRROR_CHANGELOG[@]}
			do

				G_DIETPI-NOTIFY 2 "Checking mirror: ${aURL_MIRROR_CHANGELOG[$i]}"
				if curl -sSL "${aURL_MIRROR_CHANGELOG[$i]}" > $fp_changelog; then

					CHANGELOG_DOWNLOADED=1
					break

				else

					G_DIETPI-NOTIFY 2 "No response from: ${aURL_MIRROR_CHANGELOG[$i]}"

				fi

			done

		fi

		if (( $CHANGELOG_DOWNLOADED )); then

			G_WHIP_VIEWFILE	$fp_changelog

		else

			G_WHIP_MSG 'Failed to download the changelog, please try again.'

		fi

	}

	Menu_Update(){

		while :
		do

			local auto_updates_enabled=0
			local auto_updates_text='Off'
			if grep -qi '^[[:blank:]]*CONFIG_AUTO_DIETPI_UPDATES=1' /DietPi/dietpi.txt; then

				auto_updates_enabled=1
				auto_updates_text='On'

			fi

			G_WHIP_BUTTON_CANCEL_TEXT='Exit'
			G_WHIP_MENU_ARRAY=(

				'' '●─ Update DietPi '
				'Update' ": Apply $COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER update."
				'' '●─ Additional Options '
				'Automatic Updates' ": [$auto_updates_text]"
				'Changelog' ': View the changelog and patch notes.'
				'Backup' ': Create a system backup, before updating.'

			)

			G_WHIP_DEFAULT_ITEM='Update'
			if G_WHIP_MENU "Update available:\n - $INFO_CURRENT_VERSION\n - $INFO_SERVER_VERSION\n
Please select 'Update' option to apply the update."; then

				if [[ $G_WHIP_RETURNED_VALUE == 'Update' ]]; then

					G_WHIP_SIZE_X_MAX=80
					if G_WHIP_YESNO ">----------------------------------Notice----------------------------------<
- A benefit of DietPi is: We use standard Linux (Debian) configurations and commands.
- A potential downside is: We can't possibly accommodate or predict all modification to Linux configurations files by the end user, outside of DietPi programs, during updates.\n
Although we test the updates thoroughly, if you have made any custom changes to Linux configuration files outside of the DietPi programs, an update may trigger a potential issue.
>--------------------------------------------------------------------------<\n
Do you wish to continue and update DietPi to v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER?"; then

						RUN_UPDATE=1
						return

					fi

				elif [[ $G_WHIP_RETURNED_VALUE == 'Automatic Updates' ]]; then

					(( $auto_updates_enabled == 0 )) && auto_updates_enabled=1 || auto_updates_enabled=0
					(( $auto_updates_enabled )) && G_WHIP_MSG '[ INFO ] Automatic DietPi updates have been enabled.\n
Updates will be checked and applied (if update is available) daily via cron job.\n
We highly recommend you create a system backup with "DietPi-Backup" if using this feature, as automated updates will not prompt user if a failure occurs.\n
When DietPi applies updates, all system services will be temporarily stopped. Do NOT power off the unit during updates as this could render the system in a unrecoverable state.'

					G_CONFIG_INJECT 'CONFIG_AUTO_DIETPI_UPDATES=' "CONFIG_AUTO_DIETPI_UPDATES=$auto_updates_enabled" /DietPi/dietpi.txt

				elif [[ $G_WHIP_RETURNED_VALUE == 'Changelog' ]]; then

					Get_View_Changelog

				elif [[ $G_WHIP_RETURNED_VALUE == 'Backup' ]]; then

					G_PROMPT_BACKUP

				fi

			else

				return # Exit

			fi

		done

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#----------------------------------------------------------------
	G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Checking for DietPi updates'
	#----------------------------------------------------------------
	# Select mirror and download server version info
	Get_Server_Version
	#----------------------------------------------------------------
	# If requested, reduce current subversion by 1 to reapply last update
	if (( $INPUT == -1 )); then

		G_DIETPI_VERSION_SUB=$(( $G_DIETPI_VERSION_SUB - 1 ))
		G_DIETPI-NOTIFY 0 "Repatch was requested: Subversion internally reduced to \"$G_DIETPI_VERSION_SUB\" to reapply the last update"
		INPUT=1

	fi
	#----------------------------------------------------------------
	# Check for update and in case store result to /DietPi/dietpi/.update_available for use by DietPi-Banner
	Check_Update_Available
	#----------------------------------------------------------------
	# Update available and no check-only chosen
	if (( $UPDATE_AVAILABLE && $INPUT != 2 )); then

		# Verify userdata location
		G_CHECK_USERDATA

		# Check for sufficient free space
		G_CHECK_FREESPACE / 100 || exit 1

		# Noninteractive update or ask user
		(( $INPUT == 1 )) && RUN_UPDATE=1 || Menu_Update

		#----------------------------------------------------------------
		# Run Update
		if (( $RUN_UPDATE )); then

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying DietPi update'

			# Disable powersaving on main screen
			setterm -blank 0 -powersave off 2> /dev/null

			# Stop Services
			/DietPi/dietpi/dietpi-services stop

			# Run_Update: https://github.com/MichaIng/DietPi/issues/1877#issuecomment-403866204
			# - Pre-estimate and override terminal size variables, since they cannot be estimated, if STOUT and STERR are redirected: https://github.com/MichaIng/DietPi/issues/2105
			export G_WHIP_SIZE_X_OVERRIDE=$(tput cols)
			export G_WHIP_SIZE_Y_OVERRIDE=$(tput lines)
			# - Log to file by redirecting to subshell instead of piping, else G_ERROR_HANDLER cannot exit the script via "kill -INT $$": https://github.com/MichaIng/DietPi/issues/3127
			Run_Update &> >(tee $FP_LOG_TMP); wait $!
			unset G_WHIP_SIZE_X_OVERRIDE G_WHIP_SIZE_Y_OVERRIDE

			# Mark 1st run update as completed
			Apply_1st_Run_Update_Success

			# Remove .update_available flag file (from disk as well, to prevent update notification after reboot)
			rm -f /{DietPi,boot}/dietpi/.update_available

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Completed'
			G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
			G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

			# Update DietPi-Survey
			/DietPi/dietpi/dietpi-survey 1

			# Failsafe: Store RAMdisk to disk which includes "sync"
			# - https://github.com/MichaIng/DietPi/issues/2473#issuecomment-458874222
			# - https://dietpi.com/phpbb/viewtopic.php?f=9&t=2591
			l_message='Syncing new DietPi scripts to disk' G_RUN_CMD /DietPi/dietpi/func/dietpi-ramdisk 1
			> /DietPi/.ramdisk

			# Start services only on finished install state, else dietpi-software will follow immediately
			(( $G_DIETPI_INSTALL_STAGE == 2 )) && /DietPi/dietpi/dietpi-services restart

		fi

		#----------------------------------------------------------------
		# Desktop run, exit key prompt
		pgrep 'lxsession' &> /dev/null && read -p 'Press any key to exit DietPi-Update...'

	fi
	#----------------------------------------------------------------
	exit 0
	#----------------------------------------------------------------
}
