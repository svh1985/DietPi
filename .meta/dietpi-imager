#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Image creation/finalise Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	# Updated by MichaIng / micha@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	# - Create new .img file from drive | or use existing .img file
	# - Minimises root partition and file system
	# - Hashes and 7z's the final image ready for release
	#////////////////////////////////////

	# Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Imager'
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	G_INIT
	# Import DietPi-Globals ---------------------------------------------------------------

	FP_SOURCE_IMG=''
	FP_SOURCE=''
	FP_ROOT_DEV=''
	ROOT_PARTITION_INDEX=0
	OUTPUT_IMG_NAME=''
	OUTPUT_7Z_NAME=''
	GPT=0

	Delete_Loopback(){ [[ -b $FP_SOURCE ]] && G_RUN_CMD losetup -d $FP_SOURCE; }

	Exit_On_Fail(){

		[[ $FP_SOURCE_IMG ]] && Delete_Loopback
		exit 1

	}

	Menu_Main(){

		G_WHIP_MENU_ARRAY=(

			'Drive' ': The OS is stored on an attached drive.'
			'Image' ': The OS is stored as an image (.img) file.'

		)

		G_WHIP_MENU 'Please select how the input OS is stored:
\nNB: If you want to create a Clonezilla-based installer image, the input OS needs to be attached as physical drive, since Clonezilla currently does neither support .img files nor loop devices.' || Exit_On_Fail
		if [[ $G_WHIP_RETURNED_VALUE == 'Drive' ]]; then

			# Detect drives and list for selection
			G_WHIP_MENU_ARRAY=($(lsblk -dnpo NAME,SIZE))
			# - Visually separate dev name and space
			for ((i=1;i<${#G_WHIP_MENU_ARRAY[@]};i+=2)); do G_WHIP_MENU_ARRAY[$i]=": ${G_WHIP_MENU_ARRAY[$i]}"; done
			if [[ $G_WHIP_MENU_ARRAY ]]; then

				G_WHIP_MENU 'Please select the drive you wish to create the image from:' || Exit_On_Fail

			else

				G_DIETPI-NOTIFY 1 'No drives found, aborting...'
				Exit_On_Fail

			fi
			FP_SOURCE=$G_WHIP_RETURNED_VALUE

			G_DIETPI-NOTIFY 2 'Unmounting all mounted file systems of the selected source drive...'
			for i in $FP_SOURCE*
			do

				findmnt $i &> /dev/null && { umount $i || Exit_On_Fail; }

			done			

		elif [[ $G_WHIP_RETURNED_VALUE == 'Image' ]]; then

			# Open DietPi-Explorer for image file selection
			local fp_selected='/tmp/.dietpi-explorer_selected_location'
			[[ -f $fp_selected ]] && rm $fp_selected # Failsafe
			/DietPi/dietpi/dietpi-explorer 1 /root
			[[ -f $fp_selected && $(<$fp_selected) ]] || Exit_On_Fail
			FP_SOURCE_IMG=$(<$fp_selected)
			rm $fp_selected
			if [[ ! -f $FP_SOURCE_IMG ]]; then

				G_DIETPI-NOTIFY 1 "Selected image file ($FP_SOURCE_IMG) does not exist, aborting..."
				Exit_On_Fail

			fi

			# Create loopback device from .img file
			modprobe loop || Exit_On_Fail
			FP_SOURCE=$(losetup -f)
			losetup $FP_SOURCE "$FP_SOURCE_IMG" || Exit_On_Fail
			partprobe $FP_SOURCE || Exit_On_Fail
			G_DIETPI-NOTIFY 0 "Mounted the image ($FP_SOURCE_IMG) as loopback device: $FP_SOURCE"

		fi

		# Detect partitions and list for selection
		G_WHIP_MENU_ARRAY=($(lsblk -npo NAME,SIZE ${FP_SOURCE}?*))
		# - Visually separate dev name and space
		for ((i=1;i<${#G_WHIP_MENU_ARRAY[@]};i+=2)); do G_WHIP_MENU_ARRAY[$i]=": ${G_WHIP_MENU_ARRAY[$i]}"; done
		G_WHIP_MENU 'Please select the OS root partition:' || Exit_On_Fail
		FP_ROOT_DEV=$G_WHIP_RETURNED_VALUE
		ROOT_PARTITION_INDEX=${FP_ROOT_DEV: -1}

		G_WHIP_DEFAULT_ITEM='DietPi_<device>-<arch>-<distro>'
		G_WHIP_INPUTBOX 'Please enter the filename for the new image:\n - DietPi_<device>-<arch>-<distro>\n - EG: DietPi_RPi-ARMv6-Buster' || Exit_On_Fail
		OUTPUT_IMG_NAME=$G_WHIP_RETURNED_VALUE
		OUTPUT_7Z_NAME="$OUTPUT_IMG_NAME.7z"

		# Add version number to output file name
		G_WHIP_DEFAULT_ITEM='v6.25'
		G_WHIP_INPUTBOX 'Please enter the DietPi version for this image:\n - EG: v6.25' || Exit_On_Fail
		OUTPUT_IMG_NAME="${OUTPUT_IMG_NAME//DietPi_/DietPi_${G_WHIP_RETURNED_VALUE}_}.img"

		# Check for existing file, in case offer backup
		if [[ -f '/root/'$OUTPUT_IMG_NAME ]]; then

			G_WHIP_BUTTON_OK_TEXT='Overwrite'
			G_WHIP_BUTTON_CANCEL_TEXT='Backup'
			G_WHIP_YESNO "[WARNING] /root/$OUTPUT_IMG_NAME already exists\n
Do you want to overwrite or backup the existing file to $OUTPUT_IMG_NAME.bak?" || mv /root/$OUTPUT_IMG_NAME /root/$OUTPUT_IMG_NAME.bak

		fi

	}

	Main(){

		Menu_Main

		# Install required packages
		G_AG_CHECK_INSTALL_PREREQ parted zerofree p7zip

		# Auto detect partition table type, failsafe detection of MBR to debug possibly other/unknown wording/partition table types
		if [[ $(parted -s $FP_SOURCE print) == *'Partition Table: msdos'* ]]; then

			G_DIETPI-NOTIFY 2 'MBR partition table detected'
			GPT=0

		# GPT images:
		# - "GPT PMBR size mismatch (4458495 != 15523839)"
		# - "Error: The backup GPT table is corrupt, but the primary appears OK, so that will be used."
		# - gdisk write will correct this
		elif [[ $(parted -s $FP_SOURCE print) == *'Partition Table: gpt'* ]]; then

			G_DIETPI-NOTIFY 2 'GPT partition table detected, applying gdisk fix...'
			GPT=1
			G_AG_CHECK_INSTALL_PREREQ gdisk
			echo -e 'w\ny\nq\n' | gdisk $FP_SOURCE

		else

			G_DIETPI-NOTIFY 1 "Unknown partition table type ($(parted -s $FP_SOURCE print | mawk '/^Partition Table:/ {print $3;exit}')), aborting..."
			Exit_On_Fail

		fi

		e2fsck -f $FP_ROOT_DEV

		# Remount image for any required edits
		fp_mnt='tmp_rootfs'
		mkdir -p /mnt/$fp_mnt
		if G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD mount $FP_ROOT_DEV /mnt/$fp_mnt; then

			G_WHIP_MSG "Image mounted for file editing, make changes if required: $FP_ROOT_DEV > /mnt/$fp_mnt\n\nPress 'Ok' when you are finished."
			sync
			G_RUN_CMD umount /mnt/$fp_mnt
			partprobe $FP_SOURCE # Failsafe

		fi

		e2fsck -f $FP_ROOT_DEV # Failsafe

		# Shrink file system to minimum
		# - Run multiple times until no change is done any more
		G_DIETPI-NOTIFY 2 'Shrinking RootFS to minimum size...'
		local out
		FS_SIZE=0
		while :
		do

			resize2fs -M $FP_ROOT_DEV 2>&1 | tee resize2fs_out
			if out=$(grep -im1 'nothing to do!' resize2fs_out); then

				# Re-add 4 MiB to be failsafe, was required on Raspbian Buster for successful boot
				FS_SIZE=$(mawk '{print $5 + 1024}' <<< $out) # 4k blocks
				rm resize2fs_out
				resize2fs $FP_ROOT_DEV $FS_SIZE
				G_DIETPI-NOTIFY 2 "Reduced RootFS size to $(( $FS_SIZE / 256 + 1 )) MiB"
				FS_SIZE=$(( $FS_SIZE * 8 )) # 4k blocks => 512 byte sectors
				break

			elif out=$(grep -im1 'no such file or directory' resize2fs_out); then

				G_DIETPI-NOTIFY 1 'Partition not found'
				Exit_On_Fail

			fi

		done

		# Estimate minimum end sector
		PART_START=$(fdisk -l -o Device,Start $FP_SOURCE | grep "^$FP_ROOT_DEV" | mawk '{print $2}') # 512 byte sectors
		PART_END_CURRENT=$(fdisk -l -o Device,End $FP_SOURCE | grep "^$FP_ROOT_DEV" | mawk '{print $2}')
		PART_END_TARGET=$(( $PART_START + $FS_SIZE ))

		# Only try to shrink partition when new end sector is less than current end sector
		if (( $PART_END_CURRENT > $PART_END_TARGET )); then

			G_DIETPI-NOTIFY 2 "Shrinking root partition to: $(( $FS_SIZE / 2048 + 1 )) MiB"
			parted $FP_SOURCE unit s resizepart $ROOT_PARTITION_INDEX $PART_END_TARGET yes
			partprobe $FP_SOURCE

		fi

		G_DIETPI-NOTIFY 2 'Overriding root partition free space with zeros to purge removed data and allow further archive size reduction...'
		zerofree -v $FP_ROOT_DEV
		sync

		# GPT images:
		# - "GPT PMBR size mismatch (4458495 != 15523839)"
		# - "Error: The backup GPT table is corrupt, but the primary appears OK, so that will be used."
		# - gdisk write will correct this
		(( $GPT )) && echo -e 'w\ny\nq\n' | gdisk $FP_SOURCE

		# Finished: Derive final image size from last partition end + failsafe buffer
		partprobe $FP_SOURCE
		IMAGE_SIZE=$(( ( $(fdisk -l -o End $FP_SOURCE | tail -1) + 1 ) * 512 )) # 512 byte sectors => Byte
		IMAGE_SIZE=$(( $IMAGE_SIZE + ( 512 * 256 ) )) # 64 byte for secondary GPT + safety net

		# Created final image + archive in /root
		cd /root

		# Image file source
		if [[ $FP_SOURCE_IMG ]]; then

			# Clear loop
			Delete_Loopback

			G_DIETPI-NOTIFY 2 "Truncating final image file to actually used size: $(( $IMAGE_SIZE / 1024 / 1024 + 1 )) MiB"
			truncate --size=$IMAGE_SIZE "$FP_SOURCE_IMG"

			# Rename and move to /root
			mv "$FP_SOURCE_IMG" $OUTPUT_IMG_NAME

		# Drive source
		else

			G_DIETPI-NOTIFY 2 "Creating final image with actually used size: $(( $IMAGE_SIZE / 1024 / 1024 + 1 )) MiB"
			dd if=$FP_SOURCE of=$OUTPUT_IMG_NAME bs=1M status=progress count=$(( $IMAGE_SIZE / 1024 / 1024 + 1 ))

		fi

		# Generate hashes: MD5, SHA1, SHA256
		G_DIETPI-NOTIFY 2 'Generating hashes to pack with image, please wait...'
		cat << _EOF_ > hash.txt
FILE:	$OUTPUT_IMG_NAME
DATE:	$(date)
MD5:	$(md5sum $OUTPUT_IMG_NAME | mawk '{print $1}')
SHA1:	$(sha1sum $OUTPUT_IMG_NAME | mawk '{print $1}')
SHA256:	$(sha256sum $OUTPUT_IMG_NAME | mawk '{print $1}')
_EOF_

		# Download current README
		G_DIETPI-NOTIFY 2 'Downloading current README.md to pack with image...'
		wget https://raw.githubusercontent.com/MichaIng/DietPi/master/README.md -O README.md || Exit_On_Fail

		# Generate 7z archive
		# NB: LZMA2 ultra compression method requires 2G RAM
		[[ -f $OUTPUT_7Z_NAME ]] && rm $OUTPUT_7Z_NAME
		G_DIETPI-NOTIFY 2 'Creating final 7zip archive...'
		if 7zr a -m0=lzma2 -mx=9 $OUTPUT_7Z_NAME $OUTPUT_IMG_NAME hash.txt README.md; then

			rm hash.txt README.md
			G_WHIP_MSG "[  OK  ] DietPi-Imager has successfully finished.\n
Final image file: /root/$OUTPUT_IMG_NAME
Final 7z archive: /root/$OUTPUT_7Z_NAME"

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main
	#/////////////////////////////////////////////////////////////////////////////////////
	Main
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
